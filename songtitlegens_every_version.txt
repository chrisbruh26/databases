Try AI directly in your favorite apps … Use Gemini to generate drafts and refine content, plus get Gemini Advanced with access to Google’s next-gen AI
2021 original


import random


FOB = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar',',','We\'re','Going','Down','Dance',',','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch',',','Donnie']
  #check for duplicate songs
for i in range(17):
  a = random.choice(FOB) + " " + random.choice(FOB)
  b = random.choice(FOB)
  c = random.choice(FOB)
  d = random.choice(FOB)
  e = random.choice(FOB)
  f = random.choice(FOB) + " " +random.choice(FOB) + " " + random.choice(FOB) + " " + random.choice(FOB)

  choices = [a,b,c,d,e,f]


   # res = True in ("the" in any for ele in choices)
   # print("Does any element satisfy specified condition ? : " + str(res))



   # for i in range(choices.length):
    #  print()


  fobcombo1 = ((a) + " " + (b))
  fobcombo2 = ((b) + " " + (c))
  fobcombo3 = ((c) + " " + (d))
  fobcombo4 = ((d) + " " + (e))
  fobcombo5 = ((b) + " " + (a))
  fobcombo6 = ((c) + " " + (d))
  fobcombo7 = ((e) + " " + (d))




  fobcombo8 = ((a) + " " + (b) + " " + (c))
  fobcombo9 = ((b) + " " + (c) + " " + (d) + " " + (a))
  fobcombo10 = ((c) + " " + (d) + " " + (e) + " " + (b))
  fobcombo11 = ((d) + " " + (e) + "/" + (a) + " " + (c) + " " + (b))
  fobcombo12 = ((b) + " " + (a) + " " + (e) + " " + (d))
  fobcombo13 = ((d) + " " + (c) + " " + (b))
  fobcombo14 = ((e) + " " + (d) + " " + (a))
  fobcombo15 = ((d) + " " + (e) + " " + (a) + " " + (c) + " " + (b))
  fobcombo16 = (f)
  fobcombo17 = ((d) + " " + (e) + "," + " " + (a) + " " + (c) + " " + (b))



  combos= [fobcombo1,fobcombo2,fobcombo3,fobcombo4,fobcombo5,fobcombo6,fobcombo7,fobcombo8,fobcombo9,fobcombo10,fobcombo11,fobcombo12,fobcombo13,fobcombo14, fobcombo15,fobcombo16, fobcombo17]


  print(random.choice(combos))




Unique words, write to text file 

# need text file with lyrics in it 

with open('lyrics.txt', 'r') as file:
    # Read the content of the file
    text = file.read()

# Split the text into a list of words
words = text.split()

unique_words = list(set(words))
print("\n\n\n\n unique words: \n\n")
print(unique_words)
 
## write information to a file ##

#my_list = ["apple", "banana", "cherry"] # change to text_to_add
#my_string = ", ".join(my_list) # change to unique_words
#print(my_string)

my_string = ", ".join(unique_words)
print(my_string)

file_path = "lyrics_unique.txt"
text_to_add = my_string

with open(file_path, "a") as file:
    file.write(text_to_add)

print(f"Text added to '{file_path}' successfully.")



Text file result 
can't, (Malibu), our, lay, TNA,, at, Your, think,, dick,, o-o-out,, I'm, DNA, up, pyramid, that, there's, day, ask, swallow, workin',, lot, in, know, when, Oh,, whole, Like,, give, lonelier, pout, addicted, said, gutter, scheme, Sean, call, (while, see-through, swallow,, pout,, clear, swear,, They, top, Out, Baby,, think, clean, God, into, The, wanna, 12, is, my, well, I'll, but, missing, Malibu?, Whoa,, Bel, light, Fall, It's, even, a, not, we, out, fuckin', And, your, lock, With, driving, of, do, on, You, let, Hello?, if, bottomed, Pretty, still, grind, yeah,, dressed, should, screws, I, How, eyelids, there, that's, chemicals, us, me,, unless, love?, out), A, dizzy, never, Sometimes,, forever?, so, fall,, fall, one, why, though, trip, dying, straight, steps, closed,, Make, caught, need, say, So, just, every, Yeah,, hell,, dreams), for, her, me, Boy, keeping, in), But, to, inside, it), coming, chemistry,, have, getting, love, two's, D-d-did, only, did, than, left, Don, down, key, 'Cause, (they, Well,, crooked, hope, where, staring, up?, B, found, (and, crime, see, baby,, deeper, singing, Air,, some, don't, the, B-baby,, stop, mighty, dreams, got, either, get, (gutter, way, You're, missing,, or, and, how, eyes, girl,, dollar, you, it, climb, hell, together

Categories of words 

import random

with open('lyrics.txt', 'r') as file:
    # Read the content of the file
    text = file.read()

# Split the text into a list of words
FOB = text.split()

numbers = []
verbs = []
nouns = []
adjectives = []
articles = []
pronouns = []
prepositons = []
conjunctions = []
other = []

for word in FOB:
    if word.isdigit():
        numbers.append(word)
    elif word.lower() in ['bleed','run', 'say', 'do', 'know', 'think', 'get', 'go', 'save', 'stop', 'care', 'dance', 'light', 'explode', 'shoot']:
        verbs.append(word)
    elif word.lower() in ['dollar', 'nose', 'minutes', 'heaven', 'church', 'sunshine', 'riptide', 'bishops', 'knife', 'trick', 'fall', 'death', 'valley', 'kids', 'winona', 'life', 'party', 'earth', 'autumn', 'boy', 'scene', 'shows', 'saturday', 'candles', 'skeletons', 'hotel', 'nyc', 'sugar', 'songs', 'dark', 'volcanoes', 'centuries', 'tea', 'pheonix', 'wilson', 'mistakes', 'memories', 'immortals', 'menace', 'champion', 'yesterday', 'scene', 'arms', 'race', 'party', 'rock', 'roll', 'july', 'slump', 'comeback', 'year', 'standard', 'hum', 'hallelujah', 'future', 'self', 'hands', 'xo', 'lawyer', 'way', 'mick', 'list', 'things', 'today', 'yule', 'eye', 'catch', 'donnie']:
        nouns.append(word)
    elif word.lower() in ['mighty', 'alright', 'hard', 'busy', 'little', 'young', 'frosty', 'royal', 'expensive', 'irresistible', 'real','my','your','shipped','gold','last']:
        adjectives.append(word)
    elif word.lower() in ['a', 'an', 'the']:
        articles.append(word)
    elif word.lower() in ['i', 'you', 'he','she','She\'s', 'it', 'we', 'they', 'me', 'him', 'her', 'us', 'them']:
        pronouns.append(word)
    elif word.lower() in ['on','in','at','to','from','with','by','for','into','off','onto','over']:
        prepositons.append(word)
    elif word.lower() in ['and','but','or','nor','so','yet']:
        conjunctions.append(word)
    else:
        other.append(word) #deal with 'other' later

def generate_title():
    x = random.randrange(1, 6)
    if x == 1:
        first_word = random.choice(numbers)
    elif x == 2:
        first_word = random.choice(verbs)
    elif x == 3:
        first_word = random.choice(nouns)
    elif x == 4:
        first_word = random.choice(adjectives)
    elif x == 5:
        first_word = random.choice(articles)
    elif x == 6:
        first_word = random.choice(pronouns)

    ###### generate the second word #######

    
    y = random.randrange(1, 3)
    if y == 1:
        last_word = random.choice(nouns)
    elif y == 2:
        last_word = random.choice(adjectives)
    elif y == 3:
        last_word = random.choice(pronouns)


        
    title = [first_word]
    for _ in range(2):
        title.append(random.choice(FOB))
        title.append(last_word)



    new_title = ' '.join(title)


    print(new_title)

    

generate_title()


# ultimate goal is to make it slightly more 
# grammatically correct while still being random enough to stay interesting 

# don’t be so strict about what the middle looks like maybe, but # make sure it never ends with an article or preposition, etc 


2/19 song title organizer backup 
import random

with open('lyrics.txt', 'r') as file:
    # Read the content of the file
    text = file.read()

# Split the text into a list of words
FOB = text.split()

numbers = []
verbs = []
nouns = []
adjectives = []
articles = []
pronouns = []
prepositons = []
conjunctions = []
other = []



for word in FOB:
    if word.isdigit():
        numbers.append(word)
    elif word.lower() in ['bleed','run', 'say', 'do', 'know', 'think', 'get', 'go', 'save', 'stop', 'care', 'dance', 'light', 'explode', 'shoot']:
        verbs.append(word)
    elif word.lower() in ['dollar', 'nose', 'minutes', 'heaven', 'church', 'sunshine', 'riptide', 'bishops', 'knife', 'trick', 'fall', 'death', 'valley', 'kids', 'winona', 'life', 'party', 'earth', 'autumn', 'boy', 'scene', 'shows', 'saturday', 'candles', 'skeletons', 'hotel', 'nyc', 'sugar', 'songs', 'dark', 'volcanoes', 'centuries', 'tea', 'pheonix', 'wilson', 'mistakes', 'memories', 'immortals', 'menace', 'champion', 'yesterday', 'scene', 'arms', 'race', 'party', 'rock', 'roll', 'july', 'slump', 'comeback', 'year', 'standard', 'hum', 'hallelujah', 'future', 'self', 'hands', 'xo', 'lawyer', 'way', 'mick', 'list', 'things', 'today', 'yule', 'eye', 'catch', 'donnie']:
        nouns.append(word)
    elif word.lower() in ['mighty', 'alright', 'hard', 'busy', 'little', 'young', 'frosty', 'royal', 'expensive', 'irresistible', 'real','my','your','shipped','gold','last']:
        adjectives.append(word)
    elif word.lower() in ['a', 'an', 'the']:
        articles.append(word)
    elif word.lower() in ['i', 'you', 'he','she','She\'s', 'it', 'we', 'they', 'me', 'him', 'her', 'us', 'them']:
        pronouns.append(word)
    elif word.lower() in ['on','in','at','to','from','with','by','for','into','off','onto','over']:
        prepositons.append(word)
    elif word.lower() in ['and','but','or','nor','so','yet']:
        conjunctions.append(word)
    else:
        other.append(word) #deal with 'other' later

def generate_title():
    x = random.randrange(1, 6)
    if x == 1:
        first_word = random.choice(numbers)
    elif x == 2:
        first_word = random.choice(verbs)
    elif x == 3:
        first_word = random.choice(nouns)
    elif x == 4:
        first_word = random.choice(adjectives)
        second_word = ""
        second_word = second_word + random.choice(nouns)
    elif x == 5:
        first_word = random.choice(articles)
    elif x == 6:
        first_word = random.choice(pronouns)

    ###### generate the second word #######

    
    y = random.randrange(1, 3)
    if y == 1:
        last_word = random.choice(nouns)
    elif y == 2:
        last_word = random.choice(adjectives)
    elif y == 3:
        last_word = random.choice(pronouns)


        
    title = [first_word]



    new_title = ' '.join(title)
    new_title = new_title.join(random.choice(FOB))
    #new_title = new_title.join(last_word)
    
    print(new_title)

#    new_title = ' '.join(newtitle)
    




# my goal is ultimately going to be to break down song titles or lyrics into parts of speech and then generate new song titles
    

generate_title()


Combining new with original code 

import random

with open('lyrics.txt', 'r') as file:
    # Read the content of the file
    text = file.read()

# Split the text into a list of words
FOB = text.split()

numbers = []
verbs = []
nouns = []
adjectives = []
articles = []
pronouns = []
prepositons = []
conjunctions = []
other = []




for word in FOB:
    if word.isdigit():
        numbers.append(word)
    elif word.lower() in ['bleed','run', 'say', 'do', 'know', 'think', 'get', 'go', 'save', 'stop', 'care', 'dance', 'light', 'explode', 'shoot']:
        verbs.append(word)
    elif word.lower() in ['dollar', 'nose', 'minutes', 'heaven', 'church', 'sunshine', 'riptide', 'bishops', 'knife', 'trick', 'fall', 'death', 'valley', 'kids', 'winona', 'life', 'party', 'earth', 'autumn', 'boy', 'scene', 'shows', 'saturday', 'candles', 'skeletons', 'hotel', 'nyc', 'sugar', 'songs', 'dark', 'volcanoes', 'centuries', 'tea', 'pheonix', 'wilson', 'mistakes', 'memories', 'immortals', 'menace', 'champion', 'yesterday', 'scene', 'arms', 'race', 'party', 'rock', 'roll', 'july', 'slump', 'comeback', 'year', 'standard', 'hum', 'hallelujah', 'future', 'self', 'hands', 'xo', 'lawyer', 'way', 'mick', 'list', 'things', 'today', 'yule', 'eye', 'catch', 'donnie']:
        nouns.append(word)
    elif word.lower() in ['mighty', 'alright', 'hard', 'busy', 'little', 'young', 'frosty', 'royal', 'expensive', 'irresistible', 'real','my','your','shipped','gold','last']:
        adjectives.append(word)
    elif word.lower() in ['a', 'an', 'the']:
        articles.append(word)
    elif word.lower() in ['i', 'you', 'he','she','She\'s', 'it', 'we', 'they', 'me', 'him', 'her', 'us', 'them']:
        pronouns.append(word)
    elif word.lower() in ['on','in','at','to','from','with','by','for','into','off','onto','over']:
        prepositons.append(word)
    elif word.lower() in ['and','but','or','nor','so','yet']:
        conjunctions.append(word)
    else:
        other.append(word) #deal with 'other' later




for i in range(5):
    a = random.choice(FOB) # + " " + random.choice(FOB) # make string longer
    b = random.choice(FOB)
    c = random.choice(FOB)
    d = random.choice(FOB)
    e = random.choice(FOB)
    f = random.choice(FOB) # + " " +random.choice(FOB) + " " + random.choice(FOB) + " " + random.choice(FOB) # make string longer
    
    choices = [a,b,c,d,e,f]
    
    if a in articles:
         a = random.choice(nouns) # for now, if any of the words are articles, replace them with nouns
    if b in articles:
        b = random.choice(nouns)
    if c in articles:
        c = random.choice(nouns)
    if d in articles:
        d = random.choice(nouns)
    if e in articles:
        e = random.choice(nouns)
    if f in articles:
        f = random.choice(nouns)
        
        
    fobcombo1 = ((a) + " " + (b))
    fobcombo2 = ((b) + " " + (c))
    fobcombo3 = ((c) + " " + (d))
    fobcombo4 = ((d) + " " + (e))
    fobcombo5 = ((b) + " " + (a))
    
    combos = [fobcombo1,fobcombo2,fobcombo3,fobcombo4,fobcombo5]
    
    print(random.choice(combos))
    
    print("1. " + fobcombo1)
    print("2. " + fobcombo2)
    print("3. " + fobcombo3)
    print("4. " + fobcombo4)
    print("5. " + fobcombo5)

# what I want to do is not have words duplicate so much 
# oh wait what about when I generate a random choice for a,
# I then immediately create the fobcombo 
# and gradually add to them 
# but then do a new random choice for the same letters each time I do a new title 


# so like what about this 
# a = random.choice(FOB)
# fobcombo1 = a
# b = random.choice(FOB)
# fobcombo1 = ((a) + " " + (b))
 
# when creating fobcombo2, generate again to prevent duplicates 
# a = random.choice(FOB)
# fobcombo2 = a 

# oh my god this is going SO WELL and I think it’s only gonna get better from here. 
# This is the updated code as of 12:45pm on 2/19 
# with a way to generate new words for each combo, but only part of the first two so far: 


Updated code with some unique word generation below



import random

with open('lyrics.txt', 'r') as file:
    # Read the content of the file
    text = file.read()



# Split the text into a list of words
FOB = text.split()

# must import list of song titles from another file or include it here
# need to combine with FOB and then be able to detect parts of speech in each item


numbers = []
verbs = []
nouns = []
adjectives = []
articles = []
pronouns = []
prepositons = []
conjunctions = []
other = []




for word in FOB:
    if word.isdigit():
        numbers.append(word)
    elif word.lower() in ['bleed','run', 'say', 'do', 'know', 'think', 'get', 'go', 'save', 'stop', 'care', 'dance', 'light', 'explode', 'shoot']:
        verbs.append(word)
    elif word.lower() in ['dollar', 'nose', 'minutes', 'heaven', 'church', 'sunshine', 'riptide', 'bishops', 'knife', 'trick', 'fall', 'death', 'valley', 'kids', 'winona', 'life', 'party', 'earth', 'autumn', 'boy', 'scene', 'shows', 'saturday', 'candles', 'skeletons', 'hotel', 'nyc', 'sugar', 'songs', 'dark', 'volcanoes', 'centuries', 'tea', 'pheonix', 'wilson', 'mistakes', 'memories', 'immortals', 'menace', 'champion', 'yesterday', 'scene', 'arms', 'race', 'party', 'rock', 'roll', 'july', 'slump', 'comeback', 'year', 'standard', 'hum', 'hallelujah', 'future', 'self', 'hands', 'xo', 'lawyer', 'way', 'mick', 'list', 'things', 'today', 'yule', 'eye', 'catch', 'donnie']:
        nouns.append(word)
    elif word.lower() in ['mighty', 'alright', 'hard', 'busy', 'little', 'young', 'frosty', 'royal', 'expensive', 'irresistible', 'real','my','your','shipped','gold','last']:
        adjectives.append(word)
    elif word.lower() in ['a', 'an', 'the']:
        articles.append(word)
    elif word.lower() in ['i', 'you', 'he','she','She\'s', 'it', 'we', 'they', 'me', 'him', 'her', 'us', 'them']:
        pronouns.append(word)
    elif word.lower() in ['on','in','at','to','from','with','by','for','into','off','onto','over']:
        prepositons.append(word)
    elif word.lower() in ['and','but','or','nor','so','yet']:
        conjunctions.append(word)
    else:
        other.append(word) #deal with 'other' later




for i in range(5):
    a = random.choice(FOB) # + " " + random.choice(FOB) # make string longer
    b = random.choice(FOB)
    c = random.choice(FOB)
    d = random.choice(FOB)
    e = random.choice(FOB)
    f = random.choice(FOB) # + " " +random.choice(FOB) + " " + random.choice(FOB) + " " + random.choice(FOB) # make string longer
    
    choices = [a,b,c,d,e,f]
    
    if a in articles:
         a = random.choice(nouns) # for now, if any of the words are articles, replace them with nouns
    if b in articles:
        b = random.choice(nouns)
    if c in articles:
        c = random.choice(nouns)
    if d in articles:
        d = random.choice(nouns)
    if e in articles:
        e = random.choice(nouns)
    if f in articles:
        f = random.choice(nouns)
    
    
    fobcombo1 = ((a) + " " + (b) + " " + (c))
    fobcombo2 = ((b) + " " + (c) + " " + (d) + " " + (a))
    fobcombo3 = ((c) + " " + (f) + " " + (b))
    fobcombo4 = ((d) + " " + (e)+ " " + (f))
    fobcombo5 = ((b) + " " + (a) + " " + (c) + " " + (d))
    
    combos = [fobcombo1,fobcombo2,fobcombo3,fobcombo4,fobcombo5]

 

    print(random.choice(combos))

######### generate different choices for each word in every combo #########
    
def no_duplicates():
    print("\n\nchoosing words randomly each time to prevent duplicates: \n\n\n")
    a = random.choice(FOB)
    fobcombo1 = a
    b = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b)) # combine two random words into a title for the first combo
    c = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))

   # should have a way to order words in the title by part of speech

    print(fobcombo1) # print the first combo

    # when creating fobcombo2, generate again to prevent duplicates 
    a = random.choice(FOB) # chooses a new random word, this time different from the first definition of a
    fobcombo2 = a

#    c = random.choice(FOB) # for later 
#    d = random.choice(FOB) # for later

    print(fobcombo2)

no_duplicates()

Updated version - no duplicates this time, better efficiency with functions 

import random

with open('lyrics.txt', 'r') as file:
    # Read the content of the file
    text = file.read()



# Split the text into a list of words
FOB = text.split()

# must import list of song titles from another file or include it here
# need to combine with FOB and then be able to detect parts of speech in each item


numbers = []
verbs = []
nouns = []
adjectives = []
articles = []
pronouns = []
prepositons = []
conjunctions = []
other = []




for word in FOB:
    if word.isdigit():
        numbers.append(word)
    elif word.lower() in ['bleed','run', 'say', 'do', 'know', 'think', 'get', 'go', 'save', 'stop', 'care', 'dance', 'light', 'explode', 'shoot']:
        verbs.append(word)
    elif word.lower() in ['dollar', 'nose', 'minutes', 'heaven', 'church', 'sunshine', 'riptide', 'bishops', 'knife', 'trick', 'fall', 'death', 'valley', 'kids', 'winona', 'life', 'party', 'earth', 'autumn', 'boy', 'scene', 'shows', 'saturday', 'candles', 'skeletons', 'hotel', 'nyc', 'sugar', 'songs', 'dark', 'volcanoes', 'centuries', 'tea', 'pheonix', 'wilson', 'mistakes', 'memories', 'immortals', 'menace', 'champion', 'yesterday', 'scene', 'arms', 'race', 'party', 'rock', 'roll', 'july', 'slump', 'comeback', 'year', 'standard', 'hum', 'hallelujah', 'future', 'self', 'hands', 'xo', 'lawyer', 'way', 'mick', 'list', 'things', 'today', 'yule', 'eye', 'catch', 'donnie']:
        nouns.append(word)
    elif word.lower() in ['mighty', 'alright', 'hard', 'busy', 'little', 'young', 'frosty', 'royal', 'expensive', 'irresistible', 'real','my','your','shipped','gold','last']:
        adjectives.append(word)
    elif word.lower() in ['a', 'an', 'the']:
        articles.append(word)
    elif word.lower() in ['i', 'you', 'he','she','She\'s', 'it', 'we', 'they', 'me', 'him', 'her', 'us', 'them']:
        pronouns.append(word)
    elif word.lower() in ['on','in','at','to','from','with','by','for','into','off','onto','over']:
        prepositons.append(word)
    elif word.lower() in ['and','but','or','nor','so','yet']:
        conjunctions.append(word)
    else:
        other.append(word) #deal with 'other' later

'''
# loop for assigning variables to random words and checking for articles

for i in range(5):
    a = random.choice(FOB) # + " " + random.choice(FOB) # make string longer
    b = random.choice(FOB)
    c = random.choice(FOB)
    d = random.choice(FOB)
    e = random.choice(FOB)
    f = random.choice(FOB) # + " " +random.choice(FOB) + " " + random.choice(FOB) + " " + random.choice(FOB) # make string longer
    
    choices = [a,b,c,d,e,f]
    
    if a in articles:
         a = random.choice(nouns) # for now, if any of the words are articles, replace them with nouns
    if b in articles:
        b = random.choice(nouns)
    if c in articles:
        c = random.choice(nouns)
    if d in articles:
        d = random.choice(nouns)
    if e in articles:
        e = random.choice(nouns)
    if f in articles:
        f = random.choice(nouns)
    
    
    fobcombo1 = ((a) + " " + (b) + " " + (c))
    fobcombo2 = ((b) + " " + (c) + " " + (d) + " " + (a))
    fobcombo3 = ((c) + " " + (f) + " " + (b))
    fobcombo4 = ((d) + " " + (e)+ " " + (f))
    fobcombo5 = ((b) + " " + (a) + " " + (c) + " " + (d))
    
    combos = [fobcombo1,fobcombo2,fobcombo3,fobcombo4,fobcombo5]

 

    print(random.choice(combos))
'''


######### generate different choices for each word in every combo #########
    
def no_duplicates():
    print("\n\nchoosing words randomly each time to prevent duplicates: \n\n\n")

    ####### first combo #######
    a = random.choice(FOB)
    fobcombo1 = a
    b = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b)) # combine two random words into a title for the first combo
    c = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))


   # should have a way to order words in the title by part of speech

    print(fobcombo1) # print the first combo

    # when creating fobcombo2, generate again to prevent duplicates 
    
    ####### second combo #######
    
    a = random.choice(FOB) # chooses a new random word, this time different from the first definition of a
    fobcombo2 = a
    b = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b))
    print(fobcombo2)
    c = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))

    print(fobcombo2)


    ######## third combo ########

    a = random.choice(FOB)
    fobcombo3 = a
    b = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b))
    print(fobcombo3)
    c = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))

    print(fobcombo3)

    # I now have three different combos, each with a different random word for each word in the title


#    c = random.choice(FOB) # for later 
#    d = random.choice(FOB) # for later



def first_title():
    ####### first combo #######
    word1 = random.choice(FOB)
    fobcombo1 = word1
    word2 = random.choice(FOB)
    fobcombo1 = ((word1) + " " + (word2)) # combine two random words into a title for the first combo
    word3 = random.choice(FOB)
    fobcombo1 = ((word1) + " " + (word2) + " " + (word3))
    word4 = random.choice(FOB)
    fobcombo1 = ((word1) + " " + (word2) + " " + (word3) + " " + (word4))
    word5 = random.choice(FOB)
    fobcombo1 = ((word1) + " " + (word2) + " " + (word3) + " " + (word4) + " " + (word5))


    # should have a way to order words in the title by part of speech

    print(fobcombo1) # print the first combo


def second_title():
    ####### second combo #######
    word1 = random.choice(FOB)
    fobcombo2 = word1
    word2 = random.choice(FOB)
    fobcombo2 = ((word1) + " " + (word2)) 
    word3 = random.choice(FOB)
    fobcombo2 = ((word1) + " " + (word2) + " " + (word3))
    word4 = random.choice(FOB)
    fobcombo2 = ((word1) + " " + (word2) + " " + (word3) + " " + (word4))
    word5 = random.choice(FOB)
    fobcombo2 = ((word1) + " " + (word2) + " " + (word3) + " " + (word4) + " " + (word5))



    print(fobcombo2) # print the second combo


#no_duplicates()

first_title()
second_title()

Major breakthrough 

import random

with open('lyrics.txt', 'r') as file:
    # Read the content of the file
    text = file.read()


# Split the text into a list of words
lyrics = text.split()


titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar',',','We\'re','Going','Down','Dance',',','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch',',','Donnie']

FOB = titles + lyrics # combine existing titles with lyrics




# must import list of song titles from another file or include it here
# need to combine with FOB and then be able to detect parts of speech in each item


numbers = []
verbs = []
nouns = []
adjectives = []
articles = []
pronouns = []
prepositons = []
conjunctions = []
other = []




for word in FOB:
    if word.isdigit():
        numbers.append(word)
    elif word.lower() in ['bleed','run', 'say', 'do', 'know', 'think', 'get', 'go', 'save', 'stop', 'care', 'dance', 'light', 'explode', 'shoot']:
        verbs.append(word)
    elif word.lower() in ['dollar', 'nose', 'minutes', 'heaven', 'church', 'sunshine', 'riptide', 'bishops', 'knife', 'trick', 'fall', 'death', 'valley', 'kids', 'winona', 'life', 'party', 'earth', 'autumn', 'boy', 'scene', 'shows', 'saturday', 'candles', 'skeletons', 'hotel', 'nyc', 'sugar', 'songs', 'dark', 'volcanoes', 'centuries', 'tea', 'pheonix', 'wilson', 'mistakes', 'memories', 'immortals', 'menace', 'champion', 'yesterday', 'scene', 'arms', 'race', 'party', 'rock', 'roll', 'july', 'slump', 'comeback', 'year', 'standard', 'hum', 'hallelujah', 'future', 'self', 'hands', 'xo', 'lawyer', 'way', 'mick', 'list', 'things', 'today', 'yule', 'eye', 'catch', 'donnie']:
        nouns.append(word)
    elif word.lower() in ['mighty', 'alright', 'hard', 'busy', 'little', 'young', 'frosty', 'royal', 'expensive', 'irresistible', 'real','my','your','shipped','gold','last']:
        adjectives.append(word)
    elif word.lower() in ['a', 'an', 'the']:
        articles.append(word)
    elif word.lower() in ['i', 'you', 'he','she','She\'s', 'it', 'we', 'they', 'me', 'him', 'her', 'us', 'them']:
        pronouns.append(word)
    elif word.lower() in ['on','in','at','to','from','with','by','for','into','off','onto','over']:
        prepositons.append(word)
    elif word.lower() in ['and','but','or','nor','so','yet']:
        conjunctions.append(word)
    else:
        other.append(word) #deal with 'other' later

'''
# loop for assigning variables to random words and checking for articles

for i in range(5):
    a = random.choice(FOB) # + " " + random.choice(FOB) # make string longer
    b = random.choice(FOB)
    c = random.choice(FOB)
    d = random.choice(FOB)
    e = random.choice(FOB)
    f = random.choice(FOB) # + " " +random.choice(FOB) + " " + random.choice(FOB) + " " + random.choice(FOB) # make string longer
    
    choices = [a,b,c,d,e,f]
    
    if a in articles:
         a = random.choice(nouns) # for now, if any of the words are articles, replace them with nouns
    if b in articles:
        b = random.choice(nouns)
    if c in articles:
        c = random.choice(nouns)
    if d in articles:
        d = random.choice(nouns)
    if e in articles:
        e = random.choice(nouns)
    if f in articles:
        f = random.choice(nouns)
    
    
    fobcombo1 = ((a) + " " + (b) + " " + (c))
    fobcombo2 = ((b) + " " + (c) + " " + (d) + " " + (a))
    fobcombo3 = ((c) + " " + (f) + " " + (b))
    fobcombo4 = ((d) + " " + (e)+ " " + (f))
    fobcombo5 = ((b) + " " + (a) + " " + (c) + " " + (d))
    
    combos = [fobcombo1,fobcombo2,fobcombo3,fobcombo4,fobcombo5]

 

    print(random.choice(combos))
'''


######### generate different choices for each word in every combo #########
    
def no_duplicates():
    print("\n\nchoosing words randomly each time to prevent duplicates: \n\n\n")

    ####### first combo #######
    a = random.choice(FOB)
    fobcombo1 = a
    b = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b)) # combine two random words into a title for the first combo
    c = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))


   # should have a way to order words in the title by part of speech

    print(fobcombo1) # print the first combo

    # when creating fobcombo2, generate again to prevent duplicates 
    
    ####### second combo #######
    
    a = random.choice(FOB) # chooses a new random word, this time different from the first definition of a
    fobcombo2 = a
    b = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b))
    print(fobcombo2)
    c = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))

    print(fobcombo2)


    ######## third combo ########

    a = random.choice(FOB)
    fobcombo3 = a
    b = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b))
    print(fobcombo3)
    c = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))

    print(fobcombo3)

    # I now have three different combos, each with a different random word for each word in the title


#    c = random.choice(FOB) # for later 
#    d = random.choice(FOB) # for later



def first_title():
    ####### first combo #######
    word1 = random.choice(FOB)
    fobcombo1 = word1
    word2 = random.choice(FOB)
    fobcombo1 = ((word1) + " " + (word2)) # combine two random words into a title for the first combo
    word3 = random.choice(FOB)
    fobcombo1 = ((word1) + " " + (word2) + " " + (word3))
    word4 = random.choice(FOB)
    fobcombo1 = ((word1) + " " + (word2) + " " + (word3) + " " + (word4))
    word5 = random.choice(FOB)
    fobcombo1 = ((word1) + " " + (word2) + " " + (word3) + " " + (word4) + " " + (word5))


    # should have a way to order words in the title by part of speech

    print(fobcombo1) # print the first combo


def second_title():
    ####### second combo #######
    word1 = random.choice(FOB)
    fobcombo2 = word1
    word2 = random.choice(FOB)
    fobcombo2 = ((word1) + " " + (word2)) 
    word3 = random.choice(FOB)
    fobcombo2 = ((word1) + " " + (word2) + " " + (word3))
    word4 = random.choice(FOB)
    fobcombo2 = ((word1) + " " + (word2) + " " + (word3) + " " + (word4))
    word5 = random.choice(FOB)
    fobcombo2 = ((word1) + " " + (word2) + " " + (word3) + " " + (word4) + " " + (word5))



    print(fobcombo2) # print the second combo


def third_title():
    ####### third combo #######
    word1 = random.choice(FOB)
    fobcombo3 = word1
    word2 = random.choice(FOB)
    fobcombo3 = ((word1) + " " + (word2)) 
    word3 = random.choice(FOB)
    fobcombo3 = ((word1) + " " + (word2) + " " + (word3))
    word4 = random.choice(FOB)
    fobcombo3 = ((word1) + " " + (word2) + " " + (word3) + " " + (word4))
    word5 = random.choice(FOB)
    fobcombo3 = ((word1) + " " + (word2) + " " + (word3) + " " + (word4) + " " + (word5))



    print(fobcombo3) # print the third combo

    

#no_duplicates()

first_title()
second_title()
third_title()

Huge thing oh my god. This is it. Just one function for random titles 

import random

with open('lyrics.txt', 'r') as file:
    # Read the content of the file
    text = file.read()


# Split the text into a list of words
lyrics = text.split()


titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar',',','We\'re','Going','Down','Dance',',','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch',',','Donnie']

FOB = titles + lyrics # combine existing titles with lyrics




# must import list of song titles from another file or include it here
# need to combine with FOB and then be able to detect parts of speech in each item


numbers = []
verbs = []
nouns = []
adjectives = []
articles = []
pronouns = []
prepositons = []
conjunctions = []
other = []




for word in FOB:
    if word.isdigit():
        numbers.append(word)
    elif word.lower() in ['bleed','run', 'say', 'do', 'know', 'think', 'get', 'go', 'save', 'stop', 'care', 'dance', 'light', 'explode', 'shoot']:
        verbs.append(word)
    elif word.lower() in ['dollar', 'nose', 'minutes', 'heaven', 'church', 'sunshine', 'riptide', 'bishops', 'knife', 'trick', 'fall', 'death', 'valley', 'kids', 'winona', 'life', 'party', 'earth', 'autumn', 'boy', 'scene', 'shows', 'saturday', 'candles', 'skeletons', 'hotel', 'nyc', 'sugar', 'songs', 'dark', 'volcanoes', 'centuries', 'tea', 'pheonix', 'wilson', 'mistakes', 'memories', 'immortals', 'menace', 'champion', 'yesterday', 'scene', 'arms', 'race', 'party', 'rock', 'roll', 'july', 'slump', 'comeback', 'year', 'standard', 'hum', 'hallelujah', 'future', 'self', 'hands', 'xo', 'lawyer', 'way', 'mick', 'list', 'things', 'today', 'yule', 'eye', 'catch', 'donnie']:
        nouns.append(word)
    elif word.lower() in ['mighty', 'alright', 'hard', 'busy', 'little', 'young', 'frosty', 'royal', 'expensive', 'irresistible', 'real','my','your','shipped','gold','last']:
        adjectives.append(word)
    elif word.lower() in ['a', 'an', 'the']:
        articles.append(word)
    elif word.lower() in ['i', 'you', 'he','she','She\'s', 'it', 'we', 'they', 'me', 'him', 'her', 'us', 'them']:
        pronouns.append(word)
    elif word.lower() in ['on','in','at','to','from','with','by','for','into','off','onto','over']:
        prepositons.append(word)
    elif word.lower() in ['and','but','or','nor','so','yet']:
        conjunctions.append(word)
    else:
        other.append(word) #deal with 'other' later

'''
# loop for assigning variables to random words and checking for articles

for i in range(5):
    a = random.choice(FOB) # + " " + random.choice(FOB) # make string longer
    b = random.choice(FOB)
    c = random.choice(FOB)
    d = random.choice(FOB)
    e = random.choice(FOB)
    f = random.choice(FOB) # + " " +random.choice(FOB) + " " + random.choice(FOB) + " " + random.choice(FOB) # make string longer
    
    choices = [a,b,c,d,e,f]
    
    if a in articles:
         a = random.choice(nouns) # for now, if any of the words are articles, replace them with nouns
    if b in articles:
        b = random.choice(nouns)
    if c in articles:
        c = random.choice(nouns)
    if d in articles:
        d = random.choice(nouns)
    if e in articles:
        e = random.choice(nouns)
    if f in articles:
        f = random.choice(nouns)
    
    
    fobcombo1 = ((a) + " " + (b) + " " + (c))
    fobcombo2 = ((b) + " " + (c) + " " + (d) + " " + (a))
    fobcombo3 = ((c) + " " + (f) + " " + (b))
    fobcombo4 = ((d) + " " + (e)+ " " + (f))
    fobcombo5 = ((b) + " " + (a) + " " + (c) + " " + (d))
    
    combos = [fobcombo1,fobcombo2,fobcombo3,fobcombo4,fobcombo5]

 

    print(random.choice(combos))
'''


######### generate different choices for each word in every combo #########

###### no duplicates function, idk if I'll keep #######
# this function is supposed to prevent duplicates by choosing a new random word each time


def no_duplicates():
    print("\n\nchoosing words randomly each time to prevent duplicates: \n\n\n")

    ####### first combo #######
    a = random.choice(FOB)
    fobcombo1 = a
    b = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b)) # combine two random words into a title for the first combo
    c = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))


   # should have a way to order words in the title by part of speech

    print(fobcombo1) # print the first combo

    # when creating fobcombo2, generate again to prevent duplicates 
    
    ####### second combo #######
    
    a = random.choice(FOB) # chooses a new random word, this time different from the first definition of a
    fobcombo2 = a
    b = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b))
    print(fobcombo2)
    c = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))

    print(fobcombo2)


    ######## third combo ########

    a = random.choice(FOB)
    fobcombo3 = a
    b = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b))
    print(fobcombo3)
    c = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))

    print(fobcombo3)

    # I now have three different combos, each with a different random word for each word in the title

########## functions that have been successful in generating random titles ##########

# I should look at how to use the following code: 
'''
    if a in articles:
         a = random.choice(nouns) # for now, if any of the words are articles, replace them with nouns

        # in the other function, I could say something like: if word1 is an article, replace it with a random noun

    if b in articles:
        b = random.choice(nouns)
    if c in articles:
        c = random.choice(nouns)
    if d in articles:
        d = random.choice(nouns)
    if e in articles:
        e = random.choice(nouns)
    if f in articles:
        f = random.choice(nouns)
        '''


def random_title():

    word1 = random.choice(FOB) # choose random word for first word 
    
    ##### prevent articles ######

    if word1 in articles: # if the word is an article, replace it with a random noun
        word1 = random.choice(nouns) # just a placeholder for now, may refine later 
    else:
        fobcombo1 = word1

    word2 = random.choice(FOB)
    
    if word2 in articles:
        word2 = random.choice(nouns)
    else:
        fobcombo1 = ((word1) + " " + (word2)) # combine two random words into a title for the first combo
    

    word3 = random.choice(FOB)
    
    if word3 in articles:
        word3 = random.choice(nouns)
    else:
        fobcombo1 = ((word1) + " " + (word2) + " " + (word3))
    
    word4 = random.choice(FOB)
    if word4 in articles:
        word4 = random.choice(nouns)
    else:
        fobcombo1 = ((word1) + " " + (word2) + " " + (word3) + " " + (word4))
    
    word5 = random.choice(FOB)
    
    if word5 in articles:
        word5 = random.choice(nouns)
    else:
        fobcombo1 = ((word1) + " " + (word2) + " " + (word3) + " " + (word4) + " " + (word5))


    # should have a way to order words in the title by part of speech

    print(fobcombo1) # print the first combo



#second_title()
#third_title()


for i in range(10):
    random_title()   # OH MY GOD this is so cool. All I needed was a single function to generate a new word each time 

Added random length of title

import random

with open('lyrics_unique.txt', 'r') as file:
    # Read the content of the file
    text = file.read()


# Split the text into a list of words
lyrics = text.split()


titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch',',','Donnie']

FOB = titles + lyrics # combine existing titles with lyrics

# must import list of song titles from another file or include it here
# need to combine with FOB and then be able to detect parts of speech in each item


numbers = []
verbs = []
nouns = []
adjectives = []
articles = []
pronouns = []
prepositons = []
conjunctions = []
other = []




for word in FOB:
    if word.isdigit():
        numbers.append(word)
    elif word.lower() in ['bleed','run', 'say', 'do', 'know', 'think', 'get', 'go', 'save', 'stop', 'care', 'dance', 'light', 'explode', 'shoot']:
        verbs.append(word)
    elif word.lower() in ['dollar', 'nose', 'minutes', 'heaven', 'church', 'sunshine', 'riptide', 'bishops', 'knife', 'trick', 'fall', 'death', 'valley', 'kids', 'winona', 'life', 'party', 'earth', 'autumn', 'boy', 'scene', 'shows', 'saturday', 'candles', 'skeletons', 'hotel', 'nyc', 'sugar', 'songs', 'dark', 'volcanoes', 'centuries', 'tea', 'pheonix', 'wilson', 'mistakes', 'memories', 'immortals', 'menace', 'champion', 'yesterday', 'scene', 'arms', 'race', 'party', 'rock', 'roll', 'july', 'slump', 'comeback', 'year', 'standard', 'hum', 'hallelujah', 'future', 'self', 'hands', 'xo', 'lawyer', 'way', 'mick', 'list', 'things', 'today', 'yule', 'eye', 'catch', 'donnie']:
        nouns.append(word)
    elif word.lower() in ['mighty', 'alright', 'hard', 'busy', 'little', 'young', 'frosty', 'royal', 'expensive', 'irresistible', 'real','my','your','shipped','gold','last']:
        adjectives.append(word)
    elif word.lower() in ['a', 'an', 'the']:
        articles.append(word)
    elif word.lower() in ['i', 'you', 'he','she','She\'s', 'it', 'we', 'they', 'me', 'him', 'her', 'us', 'them']:
        pronouns.append(word)
    elif word.lower() in ['on','in','at','to','from','with','by','for','into','off','onto','over']:
        prepositons.append(word)
    elif word.lower() in ['and','but','or','nor','so','yet']:
        conjunctions.append(word)
    else:
        other.append(word) #deal with 'other' later

'''
# loop for assigning variables to random words and checking for articles

for i in range(5):
    a = random.choice(FOB) # + " " + random.choice(FOB) # make string longer
    b = random.choice(FOB)
    c = random.choice(FOB)
    d = random.choice(FOB)
    e = random.choice(FOB)
    f = random.choice(FOB) # + " " +random.choice(FOB) + " " + random.choice(FOB) + " " + random.choice(FOB) # make string longer
    
    choices = [a,b,c,d,e,f]
    
    if a in articles:
         a = random.choice(nouns) # for now, if any of the words are articles, replace them with nouns
    if b in articles:
        b = random.choice(nouns)
    if c in articles:
        c = random.choice(nouns)
    if d in articles:
        d = random.choice(nouns)
    if e in articles:
        e = random.choice(nouns)
    if f in articles:
        f = random.choice(nouns)
    
    
    fobcombo1 = ((a) + " " + (b) + " " + (c))
    fobcombo2 = ((b) + " " + (c) + " " + (d) + " " + (a))
    fobcombo3 = ((c) + " " + (f) + " " + (b))
    fobcombo4 = ((d) + " " + (e)+ " " + (f))
    fobcombo5 = ((b) + " " + (a) + " " + (c) + " " + (d))
    
    combos = [fobcombo1,fobcombo2,fobcombo3,fobcombo4,fobcombo5]

 

    print(random.choice(combos))
'''


######### generate different choices for each word in every combo #########

###### no duplicates function, idk if I'll keep #######
# this function is supposed to prevent duplicates by choosing a new random word each time


def no_duplicates():
    print("\n\nchoosing words randomly each time to prevent duplicates: \n\n\n")

    ####### first combo #######
    a = random.choice(FOB)
    fobcombo1 = a
    b = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b)) # combine two random words into a title for the first combo
    c = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))


   # should have a way to order words in the title by part of speech

    print(fobcombo1) # print the first combo

    # when creating fobcombo2, generate again to prevent duplicates 
    
    ####### second combo #######
    
    a = random.choice(FOB) # chooses a new random word, this time different from the first definition of a
    fobcombo2 = a
    b = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b))
    print(fobcombo2)
    c = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))

    print(fobcombo2)


    ######## third combo ########

    a = random.choice(FOB)
    fobcombo3 = a
    b = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b))
    print(fobcombo3)
    c = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))

    print(fobcombo3)

    # I now have three different combos, each with a different random word for each word in the title

########## functions that have been successful in generating random titles ##########


def random_title():
    word1 = random.choice(FOB) # choose random word for first word 
    
    ##### prevent articles ######
    if word1 in articles: # if the word is an article, replace it with a random verb
        word1 = random.choice(verbs) # just a placeholder for now, may refine later 

    word2 = random.choice(FOB)
    if word2 in articles:
        word2 = random.choice(verbs)

    word3 = random.choice(FOB)
    if word3 in articles:
        word3 = random.choice(verbs)

    word4 = random.choice(FOB)
    if word4 in articles:
        word4 = random.choice(verbs)

    word5 = random.choice(FOB)
    if word5 in articles:
        word5 = random.choice(verbs)

    # Combine the words into a single string with spaces between them


    # random number between 2 and 5 will determine length of title 
    x = random.randint(2, 5)
    if x == 2:
        fobcombo1 = ' '.join([word1, word2]) # turn list with two words into string
    elif x == 3:
        fobcombo1 = ' '.join([word1, word2, word3]) # turn list with three words into string
    elif x == 4:
        fobcombo1 = ' '.join([word1, word2, word3, word4]) # turn lis twith four words  into string
    elif x == 5:
        fobcombo1 = ' '.join([word1, word2, word3, word4, word5]) # turn list with five words into string
    
    fobcombo1 = fobcombo1.replace(",", "") # delete comma from string 
    
    print(fobcombo1) # print the title
    




# Generate 10 random titles
for i in range(10):
    random_title()   # OH MY GOD this is so cool. All I needed was a single function to generate a new word each time, then call that function within a loop 

# I need to organize the words based on parts of speech and not always exclude articles, so edit that placeholder 


5pm backup 
import random

with open('lyrics_unique.txt', 'r') as file:
    # Read the content of the file
    text = file.read()


# Split the text into a list of words
lyrics = text.split()


titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']

FOB = titles + lyrics # combine existing titles with lyrics

# must import list of song titles from another file or include it here
# need to combine with FOB and then be able to detect parts of speech in each item


numbers = []
verbs = []
nouns = []
adjectives = []
articles = []
pronouns = []
prepositons = []
conjunctions = []
other = []




for word in FOB:
    if word.isdigit():
        numbers.append(word)
    elif word.lower() in ['bleed','run', 'say', 'do', 'know', 'think', 'get', 'go', 'save', 'stop', 'care', 'dance', 'light', 'explode', 'shoot']:
        verbs.append(word)
    elif word.lower() in ['dollar', 'nose', 'minutes', 'heaven', 'church', 'sunshine', 'riptide', 'bishops', 'knife', 'trick', 'fall', 'death', 'valley', 'kids', 'winona', 'life', 'party', 'earth', 'autumn', 'boy', 'scene', 'shows', 'saturday', 'candles', 'skeletons', 'hotel', 'nyc', 'sugar', 'songs', 'dark', 'volcanoes', 'centuries', 'tea', 'pheonix', 'wilson', 'mistakes', 'memories', 'immortals', 'menace', 'champion', 'yesterday', 'scene', 'arms', 'race', 'party', 'rock', 'roll', 'july', 'slump', 'comeback', 'year', 'standard', 'hum', 'hallelujah', 'future', 'self', 'hands', 'xo', 'lawyer', 'way', 'mick', 'list', 'things', 'today', 'yule', 'eye', 'catch', 'donnie']:
        nouns.append(word)
    elif word.lower() in ['mighty', 'alright', 'hard', 'busy', 'little', 'young', 'frosty', 'royal', 'expensive', 'irresistible', 'real','my','your','shipped','gold','last']:
        adjectives.append(word)
    elif word.lower() in ['a', 'an', 'the']:
        articles.append(word)
    elif word.lower() in ['I\'m','i', 'you', 'he','she','She\'s', 'it', 'we', 'they', 'me', 'my', 'him', 'her', 'us', 'them']:
        pronouns.append(word)
    elif word.lower() in ['on','in','at','to','from','with','by','for','into','off','onto','over']:
        prepositons.append(word)
    elif word.lower() in ['and','but','or','nor','so','yet']:
        conjunctions.append(word)
    else:
        other.append(word) #deal with 'other' later

'''
# loop for assigning variables to random words and checking for articles

for i in range(5):
    a = random.choice(FOB) # + " " + random.choice(FOB) # make string longer
    b = random.choice(FOB)
    c = random.choice(FOB)
    d = random.choice(FOB)
    e = random.choice(FOB)
    f = random.choice(FOB) # + " " +random.choice(FOB) + " " + random.choice(FOB) + " " + random.choice(FOB) # make string longer
    
    choices = [a,b,c,d,e,f]
    
    if a in articles:
         a = random.choice(nouns) # for now, if any of the words are articles, replace them with nouns
    if b in articles:
        b = random.choice(nouns)
    if c in articles:
        c = random.choice(nouns)
    if d in articles:
        d = random.choice(nouns)
    if e in articles:
        e = random.choice(nouns)
    if f in articles:
        f = random.choice(nouns)
    
    
    fobcombo1 = ((a) + " " + (b) + " " + (c))
    fobcombo2 = ((b) + " " + (c) + " " + (d) + " " + (a))
    fobcombo3 = ((c) + " " + (f) + " " + (b))
    fobcombo4 = ((d) + " " + (e)+ " " + (f))
    fobcombo5 = ((b) + " " + (a) + " " + (c) + " " + (d))
    
    combos = [fobcombo1,fobcombo2,fobcombo3,fobcombo4,fobcombo5]

 

    print(random.choice(combos))
'''


######### generate different choices for each word in every combo #########

###### no duplicates function, idk if I'll keep #######
# this function is supposed to prevent duplicates by choosing a new random word each time


def no_duplicates():
    print("\n\nchoosing words randomly each time to prevent duplicates: \n\n\n")

    ####### first combo #######
    a = random.choice(FOB)
    fobcombo1 = a
    b = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b)) # combine two random words into a title for the first combo
    c = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))


   # should have a way to order words in the title by part of speech

    print(fobcombo1) # print the first combo

    # when creating fobcombo2, generate again to prevent duplicates 
    
    ####### second combo #######
    
    a = random.choice(FOB) # chooses a new random word, this time different from the first definition of a
    fobcombo2 = a
    b = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b))
    print(fobcombo2)
    c = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))

    print(fobcombo2)


    ######## third combo ########

    a = random.choice(FOB)
    fobcombo3 = a
    b = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b))
    print(fobcombo3)
    c = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))

    print(fobcombo3)

    # I now have three different combos, each with a different random word for each word in the title

########## functions that have been successful in generating random titles ##########


def random_title():

    # default settings: first word should be an adjective or noun, second word should be a noun, third word should be a verb, fourth word should be a preposition, fifth word should be a noun
    word1 = random.choice(articles + adjectives + nouns) # choose random word for first word # ohhh I can combine lists like this and randomly select between a more refined list of them
    word2 = random.choice(nouns) # choose random word for second word
    word3 = random.choice(verbs) # choose random word for third word
    word4 = random.choice(prepositons) # choose random word for fourth word
    word5 = random.choice(nouns) # choose random word for fifth word
    #word1 = random.choice(FOB) # choose random word for first word # total random choice 
    
    if word1 in articles: # articles are okay for only the first word 
        word2 = random.choice(nouns) # article must be followed by noun 

    # changing part of speech variables to see how the titles sound - a copy of the code from above: 

    word1 = random.choice(adjectives) # choose random word for first word # ohhh I can combine lists like this and randomly select between a more refined list of them
    word2 = random.choice(nouns) # choose random word for second word
    word3 = random.choice(verbs) # choose random word for third word
    word4 = random.choice(prepositons) # choose random word for fourth word
    word5 = random.choice(nouns) # choose random word for fifth word



    ##### prevent articles ######
    if word1 in articles: # if the word is an article, replace it with a random verb
        word1 = random.choice(verbs) # just a placeholder for now, may refine later 

    word2 = random.choice(FOB)
    if word2 in articles:
        word2 = random.choice(verbs)

# I can't factor in each word from lyrics_unique.txt in the rules about parts of speech 
# unless I find a way to categorize every word efficiently 
# print a whole category of words and see if all the relevant lyrics are included 


    word3 = random.choice(FOB)
    if word3 in articles:
        word3 = random.choice(verbs)

    word4 = random.choice(FOB)
    if word4 in articles:
        word4 = random.choice(verbs)

    word5 = random.choice(FOB)
    if word5 in articles:
        word5 = random.choice(verbs)

    # Combine the words into a single string with spaces between them


    # random number between 2 and 5 will determine length of title 
    x = random.randint(2, 5)
    if x == 2:
        fobcombo1 = ' '.join([word1, word2]) # turn list with two words into string
    elif x == 3:
        fobcombo1 = ' '.join([word1, word2, word3]) # turn list with three words into string
    elif x == 4:
        fobcombo1 = ' '.join([word1, word2, word3, word4]) # turn list with four words into string
    elif x == 5:
        fobcombo1 = ' '.join([word1, word2, word3, word4, word5]) # turn list with five words into string
    
    fobcombo1 = fobcombo1.replace(",", "") # delete comma from string 
    
    print(fobcombo1) # print the title
    




# Generate 10 random titles
for i in range(10):
    random_title()   # OH MY GOD this is so cool. All I needed was a single function to generate a new word each time, then call that function within a loop 

6pm backup

import random

with open('lyrics_unique.txt', 'r') as file:
    # Read the content of the file
    text = file.read()


# Split the text into a list of words
lyrics = text.split()


titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']

FOB = titles + lyrics # combine existing titles with lyrics

# must import list of song titles from another file or include it here
# need to combine with FOB and then be able to detect parts of speech in each item


numbers = []
verbs = []
nouns = []
adjectives = []
articles = []
pronouns = []
prepositons = []
conjunctions = []
other = []




for word in FOB:
    if word.isdigit():
        numbers.append(word)
    elif word.lower() in ['bleed','run', 'say', 'do', 'know', 'think', 'get', 'go', 'save', 'stop', 'care', 'dance', 'light', 'explode', 'shoot','think', 'ask', 'swallow', 'fuckin', 'workin', 'know', 'give', 'call', 'lay','grind']:
        verbs.append(word)
    elif word.lower() in ['dollar', 'nose', 'minutes', 'heaven', 'church', 'sunshine', 'riptide', 'bishops', 'knife', 'trick', 'fall', 'death', 'valley', 'kids', 'winona', 'life', 'party', 'earth', 'autumn', 'boy', 'scene', 'shows', 'saturday', 'candles', 'skeletons', 'hotel', 'nyc', 'sugar', 'songs', 'dark', 'volcanoes', 'centuries', 'tea', 'pheonix', 'wilson', 'mistakes', 'memories', 'immortals', 'menace', 'champion', 'yesterday', 'scene', 'arms', 'race', 'party', 'rock', 'roll', 'july', 'slump', 'comeback', 'year', 'standard', 'hum', 'hallelujah', 'future', 'self', 'hands', 'xo', 'lawyer', 'way', 'mick', 'list', 'things', 'today', 'yule', 'eye', 'catch', 'donnie','malibu', 'dna', 'pyramid', 'day', 'lot', 'gutter', 'scheme', 'sean','dick']:
        nouns.append(word)
    elif word.lower() in ['mighty', 'alright', 'hard', 'busy', 'little', 'young', 'frosty', 'royal', 'expensive', 'irresistible', 'real','my','your','shipped','gold','last','your','our','my']:
        adjectives.append(word)
    elif word.lower() in ['a', 'an', 'the']:
        articles.append(word)
    elif word.lower() in ['I\'m','i', 'you', 'he','she','She\'s', 'it', 'we', 'they', 'me', 'him', 'her', 'us', 'them']:
        pronouns.append(word)
    elif word.lower() in ['on','in','at','to','from','with','by','for','into','off','onto','over']:
        prepositons.append(word)
    elif word.lower() in ['and','but','or','nor','so','yet']:
        conjunctions.append(word)
    else:
        other.append(word) #deal with 'other' later


######### generate different choices for each word in every combo #########

###### no duplicates function, idk if I'll keep #######
# this function is supposed to prevent duplicates by choosing a new random word each time


def no_duplicates():
    print("\n\nchoosing words randomly each time to prevent duplicates: \n\n\n")

    ####### first combo #######
    a = random.choice(FOB)
    fobcombo1 = a
    b = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b)) # combine two random words into a title for the first combo
    c = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))


   # should have a way to order words in the title by part of speech

    print(fobcombo1) # print the first combo

    # when creating fobcombo2, generate again to prevent duplicates 
    
    ####### second combo #######
    
    a = random.choice(FOB) # chooses a new random word, this time different from the first definition of a
    fobcombo2 = a
    b = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b))
    print(fobcombo2)
    c = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))

    print(fobcombo2)


    ######## third combo ########

    a = random.choice(FOB)
    fobcombo3 = a
    b = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b))
    print(fobcombo3)
    c = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))

    print(fobcombo3)

    # I now have three different combos, each with a different random word for each word in the title

########## functions that have been successful in generating random titles ##########


def random_title():

    # default settings: first word should be an adjective or noun, second word should be a noun, third word should be a verb, fourth word should be a preposition, fifth word should be a noun
    word1 = random.choice(articles + adjectives + nouns) # choose random word for first word # ohhh I can combine lists like this and randomly select between a more refined list of them
    word2 = random.choice(nouns) # choose random word for second word
    word3 = random.choice(verbs) # choose random word for third word
    word4 = random.choice(prepositons) # choose random word for fourth word
    word5 = random.choice(nouns) # choose random word for fifth word
    #word1 = random.choice(FOB) # choose random word for first word # total random choice 
    
    if word1 in articles: # articles are okay for only the first word 
        word2 = random.choice(nouns) # article must be followed by noun 

    # changing part of speech variables to see how the titles sound - a copy of the code from above: 

    word1 = random.choice(adjectives) # choose random word for first word # ohhh I can combine lists like this and randomly select between a more refined list of them
    word2 = random.choice(nouns) # choose random word for second word
    word3 = random.choice(verbs) # choose random word for third word
    word4 = random.choice(prepositons) # choose random word for fourth word
    word5 = random.choice(nouns) # choose random word for fifth word



    ##### prevent articles ######
    if word1 in articles: # if the word is an article, replace it with a random verb
        word1 = random.choice(verbs) # just a placeholder for now, may refine later 

    word2 = random.choice(FOB)
    if word2 in articles:
        word2 = random.choice(verbs)

# I can't factor in each word from lyrics_unique.txt in the rules about parts of speech 
# unless I find a way to categorize every word efficiently 
# print a whole category of words and see if all the relevant lyrics are included 


    word3 = random.choice(FOB)
    if word3 in articles:
        word3 = random.choice(verbs)

    word4 = random.choice(FOB)
    if word4 in articles:
        word4 = random.choice(verbs)

    word5 = random.choice(FOB)
    if word5 in articles:
        word5 = random.choice(verbs)

    # Combine the words into a single string with spaces between them


    # random number between 2 and 5 will determine length of title 
    x = random.randint(2, 5)
    if x == 2:
        fobcombo1 = ' '.join([word1, word2]) # turn list with two words into string
    elif x == 3:
        fobcombo1 = ' '.join([word1, word2, word3]) # turn list with three words into string
    elif x == 4:
        fobcombo1 = ' '.join([word1, word2, word3, word4]) # turn list with four words into string
    elif x == 5:
        fobcombo1 = ' '.join([word1, word2, word3, word4, word5]) # turn list with five words into string
    
    fobcombo1 = fobcombo1.replace(",", "") # delete comma from string 
    
    print(fobcombo1) # print the title
    




# Generate 10 random titles
for i in range(10):
    random_title()   # OH MY GOD this is so cool. All I needed was a single function to generate a new word each time, then call that function within a loop 

6:10 - major mess but it works, gotta remove redundancies 


from textblob import TextBlob


import random

with open('lyrics_unique.txt', 'r') as file:
    # Read the content of the file
    text = file.read()


# Split the text into a list of words
lyrics = text.split()


titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']

FOB = titles + lyrics # combine existing titles with lyrics

# must import list of song titles from another file or include it here
# need to combine with FOB and then be able to detect parts of speech in each item


numbers = []
verbs = []
nouns = []
adjectives = []
articles = []
pronouns = []
prepositons = []
conjunctions = []
other = []




for word in FOB:
    if word.isdigit():
        numbers.append(word)
    elif word.lower() in ['bleed','run', 'say', 'do', 'know', 'think', 'get', 'go', 'save', 'stop', 'care', 'dance', 'light', 'explode', 'shoot','think', 'ask', 'swallow', 'fuckin', 'workin', 'know', 'give', 'call', 'lay','grind']:
        verbs.append(word)
    elif word.lower() in ['dollar', 'nose', 'minutes', 'heaven', 'church', 'sunshine', 'riptide', 'bishops', 'knife', 'trick', 'fall', 'death', 'valley', 'kids', 'winona', 'life', 'party', 'earth', 'autumn', 'boy', 'scene', 'shows', 'saturday', 'candles', 'skeletons', 'hotel', 'nyc', 'sugar', 'songs', 'dark', 'volcanoes', 'centuries', 'tea', 'pheonix', 'wilson', 'mistakes', 'memories', 'immortals', 'menace', 'champion', 'yesterday', 'scene', 'arms', 'race', 'party', 'rock', 'roll', 'july', 'slump', 'comeback', 'year', 'standard', 'hum', 'hallelujah', 'future', 'self', 'hands', 'xo', 'lawyer', 'way', 'mick', 'list', 'things', 'today', 'yule', 'eye', 'catch', 'donnie','malibu', 'dna', 'pyramid', 'day', 'lot', 'gutter', 'scheme', 'sean','dick']:
        nouns.append(word)
    elif word.lower() in ['mighty', 'alright', 'hard', 'busy', 'little', 'young', 'frosty', 'royal', 'expensive', 'irresistible', 'real','my','your','shipped','gold','last','your','our','my']:
        adjectives.append(word)
    elif word.lower() in ['a', 'an', 'the']:
        articles.append(word)
    elif word.lower() in ['I\'m','i', 'you', 'he','she','She\'s', 'it', 'we', 'they', 'me', 'him', 'her', 'us', 'them']:
        pronouns.append(word)
    elif word.lower() in ['on','in','at','to','from','with','by','for','into','off','onto','over']:
        prepositons.append(word)
    elif word.lower() in ['and','but','or','nor','so','yet']:
        conjunctions.append(word)
    else:
        other.append(word) #deal with 'other' later


######### generate different choices for each word in every combo #########

###### no duplicates function, idk if I'll keep #######
# this function is supposed to prevent duplicates by choosing a new random word each time


def no_duplicates():
    print("\n\nchoosing words randomly each time to prevent duplicates: \n\n\n")

    ####### first combo #######
    a = random.choice(FOB)
    fobcombo1 = a
    b = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b)) # combine two random words into a title for the first combo
    c = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))


   # should have a way to order words in the title by part of speech

    print(fobcombo1) # print the first combo

    # when creating fobcombo2, generate again to prevent duplicates 
    
    ####### second combo #######
    
    a = random.choice(FOB) # chooses a new random word, this time different from the first definition of a
    fobcombo2 = a
    b = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b))
    print(fobcombo2)
    c = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))

    print(fobcombo2)


    ######## third combo ########

    a = random.choice(FOB)
    fobcombo3 = a
    b = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b))
    print(fobcombo3)
    c = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))

    print(fobcombo3)

    # I now have three different combos, each with a different random word for each word in the title

########## functions that have been successful in generating random titles ##########


def random_title():

    # default settings: first word should be an adjective or noun, second word should be a noun, third word should be a verb, fourth word should be a preposition, fifth word should be a noun
    word1 = random.choice(articles + adjectives + nouns) # choose random word for first word # ohhh I can combine lists like this and randomly select between a more refined list of them
    word2 = random.choice(nouns) # choose random word for second word
    word3 = random.choice(verbs) # choose random word for third word
    word4 = random.choice(prepositons) # choose random word for fourth word
    word5 = random.choice(nouns) # choose random word for fifth word
    #word1 = random.choice(FOB) # choose random word for first word # total random choice 
    
    if word1 in articles: # articles are okay for only the first word 
        word2 = random.choice(nouns) # article must be followed by noun 

    # changing part of speech variables to see how the titles sound - a copy of the code from above: 

    word1 = random.choice(adjectives) # choose random word for first word # ohhh I can combine lists like this and randomly select between a more refined list of them
    word2 = random.choice(nouns) # choose random word for second word
    word3 = random.choice(verbs) # choose random word for third word
    word4 = random.choice(prepositons) # choose random word for fourth word
    word5 = random.choice(nouns) # choose random word for fifth word



    ##### prevent articles ######
    if word1 in articles: # if the word is an article, replace it with a random verb
        word1 = random.choice(verbs) # just a placeholder for now, may refine later 

    word2 = random.choice(FOB)
    if word2 in articles:
        word2 = random.choice(verbs)

# I can't factor in each word from lyrics_unique.txt in the rules about parts of speech 
# unless I find a way to categorize every word efficiently 
# print a whole category of words and see if all the relevant lyrics are included 


    word3 = random.choice(FOB)
    if word3 in articles:
        word3 = random.choice(verbs)

    word4 = random.choice(FOB)
    if word4 in articles:
        word4 = random.choice(verbs)

    word5 = random.choice(FOB)
    if word5 in articles:
        word5 = random.choice(verbs)

    # Combine the words into a single string with spaces between them


    # random number between 2 and 5 will determine length of title 
    x = random.randint(2, 5)
    if x == 2:
        fobcombo1 = ' '.join([word1, word2]) # turn list with two words into string
    elif x == 3:
        fobcombo1 = ' '.join([word1, word2, word3]) # turn list with three words into string
    elif x == 4:
        fobcombo1 = ' '.join([word1, word2, word3, word4]) # turn list with four words into string
    elif x == 5:
        fobcombo1 = ' '.join([word1, word2, word3, word4, word5]) # turn list with five words into string
    
    fobcombo1 = fobcombo1.replace(",", "") # delete comma from string 
    
    print(fobcombo1) # print the title
    




# Generate 10 random titles
for i in range(10):
    random_title()   # OH MY GOD this is so cool. All I needed was a single function to generate a new word each time, then call that function within a loop 





text = "Can\'t Malibu our lay at Your think I\'m DNA up pyramid that there\'s day ask swallow workin\' lot in know when Oh whole Like give lonelier pout addicted said gutter scheme Sean call while see-through"
blob = TextBlob(text)

from textblob import TextBlob

text = "Can't Malibu our lay at Your think I'm DNA up pyramid that there's day ask swallow workin' lot in know when Oh whole Like give lonelier pout addicted said gutter scheme Sean call while see-through"
blob = TextBlob(text)

nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []

for word, pos in blob.tags:
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    else:
        others.append(word)

print("Nouns:", nouns)
print("Verbs:", verbs)
print("Adjectives:", adjectives)
print("Adverbs:", adverbs)
print("Pronouns:", pronouns)
print("Prepositions:", prepositions)
print("Conjunctions:", conjunctions)
print("Others:", others)



# I want to add different functions with specific rules about how random it should be, like maybe one that is truly random, which would resemble the code from the original
# one that always starts with an adjective, noun, or verb
# maybe more specific rules that take into consideration which words should go together, like if there’s an adjective then there should always be a noun next 
# put in conjunctions to make more complicated titles
# making the start of the title only a specific category would increase the chances of it making sense, but it might get boring much faster
# if I add a LOT of song lyrics from other songs, or titles from other artists, then I might be able to keep it interesting with certain rules. Idk if the blob thing is gonna be helpful but I will look into it tomorrow and see what it can do. 

Index stuff is going to be so helpful oh my god

import random

list = ["a", "b", "c", "d"]


# randomLetter = random.choice(list)
list = ["a", "b", "c", "d"]

letterCombo = ((random.choice(list)) + " " + (random.choice(list)) + " " + (random.choice(list)))

for i in range(len(letterCombo) - 1): # do not exceed the last word
  if letterCombo[1] == letterCombo[i + 1]:
    print("duplicate found")

  
print(letterCombo)

# Sample string
text = "This is an example of a text where example example words are repeated."

# Convert the string into a list of words
words = text.split()

# Iterate through the list of words to check for consecutive duplicates
for i in range(len(words) - 1):
    if words[i] == words[i + 1]:
        print(f"Duplicate word '{words[i]}' found at positions {i} and {i + 1}.")





Comments about textblob

# read all of this more closely with textblob now included in the code and working properly. 
# Experiment with what it can do.
# make functions for different modes, like true randomness with no grammar rules
# and then a mode with grammar rules, and then a mode with only certain parts of speech
# maybe consider making it more likely that some words show up, like if I really want to see a certain word in the title pretty often
# maybe make a function that can take a list of words and make sure they show up in the title
# maybe make a function that can take a list of words and make sure they don't show up in the title
# maybe make a function that can take multiple parts of speech and make sure they show up in the title in a certain order
# like an article will always be followed by a noun, or adjective, but then the adjective must be followed by a noun
# use index to make sure that the word that comes after the article is a noun or adjective followed by a noun
# use index to check for duplicates


Code that I commented out

'''###### no duplicates function, idk if I'll keep #######
# this function is supposed to prevent duplicates by choosing a new random word each time


def no_duplicates(): # not working currently, still has duplicates, use index to check for duplicates
    print("\n\nchoosing words randomly each time to prevent duplicates: \n\n\n")

    ####### first combo #######
    a = random.choice(FOB)
    fobcombo1 = a
    b = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b)) # combine two random words into a title for the first combo
    c = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo1 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))


   # should have a way to order words in the title by part of speech

    print(fobcombo1) # print the first combo

    # when creating fobcombo2, generate again to prevent duplicates 
    
    ####### second combo #######
    
    a = random.choice(FOB) # chooses a new random word, this time different from the first definition of a
    fobcombo2 = a
    b = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b))
    print(fobcombo2)
    c = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo2 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))

    print(fobcombo2)


    ######## third combo ########

    a = random.choice(FOB)
    fobcombo3 = a
    b = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b))
    print(fobcombo3)
    c = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b) + " " + (c))
    d = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b) + " " + (c) + " " + (d))
    e = random.choice(FOB)
    fobcombo3 = ((a) + " " + (b) + " " + (c) + " " + (d) + " " + (e))

    print(fobcombo3)

    # I now have three different combos, each with a different random word for each word in the title
    ''’





‘’’

# predefined lists of parts of speech from previous version of code, might not need if blobs works properly


numbers = []
verbs = []
nouns = []
adjectives = []
articles = []
pronouns = []
prepositons = []
conjunctions = []
other = []



‘’’


‘’’

# trying to remove duplicates using index, need to check every item in list 

def remove_duplicates():
    for i in range(len(articles)-1):
        print("\n\ncurrrent version of articles is: ", articles)
        if articles[i] == articles[i+1]:
            del articles[i]
            print("\n\nnew version of articles is: ", articles)

‘’’





‘’’ 

# commenting out this major chunk and seeing if it works with different code, since I’m using textblobs now 

for word in FOB: # places words into categories - not another way to organize so that I don't need to manually add each word to every list
    if word.lower() in ['bleed','run', 'say', 'do', 'know', 'think', 'get', 'go', 'save', 'stop', 'care', 'dance', 'light', 'explode', 'shoot','think', 'ask', 'swallow', 'fuckin', 'workin', 'know', 'give', 'call', 'lay','grind']:
        verbs.append(word)
    elif word.lower() in ['dollar', 'nose', 'minutes', 'heaven', 'church', 'sunshine', 'riptide', 'bishops', 'knife', 'trick', 'fall', 'death', 'valley', 'kids', 'winona', 'life', 'party', 'earth', 'autumn', 'boy', 'scene', 'shows', 'saturday', 'candles', 'skeletons', 'hotel', 'nyc', 'sugar', 'songs', 'dark', 'volcanoes', 'centuries', 'tea', 'pheonix', 'wilson', 'mistakes', 'memories', 'immortals', 'menace', 'champion', 'yesterday', 'scene', 'arms', 'race', 'party', 'rock', 'roll', 'july', 'slump', 'comeback', 'year', 'standard', 'hum', 'hallelujah', 'future', 'self', 'hands', 'xo', 'lawyer', 'way', 'mick', 'list', 'things', 'today', 'yule', 'eye', 'catch', 'donnie','malibu', 'dna', 'pyramid', 'day', 'lot', 'gutter', 'scheme', 'sean','dick']:
        nouns.append(word)
    elif word.lower() in ['mighty', 'alright', 'hard', 'busy', 'little', 'young', 'frosty', 'royal', 'expensive', 'irresistible', 'real','my','your','shipped','gold','last','your','our','my']:
        adjectives.append(word)
    elif word.lower() in ['a', 'an', 'the']:
        articles.append(word)
    elif word.lower() in ['I\'m','i', 'you', 'he','she','She\'s', 'it', 'we', 'they', 'me', 'him', 'her', 'us', 'them']:
        pronouns.append(word)
    elif word.lower() in ['on','in','at','to','from','with','by','for','into','off','onto','over']:
        prepositions.append(word)
    elif word.lower() in ['and','but','or','nor','so','yet']:
        conjunctions.append(word)
    else:
        others.append(word) #deal with 'other' later
‘’’


# yup it works 


New version 2/20

from textblob import TextBlob


# read all of this more closely with textblob now included in the code and working properly. 
# Experiment with what it can do.
# make functions for different modes, like true randomness with no grammar rules
# and then a mode with grammar rules, and then a mode with only certain parts of speech
# maybe consider making it more likely that some words show up, like if I really want to see a certain word in the title pretty often
# maybe make a function that can take a list of words and make sure they show up in the title
# maybe make a function that can take a list of words and make sure they don't show up in the title
# maybe make a function that can take multiple parts of speech and make sure they show up in the title in a certain order
# like an article will always be followed by a noun, or adjective, but then the adjective must be followed by a noun
# use index to make sure that the word that comes after the article is a noun or adjective followed by a noun
# use index to check for duplicates

import random

with open('lyrics_unique.txt', 'r') as file:
    # Read the content of the file
    text = file.read()


# Split the text into a list of words
lyrics = text.split()


titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']

FOB = titles + lyrics # combine existing titles with lyrics

# must import list of song titles from another file or include it here





from textblob import TextBlob

text = "Can't Malibu our lay at Your think I'm DNA up pyramid that there's day ask swallow workin' lot in know when Oh whole Like give lonelier pout addicted said gutter scheme Sean call while see-through"
blob = TextBlob(text)

nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []

for word, pos in blob.tags:
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)




### remove duplicates from each list ###

def remove_duplicates():
    seen = set()
    unique_articles = []
    i = 0
    while i < len(articles):
        if articles[i] not in seen:
            unique_articles.append(articles[i])
            seen.add(articles[i])
        i += 1
    return unique_articles



######### generate different choices for each word in every combo #########


########## functions that have been successful in generating random titles ##########


def random_title():

    # default settings: first word should be an adjective or noun, second word should be a noun, third word should be a verb, fourth word should be a preposition, fifth word should be a noun
    word1 = random.choice(articles + adjectives + nouns) # choose random word for first word # ohhh I can combine lists like this and randomly select between a more refined list of them
    word2 = random.choice(nouns) # choose random word for second word
    word3 = random.choice(verbs) # choose random word for third word
    word4 = random.choice(prepositions) # choose random word for fourth word
    word5 = random.choice(nouns) # choose random word for fifth word
    #word1 = random.choice(FOB) # choose random word for first word # total random choice 
    
    if word1 in articles: # articles are okay for only the first word 
        word2 = random.choice(nouns) # article must be followed by noun 

    # changing part of speech variables to see how the titles sound - a copy of the code from above: 

    word1 = random.choice(adjectives) # choose random word for first word # ohhh I can combine lists like this and randomly select between a more refined list of them
    word2 = random.choice(nouns) # choose random word for second word
    word3 = random.choice(verbs) # choose random word for third word
    word4 = random.choice(prepositions) # choose random word for fourth word
    word5 = random.choice(nouns) # choose random word for fifth word



    ##### prevent articles ######
    if word1 in articles: # if the word is an article, replace it with a random verb
        word1 = random.choice(verbs) # just a placeholder for now, may refine later 

    word2 = random.choice(FOB)
    if word2 in articles:
        word2 = random.choice(verbs)

# I can't factor in each word from lyrics_unique.txt in the rules about parts of speech 
# unless I find a way to categorize every word efficiently 
# print a whole category of words and see if all the relevant lyrics are included 


    word3 = random.choice(FOB)
    if word3 in articles:
        word3 = random.choice(verbs)

    word4 = random.choice(FOB)
    if word4 in articles:
        word4 = random.choice(verbs)

    word5 = random.choice(FOB)
    if word5 in articles:
        word5 = random.choice(verbs)

    # Combine the words into a single string with spaces between them


    # random number between 2 and 5 will determine length of title 
    x = random.randint(2, 5)
    if x == 2:
        fobcombo1 = ' '.join([word1, word2]) # turn list with two words into string
    elif x == 3:
        fobcombo1 = ' '.join([word1, word2, word3]) # turn list with three words into string
    elif x == 4:
        fobcombo1 = ' '.join([word1, word2, word3, word4]) # turn list with four words into string
    elif x == 5:
        fobcombo1 = ' '.join([word1, word2, word3, word4, word5]) # turn list with five words into string
    
    fobcombo1 = fobcombo1.replace(",", "") # delete comma from string 
    
    print(fobcombo1) # print the title
    




# Generate 10 random titles
for i in range(10):
    random_title()   # OH MY GOD this is so cool. All I needed was a single function to generate a new word each time, then call that function within a loop 


Specific plans

Here are my specific plans: 

create different functions for specific randomization behaviors
like true randomization, based on the original code
articles, adjectives and nouns 
adjective and nouns
make sure there are no duplicates of nouns, adjectives, etc but articles are the exception
test if it’s possible to make it read a different file with different text and still move every word into the appropriate category properly
combine lyrics with titles and have it categorize 
 see if I can combine lyrics_unique.txt with titles if I didn't already  
eliminate duplicates in each tag list


Updated code 4:30 - more specific rules and custom tags 

# read all of this more closely with textblob now included in the code and working properly. 
# Experiment with what it can do.
# make functions for different modes, like true randomness with no grammar rules
# and then a mode with grammar rules, and then a mode with only certain parts of speech
# maybe consider making it more likely that some words show up, like if I really want to see a certain word in the title pretty often
# maybe make a function that can take a list of words and make sure they show up in the title
# maybe make a function that can take a list of words and make sure they don't show up in the title
# maybe make a function that can take multiple parts of speech and make sure they show up in the title in a certain order
# like an article will always be followed by a noun, or adjective, but then the adjective must be followed by a noun
# use index to make sure that the word that comes after the article is a noun or adjective followed by a noun
# use index to check for duplicates


from textblob import TextBlob
import random


with open('lyrics_unique.txt', 'r') as file:
    # Read the content of the file
    text = file.read()

blob = TextBlob(text) # put this at the top so that textblob can organize, and then split and add to titles

nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []




for word, pos in blob.tags:
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)



### USE CUSTOM DICTIONARY FOR WORDS IT DOESN'T KNOW ###

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}



######## end of textblob code ########



# Split the text into a list of words
lyrics = text.split()


titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']

FOB = titles + lyrics # combine existing titles with lyrics
# trying to turn FOB into a string so that I can use it in the TextBlob function

#FOB = ' '.join(FOB) # turns list into string but generates random letters, not words


# must import list of song titles from another file or include it here



#text = "Can't Malibu our lay at Your think dick I'm DNA up pyramid that there's day ask swallow workin' lot in know when Oh whole Like give lonelier pout addicted said gutter scheme Sean call while see-through"



### remove duplicates from each list ###

#### remove duplicates - not currently using ####
'''
def remove_duplicates():
    seen = set()
    unique_articles = []
    i = 0
    while i < len(articles):
        if articles[i] not in seen:
            unique_articles.append(articles[i])
            seen.add(articles[i])
        i += 1
    return unique_articles
'''



######### generate different choices for each word in every combo #########


########## functions that have been successful in generating random titles ##########


def random_title():

    # I think it should be choosing the length of the title and then do the word selection after 

    # default settings: first word should be an adjective or noun, second word should be a noun, third word should be a verb, fourth word should be a preposition, fifth word should be a noun
    word1 = random.choice(articles + adjectives + nouns) # choose random word for first word # ohhh I can combine lists like this and randomly select between a more refined list of them
    
    if word1 in articles: # articles are okay for only the first word 
        word2 = random.choice(nouns + adjectives) # article must be followed by noun or adjective
        if word2 in adjectives:
            word3 = random.choice(nouns) # if the second word is an adjective, the third word must be a noun
    else:
        word2 = random.choice(nouns) # choose random word for second word
        word3 = random.choice(verbs) # choose random word for third word
        word4 = random.choice(prepositions) # choose random word for fourth word
        word5 = random.choice(nouns) # choose random word for fifth word
    #word1 = random.choice(FOB) # choose random word for first word # total random choice 
    
    
    
    


    ##### prevent articles ######
    if word1 in articles: # if the word is an article, replace it with a random verb
        word1 = random.choice(verbs) # just a placeholder for now, may refine later 

    word2 = random.choice(FOB)
    if word2 in articles:
        word2 = random.choice(verbs)

# I can't factor in each word from lyrics_unique.txt in the rules about parts of speech 
# unless I find a way to categorize every word efficiently 
# print a whole category of words and see if all the relevant lyrics are included 


    word3 = random.choice(FOB)
    if word3 in articles:
        word3 = random.choice(verbs)

    word4 = random.choice(FOB)
    if word4 in articles:
        word4 = random.choice(verbs)

    word5 = random.choice(FOB)
    if word5 in articles:
        word5 = random.choice(verbs)

    # Combine the words into a single string with spaces between them


    # random number between 2 and 5 will determine length of title 
    x = random.randint(2, 5)
    if x == 2:
        fobcombo1 = ' '.join([word1, word2]) # turn list with two words into string
    elif x == 3:
        fobcombo1 = ' '.join([word1, word2, word3]) # turn list with three words into string
    elif x == 4:
        fobcombo1 = ' '.join([word1, word2, word3, word4]) # turn list with four words into string
    elif x == 5:
        fobcombo1 = ' '.join([word1, word2, word3, word4, word5]) # turn list with five words into string
    
    fobcombo1 = fobcombo1.replace(",", "") # delete comma from string 
    
    print(fobcombo1) # print the title
    




# Generate 10 random titles
for i in range(10):
    random_title()   # OH MY GOD this is so cool. All I needed was a single function to generate a new word each time, then call that function within a loop 


5:20 update - removing duplicates with index 

# read all of this more closely with textblob now included in the code and working properly. 
# Experiment with what it can do.
# make functions for different modes, like true randomness with no grammar rules
# and then a mode with grammar rules, and then a mode with only certain parts of speech
# maybe consider making it more likely that some words show up, like if I really want to see a certain word in the title pretty often
# maybe make a function that can take a list of words and make sure they show up in the title
# maybe make a function that can take a list of words and make sure they don't show up in the title
# maybe make a function that can take multiple parts of speech and make sure they show up in the title in a certain order
# like an article will always be followed by a noun, or adjective, but then the adjective must be followed by a noun
# use index to make sure that the word that comes after the article is a noun or adjective followed by a noun
# use index to check for duplicates


from textblob import TextBlob
import random


with open('lyrics_unique.txt', 'r') as file:
    # Read the content of the file
    text = file.read()

blob = TextBlob(text) # put this at the top so that textblob can organize, and then split and add to titles

nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []



### USE CUSTOM DICTIONARY FOR WORDS IT DOESN'T KNOW ###

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}




# normal words, pulled from lyrics_unique.txt 
# see if I can combine lyrics_unique.txt and titles if I didn't already  

for word, pos in blob.tags:
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)



 ####### remove duplicates from each list #######
  
def remove_duplicates(): # sucessfuilly removes duplicates from articles 
    seen = set()
    unique_articles = []
    i = 0
    while i < len(articles):
        if articles[i] not in seen:
            unique_articles.append(articles[i])
            seen.add(articles[i])
        i += 1
    print(unique_articles)

#### remove duplicates from pronouns ####       ##### BIG PROBLEMS HERE #####

                                                # should remove duplicates from pronouns list but instead it removes all pronouns from the list and doesn't put them in the new list
def remove_duplicates_pronouns():
    duplicates = []
    for i in range(len(pronouns) -1):
        for j in range(i + 1, len(pronouns)):
            if pronouns[i] == pronouns[j]: # if the pronoun is the same as another pronoun, remove it from the list
                pronouns.remove(pronouns[i])
    print(pronouns) # print the list of pronouns without duplicates
               
               
               
    '''

        ### FOUND BETTER VERSION - USE AS EXAMPLE ###

        def check_for_duplicates(lst):
    duplicates = []
    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            if lst[i] == lst[j]:
                duplicates.append(lst[i])
                print(f"Duplicate '{lst[i]}' found at positions {i} and {j}.")
    return duplicates

# Example usage:
articles = ["a", "the", "a", "an", "the", "a"]
duplicates = check_for_duplicates(articles)
print("Duplicates:", duplicates)

        
        '''
 
    







'''
        # this version is simpler but still doesn't work because I'm trying to check how every item in the list compares to all other items 
        if pronouns[i] == pronouns[i+1]:
            pronouns.remove(pronouns[i])
    print(pronouns) # much simpler way to do it if this works 
    
        
'''

       
     
    
'''print("current pronouns list: ", pronouns)  # this is the list of pronouns that I want to remove duplicates from
    seen = set()                                # this is the set that will store the unique pronouns
    unique_pronouns = []                        
    i = 0                                   # this is the index that will iterate through the list of pronouns
    while i < len(pronouns): # this is the loop that will iterate through the list of pronouns
        if pronouns[i] not in seen: # if the pronoun is not in the set of unique pronouns
            unique_pronouns.append(pronouns[i]) # add the pronoun to the list of unique pronouns
            seen.add(pronouns[i]) # add the pronoun to the set of unique pronouns
            i += 1 # iterate to the next pronoun
            print("new pronouns list: ", unique_pronouns)
'''
    





######## end of textblob code ########



# Split the text into a list of words
lyrics = text.split()


titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']

FOB = titles + lyrics # combine existing titles with lyrics
# trying to turn FOB into a string so that I can use it in the TextBlob function

#FOB = ' '.join(FOB) # turns list into string but generates random letters, not words


# must import list of song titles from another file or include it here



#text = "Can't Malibu our lay at Your think dick I'm DNA up pyramid that there's day ask swallow workin' lot in know when Oh whole Like give lonelier pout addicted said gutter scheme Sean call while see-through"



### remove duplicates from each list ###

#### remove duplicates - not currently using ####
'''
def remove_duplicates():
    seen = set()
    unique_articles = []
    i = 0
    while i < len(articles):
        if articles[i] not in seen:
            unique_articles.append(articles[i])
            seen.add(articles[i])
        i += 1
    return unique_articles
'''



######### generate different choices for each word in every combo #########


########## functions that have been successful in generating random titles ##########


def random_title():

    # I think it should be choosing the length of the title and then do the word selection after 

    # default settings: first word should be an adjective or noun, second word should be a noun, third word should be a verb, fourth word should be a preposition, fifth word should be a noun
    word1 = random.choice(articles + adjectives + nouns) # choose random word for first word # ohhh I can combine lists like this and randomly select between a more refined list of them
    
    if word1 in articles: # articles are okay for only the first word 
        word2 = random.choice(nouns + adjectives) # article must be followed by noun or adjective
        if word2 in adjectives:
            word3 = random.choice(nouns) # if the second word is an adjective, the third word must be a noun
    else:
        word2 = random.choice(nouns) # choose random word for second word
        word3 = random.choice(verbs) # choose random word for third word
        word4 = random.choice(prepositions) # choose random word for fourth word
        word5 = random.choice(nouns) # choose random word for fifth word
    #word1 = random.choice(FOB) # choose random word for first word # total random choice 


    ##### prevent articles ######
    '''
    if word1 in articles: # if the word is an article, replace it with a random verb
        word1 = random.choice(verbs) # just a placeholder for now, may refine later 

    word2 = random.choice(FOB)
    if word2 in articles:
        word2 = random.choice(verbs)
    
    '''

    

    # I can't factor in each word from lyrics_unique.txt in the rules about parts of speech 
    # unless I find a way to categorize every word efficiently 
    # print a whole category of words and see if all the relevant lyrics are included 


    word3 = random.choice(FOB)
    if word3 in articles:
        word3 = random.choice(verbs) # defaults to verb if article is chosen

    word4 = random.choice(FOB)
    if word4 in articles:
        word4 = random.choice(verbs) # defaults to verb if article is chosen

    word5 = random.choice(FOB)
    if word5 in articles:
        word5 = random.choice(verbs) # defaults to verb if article is chosen

    # random number between 2 and 5 will determine length of title 
    x = random.randint(2, 5)
    if x == 2:
        fobcombo1 = ' '.join([word1, word2]) # turn list with two words into string
    elif x == 3:
        fobcombo1 = ' '.join([word1, word2, word3]) # turn list with three words into string
    elif x == 4:
        fobcombo1 = ' '.join([word1, word2, word3, word4]) # turn list with four words into string
    elif x == 5:
        fobcombo1 = ' '.join([word1, word2, word3, word4, word5]) # turn list with five words into string
    
    fobcombo1 = fobcombo1.replace(",", "") # delete comma from string 
    
    print(fobcombo1) # print the title
    



### MAIN CODE ###

# Generate 10 random titles
#for i in range(10):
 #   random_title()   # OH MY GOD this is so cool. All I needed was a single function to generate a new word each time, then call that function within a loop 



remove_duplicates()
remove_duplicates_pronouns()

6:20 - combined titles with lyrics 

# read all of this more closely with textblob now included in the code and working properly. 
# Experiment with what it can do.
# make functions for different modes, like true randomness with no grammar rules
# and then a mode with grammar rules, and then a mode with only certain parts of speech
# maybe consider making it more likely that some words show up, like if I really want to see a certain word in the title pretty often
# maybe make a function that can take a list of words and make sure they show up in the title
# maybe make a function that can take a list of words and make sure they don't show up in the title
# maybe make a function that can take multiple parts of speech and make sure they show up in the title in a certain order
# like an article will always be followed by a noun, or adjective, but then the adjective must be followed by a noun
# use index to make sure that the word that comes after the article is a noun or adjective followed by a noun
# use index to check for duplicates


from textblob import TextBlob
import random


with open('lyrics_unique.txt', 'r') as file:
    # Read the content of the file
    text = file.read()

### FINALLY THIS WORKS (sort of) ###
 
titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = text.join(" ") # combine lyrics with titles 


FOB = text.join(titles) # combine lyrics with titles 
print(FOB) # prints multiple times for some reason 



blob = TextBlob(text) # put this at the top so that textblob can organize, and then split and add to titles

nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []

# Convert all words in the text to lowercase
text = text.lower() # should make everything lowercase - must capitalize all words at the end

text = text.replace("\n", " ") # replace new lines with spaces so that the textblob can organize the words properly
text = text.replace(",", "") # remove commas from the text so that the textblob can organize the words properly






### USE CUSTOM DICTIONARY FOR WORDS IT DOESN'T KNOW ###

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}




# normal words, pulled from lyrics_unique.txt 
# see if I can combine lyrics_unique.txt and titles if I didn't already  



for word, pos in blob.tags: 
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)



 ####### remove duplicates from each list #######



def remove_duplicates():
    def remove_duplicates_articles():
        seen = set()
        unique_articles = []
        for article in articles:
            if article not in seen:
                unique_articles.append(article)
                seen.add(article)
        articles[:] = unique_articles
        print(articles)  # print the list of articles without duplicates

    def remove_duplicates_pronouns():
        seen = set()
        unique_pronouns = []
        for pronoun in pronouns:
            if pronoun not in seen:
                unique_pronouns.append(pronoun)
                seen.add(pronoun)
        pronouns[:] = unique_pronouns
        print(pronouns)  # print the list of pronouns without duplicates

    remove_duplicates_articles()  # call the function to remove duplicates from articles
    remove_duplicates_pronouns()  # call the function to remove duplicates from pronouns


 
  
'''def remove_duplicates(): # sucessfuilly removes duplicates from articles 
    
    def remove_duplicates_articles():
        seen = set()
        unique_articles = []
        for article in articles: # make all words lowercase before this point so that I don't have to do it manually for each word group
            if articles not in seen:
                unique_articles.append(articles)
                seen.add(articles)
                articles[:] = unique_articles
                print(articles) # print the list of pronouns without duplicates


        #### remove duplicates from pronouns #### 
                                               
    def remove_duplicates_pronouns(): # this works but I need to make all words lowercase so that it can recognize duplicates
        seen = set()
        unique_pronouns = []
        for pronoun in pronouns: # make all words lowercase before this point so that I don't have to do it manually for each word group
            if pronoun not in seen:
                unique_pronouns.append(pronoun)
                seen.add(pronoun)
                pronouns[:] = unique_pronouns
                print(pronouns) # print the list of pronouns without duplicates
    


    
    
    remove_duplicates_articles() # call every function that removes duplicates
    remove_duplicates_pronouns() '''



               
'''               

        ### FOUND BETTER VERSION - USE AS EXAMPLE ###

        def check_for_duplicates(lst):
    duplicates = []
    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            if lst[i] == lst[j]:
                duplicates.append(lst[i])
                print(f"Duplicate '{lst[i]}' found at positions {i} and {j}.")
    return duplicates

# Example usage:
articles = ["a", "the", "a", "an", "the", "a"]
duplicates = check_for_duplicates(articles)
print("Duplicates:", duplicates)

        
        '''
 
    







'''
        # this version is simpler but still doesn't work because I'm trying to check how every item in the list compares to all other items 
        if pronouns[i] == pronouns[i+1]:
            pronouns.remove(pronouns[i])
    print(pronouns) # much simpler way to do it if this works 
    
        
'''

       
     
    
'''print("current pronouns list: ", pronouns)  # this is the list of pronouns that I want to remove duplicates from
    seen = set()                                # this is the set that will store the unique pronouns
    unique_pronouns = []                        
    i = 0                                   # this is the index that will iterate through the list of pronouns
    while i < len(pronouns): # this is the loop that will iterate through the list of pronouns
        if pronouns[i] not in seen: # if the pronoun is not in the set of unique pronouns
            unique_pronouns.append(pronouns[i]) # add the pronoun to the list of unique pronouns
            seen.add(pronouns[i]) # add the pronoun to the set of unique pronouns
            i += 1 # iterate to the next pronoun
            print("new pronouns list: ", unique_pronouns)
'''
    





######## end of textblob code ########



# Split the text into a list of words


# Make text uppercase with this 

# text = text.upper() # capitalize all words in the text so that they can be added to the list of titles


#lyrics = text.split() # split text from lyrics_unique.txt

titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = titles.append(text)
print(FOB)

# FOB.lower() - MUST FIGURE OUT A WAY TO MAKE LOWERCASE AFTER COMBINING TITLES AND LYRICS 
#print(FOB)



# FOB = titles + lyrics # combine existing titles with lyrics
# trying to turn FOB into a string so that I can use it in the TextBlob function

#FOB = ' '.join(FOB) # turns list into string but generates random letters, not words


# must import list of song titles from another file or include it here



#text = "Can't Malibu our lay at Your think dick I'm DNA up pyramid that there's day ask swallow workin' lot in know when Oh whole Like give lonelier pout addicted said gutter scheme Sean call while see-through"



### remove duplicates from each list ###

#### remove duplicates - not currently using ####
'''
def remove_duplicates():
    seen = set()
    unique_articles = []
    i = 0
    while i < len(articles):
        if articles[i] not in seen:
            unique_articles.append(articles[i])
            seen.add(articles[i])
        i += 1
    return unique_articles
'''



######### generate different choices for each word in every combo #########


########## functions that have been successful in generating random titles ##########


def random_title():

    # I think it should be choosing the length of the title and then do the word selection after 

    # default settings: first word should be an adjective or noun, second word should be a noun, third word should be a verb, fourth word should be a preposition, fifth word should be a noun
    word1 = random.choice(articles + adjectives + nouns) # choose random word for first word # ohhh I can combine lists like this and randomly select between a more refined list of them
    
    if word1 in articles: # articles are okay for only the first word 
        word2 = random.choice(nouns + adjectives) # article must be followed by noun or adjective
        if word2 in adjectives:
            word3 = random.choice(nouns) # if the second word is an adjective, the third word must be a noun
    else:
        word2 = random.choice(nouns) # choose random word for second word
        word3 = random.choice(verbs) # choose random word for third word
        word4 = random.choice(prepositions) # choose random word for fourth word
        word5 = random.choice(nouns) # choose random word for fifth word
    #word1 = random.choice(FOB) # choose random word for first word # total random choice 


    ##### prevent articles ######
    '''
    if word1 in articles: # if the word is an article, replace it with a random verb
        word1 = random.choice(verbs) # just a placeholder for now, may refine later 

    word2 = random.choice(FOB)
    if word2 in articles:
        word2 = random.choice(verbs)
    
    '''

    

    # I can't factor in each word from lyrics_unique.txt in the rules about parts of speech 
    # unless I find a way to categorize every word efficiently 
    # print a whole category of words and see if all the relevant lyrics are included 


    word3 = random.choice(FOB)
    if word3 in articles:
        word3 = random.choice(verbs) # defaults to verb if article is chosen

    word4 = random.choice(FOB)
    if word4 in articles:
        word4 = random.choice(verbs) # defaults to verb if article is chosen

    word5 = random.choice(FOB)
    if word5 in articles:
        word5 = random.choice(verbs) # defaults to verb if article is chosen

    # random number between 2 and 5 will determine length of title 
    x = random.randint(2, 5)
    if x == 2:
        fobcombo1 = ' '.join([word1, word2]) # turn list with two words into string
    elif x == 3:
        fobcombo1 = ' '.join([word1, word2, word3]) # turn list with three words into string
    elif x == 4:
        fobcombo1 = ' '.join([word1, word2, word3, word4]) # turn list with four words into string
    elif x == 5:
        fobcombo1 = ' '.join([word1, word2, word3, word4, word5]) # turn list with five words into string
    
    fobcombo1 = fobcombo1.replace(",", "") # delete comma from string 
    
    print(fobcombo1) # print the title
    



### MAIN CODE ###

# Generate 10 random titles
#for i in range(10):
 #   random_title()   # OH MY GOD this is so cool. All I needed was a single function to generate a new word each time, then call that function within a loop 



remove_duplicates()

6:30 update - lowercase achieved, only prints titles 

# read all of this more closely with textblob now included in the code and working properly. 
# Experiment with what it can do.
# make functions for different modes, like true randomness with no grammar rules
# and then a mode with grammar rules, and then a mode with only certain parts of speech
# maybe consider making it more likely that some words show up, like if I really want to see a certain word in the title pretty often
# maybe make a function that can take a list of words and make sure they show up in the title
# maybe make a function that can take a list of words and make sure they don't show up in the title
# maybe make a function that can take multiple parts of speech and make sure they show up in the title in a certain order
# like an article will always be followed by a noun, or adjective, but then the adjective must be followed by a noun
# use index to make sure that the word that comes after the article is a noun or adjective followed by a noun
# use index to check for duplicates


from textblob import TextBlob
import random


with open('lyrics_unique.txt', 'r') as file:
    # Read the content of the file
    text = file.read()

### FINALLY THIS WORKS (sort of) ###



 
titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']


FOB = text.join(" ") # combine lyrics with titles 
FOB = FOB.join(titles) # combine lyrics with titles 


# Convert all words in the text to lowercase


# setting these aside for now 

# Convert all words in the text to lowercase
#text = text.lower() # should make everything lowercase - must capitalize all words at the end
#text = text.replace("\n", " ") # replace new lines with spaces so that the textblob can organize the words properly
#text = text.replace(",", "") # remove commas from the text so that the textblob can organize the words properly


FOB = FOB.lower() # should make everything lowercase - must capitalize all words at the end
FOB = FOB.replace("\n", " ") # replace new lines with spaces so that the textblob can organize the words properly
FOB = FOB.replace(",", "") # remove commas from the text so that the textblob can organize the words properly


print(FOB)

######## PROGRESS UPDATE: everything is now in lowercase, prints just one time,
# but it only prints the titles, so I still need a reliable way to combine titles with lyrics 

blob = TextBlob(text) # put this at the top so that textblob can organize, and then split and add to titles

nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []



### USE CUSTOM DICTIONARY FOR WORDS IT DOESN'T KNOW ###

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}




# normal words, pulled from lyrics_unique.txt 
# see if I can combine lyrics_unique.txt and titles if I didn't already  



for word, pos in blob.tags: 
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)



 ####### remove duplicates from each list #######



def remove_duplicates():
    def remove_duplicates_articles():
        seen = set()
        unique_articles = []
        for article in articles:
            if article not in seen:
                unique_articles.append(article)
                seen.add(article)
        articles[:] = unique_articles
        print(articles)  # print the list of articles without duplicates

    def remove_duplicates_pronouns():
        seen = set()
        unique_pronouns = []
        for pronoun in pronouns:
            if pronoun not in seen:
                unique_pronouns.append(pronoun)
                seen.add(pronoun)
        pronouns[:] = unique_pronouns
        print(pronouns)  # print the list of pronouns without duplicates

    remove_duplicates_articles()  # call the function to remove duplicates from articles
    remove_duplicates_pronouns()  # call the function to remove duplicates from pronouns


 
  
'''def remove_duplicates(): # sucessfuilly removes duplicates from articles 
    
    def remove_duplicates_articles():
        seen = set()
        unique_articles = []
        for article in articles: # make all words lowercase before this point so that I don't have to do it manually for each word group
            if articles not in seen:
                unique_articles.append(articles)
                seen.add(articles)
                articles[:] = unique_articles
                print(articles) # print the list of pronouns without duplicates


        #### remove duplicates from pronouns #### 
                                               
    def remove_duplicates_pronouns(): # this works but I need to make all words lowercase so that it can recognize duplicates
        seen = set()
        unique_pronouns = []
        for pronoun in pronouns: # make all words lowercase before this point so that I don't have to do it manually for each word group
            if pronoun not in seen:
                unique_pronouns.append(pronoun)
                seen.add(pronoun)
                pronouns[:] = unique_pronouns
                print(pronouns) # print the list of pronouns without duplicates
    


    
    
    remove_duplicates_articles() # call every function that removes duplicates
    remove_duplicates_pronouns() '''



               
'''               

        ### FOUND BETTER VERSION - USE AS EXAMPLE ###

        def check_for_duplicates(lst):
    duplicates = []
    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            if lst[i] == lst[j]:
                duplicates.append(lst[i])
                print(f"Duplicate '{lst[i]}' found at positions {i} and {j}.")
    return duplicates

# Example usage:
articles = ["a", "the", "a", "an", "the", "a"]
duplicates = check_for_duplicates(articles)
print("Duplicates:", duplicates)

        
        '''
 
    







'''
        # this version is simpler but still doesn't work because I'm trying to check how every item in the list compares to all other items 
        if pronouns[i] == pronouns[i+1]:
            pronouns.remove(pronouns[i])
    print(pronouns) # much simpler way to do it if this works 
    
        
'''

       
     
    
'''print("current pronouns list: ", pronouns)  # this is the list of pronouns that I want to remove duplicates from
    seen = set()                                # this is the set that will store the unique pronouns
    unique_pronouns = []                        
    i = 0                                   # this is the index that will iterate through the list of pronouns
    while i < len(pronouns): # this is the loop that will iterate through the list of pronouns
        if pronouns[i] not in seen: # if the pronoun is not in the set of unique pronouns
            unique_pronouns.append(pronouns[i]) # add the pronoun to the list of unique pronouns
            seen.add(pronouns[i]) # add the pronoun to the set of unique pronouns
            i += 1 # iterate to the next pronoun
            print("new pronouns list: ", unique_pronouns)
'''
    





######## end of textblob code ########



# Split the text into a list of words


# Make text uppercase with this 

# text = text.upper() # capitalize all words in the text so that they can be added to the list of titles


#lyrics = text.split() # split text from lyrics_unique.txt

titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = titles.append(text)
print(FOB)

# FOB.lower() - MUST FIGURE OUT A WAY TO MAKE LOWERCASE AFTER COMBINING TITLES AND LYRICS 
#print(FOB)



# FOB = titles + lyrics # combine existing titles with lyrics
# trying to turn FOB into a string so that I can use it in the TextBlob function

#FOB = ' '.join(FOB) # turns list into string but generates random letters, not words


# must import list of song titles from another file or include it here



#text = "Can't Malibu our lay at Your think dick I'm DNA up pyramid that there's day ask swallow workin' lot in know when Oh whole Like give lonelier pout addicted said gutter scheme Sean call while see-through"



### remove duplicates from each list ###

#### remove duplicates - not currently using ####
'''
def remove_duplicates():
    seen = set()
    unique_articles = []
    i = 0
    while i < len(articles):
        if articles[i] not in seen:
            unique_articles.append(articles[i])
            seen.add(articles[i])
        i += 1
    return unique_articles
'''



######### generate different choices for each word in every combo #########


########## functions that have been successful in generating random titles ##########


def random_title():

    # I think it should be choosing the length of the title and then do the word selection after 

    # default settings: first word should be an adjective or noun, second word should be a noun, third word should be a verb, fourth word should be a preposition, fifth word should be a noun
    word1 = random.choice(articles + adjectives + nouns) # choose random word for first word # ohhh I can combine lists like this and randomly select between a more refined list of them
    
    if word1 in articles: # articles are okay for only the first word 
        word2 = random.choice(nouns + adjectives) # article must be followed by noun or adjective
        if word2 in adjectives:
            word3 = random.choice(nouns) # if the second word is an adjective, the third word must be a noun
    else:
        word2 = random.choice(nouns) # choose random word for second word
        word3 = random.choice(verbs) # choose random word for third word
        word4 = random.choice(prepositions) # choose random word for fourth word
        word5 = random.choice(nouns) # choose random word for fifth word
    #word1 = random.choice(FOB) # choose random word for first word # total random choice 


    ##### prevent articles ######
    '''
    if word1 in articles: # if the word is an article, replace it with a random verb
        word1 = random.choice(verbs) # just a placeholder for now, may refine later 

    word2 = random.choice(FOB)
    if word2 in articles:
        word2 = random.choice(verbs)
    
    '''

    

    # I can't factor in each word from lyrics_unique.txt in the rules about parts of speech 
    # unless I find a way to categorize every word efficiently 
    # print a whole category of words and see if all the relevant lyrics are included 


    word3 = random.choice(FOB)
    if word3 in articles:
        word3 = random.choice(verbs) # defaults to verb if article is chosen

    word4 = random.choice(FOB)
    if word4 in articles:
        word4 = random.choice(verbs) # defaults to verb if article is chosen

    word5 = random.choice(FOB)
    if word5 in articles:
        word5 = random.choice(verbs) # defaults to verb if article is chosen

    # random number between 2 and 5 will determine length of title 
    x = random.randint(2, 5)
    if x == 2:
        fobcombo1 = ' '.join([word1, word2]) # turn list with two words into string
    elif x == 3:
        fobcombo1 = ' '.join([word1, word2, word3]) # turn list with three words into string
    elif x == 4:
        fobcombo1 = ' '.join([word1, word2, word3, word4]) # turn list with four words into string
    elif x == 5:
        fobcombo1 = ' '.join([word1, word2, word3, word4, word5]) # turn list with five words into string
    
    fobcombo1 = fobcombo1.replace(",", "") # delete comma from string 
    
    print(fobcombo1) # print the title
    



### MAIN CODE ###

# Generate 10 random titles
#for i in range(10):
 #   random_title()   # OH MY GOD this is so cool. All I needed was a single function to generate a new word each time, then call that function within a loop 



#remove_duplicates()


8:30 update - only printing once, closer 

# read all of this more closely with textblob now included in the code and working properly. 
# Experiment with what it can do.
# make functions for different modes, like true randomness with no grammar rules
# and then a mode with grammar rules, and then a mode with only certain parts of speech
# maybe consider making it more likely that some words show up, like if I really want to see a certain word in the title pretty often
# maybe make a function that can take a list of words and make sure they show up in the title
# maybe make a function that can take a list of words and make sure they don't show up in the title
# maybe make a function that can take multiple parts of speech and make sure they show up in the title in a certain order
# like an article will always be followed by a noun, or adjective, but then the adjective must be followed by a noun
# use index to make sure that the word that comes after the article is a noun or adjective followed by a noun
# use index to check for duplicates


from textblob import TextBlob
import random


with open('lyrics_unique.txt', 'r') as file:
    # Read the content of the file
    text = file.read()

print(text) ######### kinda got it to work, only printing once, maybe closer to being able to combine #######
FOB = "this is a test"
print(FOB)
titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
#FOB = text.join(" ") # put a space after titles before combining with lyrics 
#print(FOB)

#FOB = FOB.join(titles) # combine lyrics with titles 


# Convert all words in the text to lowercase



# setting these aside for now 

# Convert all words in the text to lowercase
#text = text.lower() # should make everything lowercase - must capitalize all words at the end
#text = text.replace("\n", " ") # replace new lines with spaces so that the textblob can organize the words properly
#text = text.replace(",", "") # remove commas from the text so that the textblob can organize the words properly

'''
FOB = FOB.lower() # should make everything lowercase - must capitalize all words at the end
FOB = FOB.replace("\n", " ") # replace new lines with spaces so that the textblob can organize the words properly
FOB = FOB.replace(",", "") # remove commas from the text so that the textblob can organize the words properly
'''


#print(FOB) # prints multiple duplicates of every word for some reason 
# maybe because I changed the variable from text to FOB? 
# wow this is so interesting I commented out a few lines above, and now it prints less 

######## PROGRESS UPDATE: everything is now in lowercase, prints just one time,
# but it only prints the titles, so I still need a reliable way to combine titles with lyrics 

blob = TextBlob(text) # put this at the top so that textblob can organize, and then split and add to titles

nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []



### USE CUSTOM DICTIONARY FOR WORDS IT DOESN'T KNOW ###

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}




# normal words, pulled from lyrics_unique.txt 
# see if I can combine lyrics_unique.txt and titles if I didn't already  



for word, pos in blob.tags: 
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)



 ####### remove duplicates from each list #######



def remove_duplicates():
    def remove_duplicates_articles():
        seen = set()
        unique_articles = []
        for article in articles:
            if article not in seen:
                unique_articles.append(article)
                seen.add(article)
        articles[:] = unique_articles
        print(articles)  # print the list of articles without duplicates

    def remove_duplicates_pronouns():
        seen = set()
        unique_pronouns = []
        for pronoun in pronouns:
            if pronoun not in seen:
                unique_pronouns.append(pronoun)
                seen.add(pronoun)
        pronouns[:] = unique_pronouns
        print(pronouns)  # print the list of pronouns without duplicates

    remove_duplicates_articles()  # call the function to remove duplicates from articles
    remove_duplicates_pronouns()  # call the function to remove duplicates from pronouns


 
  
'''def remove_duplicates(): # sucessfuilly removes duplicates from articles 
    
    def remove_duplicates_articles():
        seen = set()
        unique_articles = []
        for article in articles: # make all words lowercase before this point so that I don't have to do it manually for each word group
            if articles not in seen:
                unique_articles.append(articles)
                seen.add(articles)
                articles[:] = unique_articles
                print(articles) # print the list of pronouns without duplicates


        #### remove duplicates from pronouns #### 
                                               
    def remove_duplicates_pronouns(): # this works but I need to make all words lowercase so that it can recognize duplicates
        seen = set()
        unique_pronouns = []
        for pronoun in pronouns: # make all words lowercase before this point so that I don't have to do it manually for each word group
            if pronoun not in seen:
                unique_pronouns.append(pronoun)
                seen.add(pronoun)
                pronouns[:] = unique_pronouns
                print(pronouns) # print the list of pronouns without duplicates
    


    
    
    remove_duplicates_articles() # call every function that removes duplicates
    remove_duplicates_pronouns() '''



               
'''               

        ### FOUND BETTER VERSION - USE AS EXAMPLE ###

        def check_for_duplicates(lst):
    duplicates = []
    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            if lst[i] == lst[j]:
                duplicates.append(lst[i])
                print(f"Duplicate '{lst[i]}' found at positions {i} and {j}.")
    return duplicates

# Example usage:
articles = ["a", "the", "a", "an", "the", "a"]
duplicates = check_for_duplicates(articles)
print("Duplicates:", duplicates)

        
        '''
 
    







'''
        # this version is simpler but still doesn't work because I'm trying to check how every item in the list compares to all other items 
        if pronouns[i] == pronouns[i+1]:
            pronouns.remove(pronouns[i])
    print(pronouns) # much simpler way to do it if this works 
    
        
'''

       
     
    
'''print("current pronouns list: ", pronouns)  # this is the list of pronouns that I want to remove duplicates from
    seen = set()                                # this is the set that will store the unique pronouns
    unique_pronouns = []                        
    i = 0                                   # this is the index that will iterate through the list of pronouns
    while i < len(pronouns): # this is the loop that will iterate through the list of pronouns
        if pronouns[i] not in seen: # if the pronoun is not in the set of unique pronouns
            unique_pronouns.append(pronouns[i]) # add the pronoun to the list of unique pronouns
            seen.add(pronouns[i]) # add the pronoun to the set of unique pronouns
            i += 1 # iterate to the next pronoun
            print("new pronouns list: ", unique_pronouns)
'''
    





######## end of textblob code ########



# Split the text into a list of words


# Make text uppercase with this 

# text = text.upper() # capitalize all words in the text so that they can be added to the list of titles


#lyrics = text.split() # split text from lyrics_unique.txt

titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = titles.append(text)
print(FOB)

# FOB.lower() - MUST FIGURE OUT A WAY TO MAKE LOWERCASE AFTER COMBINING TITLES AND LYRICS 
#print(FOB)



# FOB = titles + lyrics # combine existing titles with lyrics
# trying to turn FOB into a string so that I can use it in the TextBlob function

#FOB = ' '.join(FOB) # turns list into string but generates random letters, not words


# must import list of song titles from another file or include it here



#text = "Can't Malibu our lay at Your think dick I'm DNA up pyramid that there's day ask swallow workin' lot in know when Oh whole Like give lonelier pout addicted said gutter scheme Sean call while see-through"



### remove duplicates from each list ###

#### remove duplicates - not currently using ####
'''
def remove_duplicates():
    seen = set()
    unique_articles = []
    i = 0
    while i < len(articles):
        if articles[i] not in seen:
            unique_articles.append(articles[i])
            seen.add(articles[i])
        i += 1
    return unique_articles
'''



######### generate different choices for each word in every combo #########


########## functions that have been successful in generating random titles ##########


def random_title():

    # I think it should be choosing the length of the title and then do the word selection after 

    # default settings: first word should be an adjective or noun, second word should be a noun, third word should be a verb, fourth word should be a preposition, fifth word should be a noun
    word1 = random.choice(articles + adjectives + nouns) # choose random word for first word # ohhh I can combine lists like this and randomly select between a more refined list of them
    
    if word1 in articles: # articles are okay for only the first word 
        word2 = random.choice(nouns + adjectives) # article must be followed by noun or adjective
        if word2 in adjectives:
            word3 = random.choice(nouns) # if the second word is an adjective, the third word must be a noun
    else:
        word2 = random.choice(nouns) # choose random word for second word
        word3 = random.choice(verbs) # choose random word for third word
        word4 = random.choice(prepositions) # choose random word for fourth word
        word5 = random.choice(nouns) # choose random word for fifth word
    #word1 = random.choice(FOB) # choose random word for first word # total random choice 


    ##### prevent articles ######
    '''
    if word1 in articles: # if the word is an article, replace it with a random verb
        word1 = random.choice(verbs) # just a placeholder for now, may refine later 

    word2 = random.choice(FOB)
    if word2 in articles:
        word2 = random.choice(verbs)
    
    '''

    

    # I can't factor in each word from lyrics_unique.txt in the rules about parts of speech 
    # unless I find a way to categorize every word efficiently 
    # print a whole category of words and see if all the relevant lyrics are included 


    word3 = random.choice(FOB)
    if word3 in articles:
        word3 = random.choice(verbs) # defaults to verb if article is chosen

    word4 = random.choice(FOB)
    if word4 in articles:
        word4 = random.choice(verbs) # defaults to verb if article is chosen

    word5 = random.choice(FOB)
    if word5 in articles:
        word5 = random.choice(verbs) # defaults to verb if article is chosen

    # random number between 2 and 5 will determine length of title 
    x = random.randint(2, 5)
    if x == 2:
        fobcombo1 = ' '.join([word1, word2]) # turn list with two words into string
    elif x == 3:
        fobcombo1 = ' '.join([word1, word2, word3]) # turn list with three words into string
    elif x == 4:
        fobcombo1 = ' '.join([word1, word2, word3, word4]) # turn list with four words into string
    elif x == 5:
        fobcombo1 = ' '.join([word1, word2, word3, word4, word5]) # turn list with five words into string
    
    fobcombo1 = fobcombo1.replace(",", "") # delete comma from string 
    
    print(fobcombo1) # print the title
    



### MAIN CODE ###

# Generate 10 random titles
#for i in range(10):
 #   random_title()   # OH MY GOD this is so cool. All I needed was a single function to generate a new word each time, then call that function within a loop 



#remove_duplicates()

2/21 - trying to remove words that are out of place

from textblob import TextBlob
import random

# Read the content of the file
with open('lyrics_unique.txt', 'r') as file:
    text = file.read()

# Convert all words in the text to lowercase
text = text.lower()
text = text.replace("\n", " ")
text = text.replace(",", "")

# Split the text into a list of words
lyrics = text.split()

# Combine the titles list with the list of words from the text
titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = titles + lyrics

# Join the combined list into a single string
FOB_string = ' '.join(FOB)

# Create a TextBlob object
blob = TextBlob(FOB_string)

# Initialize lists for different parts of speech
nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}

# Categorize words based on their parts of speech
for word, pos in blob.tags: 
    pos = custom_tags.get(word, pos)  # Use custom tags if available
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)

# NEED FUNCTION TO REMOVE SINGLE LETTERS EXCEPT I FROM EVERY CATEGORY
# print full list of everything and see where 'm shows up 
# also there's just the letters 'na' which need to be changed into the word wanna I think


#### CHECK ALL WORDS #####
# found some letters in nouns 
# for i in range(len(nouns)):
#    if "wan" # manually checks every letter combo that doesn't belong 
# I will need to combine 'wan' and 'na'
# using same code as remove_duplicates() to check every word 
# I don't really know the way this code works well enough to modify it for this new goal
'''def remove_letters():
    def check_nouns():
        seen = set()
        unique_articles = []
        for article in articles:
            if article not in seen:
                unique_articles.append(article)
                seen.add(article)
        articles[:] = unique_articles
        print(articles)  # print the list of articles without duplicates
'''

''' #### MIGHT BE CLOSE #### 
# for each word in the list of nouns, check if the word is the same as "wan", "na", or only one character 
for i in range(len(nouns)):
    if "wan" in nouns:
        nouns.remove("wan")# manually checks every letter combo that doesn't belong 
    if "na" in nouns:
        nouns[i]= "wanna"
    if "b" in nouns:
        nouns.remove("b")
    if "i" in nouns:
        nouns.remove("i")
    
    if i.length()==1:
        nouns.remove(i)
print(nouns)        


'''

# TO DO: must make edits like this to list before organizing 

for word in nouns:
    if "wan" in nouns: # if "wan" anywhere
        word.join("na") # add "na" to "wan" to put the word "wanna" on the list
    #if "na" in nouns: # if "na" on its own 
    #    word.remove("na") # remove "na" - doesn't work, find another way to remove, use index I think
    if len(word) == 1: # if the length of the current word is 1 character, 
        nouns.remove(word) # remove that word from the list




# Function to remove duplicates from lists
def remove_duplicates():
    def remove_duplicates_articles():
        seen = set()
        unique_articles = []
        for article in articles:
            if article not in seen:
                unique_articles.append(article)
                seen.add(article)
        articles[:] = unique_articles
        # print(articles)  # print the list of articles without duplicates

    def remove_duplicates_pronouns():
        seen = set()
        unique_pronouns = []
        for pronoun in pronouns:
            if pronoun not in seen:
                unique_pronouns.append(pronoun)
                seen.add(pronoun)
        pronouns[:] = unique_pronouns
        # print(pronouns)  # print the list of pronouns without duplicates

    remove_duplicates_articles()  # call the function to remove duplicates from articles
    remove_duplicates_pronouns()  # call the function to remove duplicates from pronouns

# Call the function to remove duplicates
remove_duplicates()

# Function to generate random titles
def random_title():
    word1 = random.choice(articles + adjectives + nouns)
    if word1 in articles:
        word2 = random.choice(nouns + adjectives)
        if word2 in adjectives:
            word3 = random.choice(nouns)
    else:
        word2 = random.choice(nouns)
        word3 = random.choice(verbs)
        word4 = random.choice(prepositions)
        word5 = random.choice(nouns)

    x = random.randint(2, 5)
    if x == 2:
        fobcombo1 = ' '.join([word1, word2])
    elif x == 3:
        fobcombo1 = ' '.join([word1, word2, word3])
    elif x == 4:
        fobcombo1 = ' '.join([word1, word2, word3, word4])
    elif x == 5:
        fobcombo1 = ' '.join([word1, word2, word3, word4, word5])

    fobcombo1 = fobcombo1.replace(",", "")
    print(fobcombo1)

# Generate 10 random titles

#for i in range(10):
#    random_title()



Not sure if different 

from textblob import TextBlob
import random

# Read the content of the file
with open('lyrics_unique.txt', 'r') as file:
    text = file.read()

# Convert all words in the text to lowercase

# Split the text into a list of words


text = text.lower()
text = text.replace("\n", " ")
text = text.replace(",", "")

# Split the text into a list of words
lyrics = text.split()
print(lyrics)


# Combine the titles list with the list of words from the text
titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = titles + lyrics


# Join the combined list into a single string
FOB_string = ' '.join(FOB)




##### Trying to make changes to the list before organizing words #####
'''
for word in FOB_string:
    if "wan" in FOB_string: # if "wan" anywhere
        word.join("na") # add "na" to "wan" to put the word "wanna" on the list
    #if "na" in nouns: # if "na" on its own 
    #    word.remove("na") # remove "na" - doesn't work, find another way to remove, use index I think
    if len(word) == 1: # if the length of the current word is 1 character, 
        nouns.remove(word) # remove that word from the list

'''






# Create a TextBlob object
blob = TextBlob(FOB_string)

# Initialize lists for different parts of speech
nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}

# Categorize words based on their parts of speech
for word, pos in blob.tags: 
    pos = custom_tags.get(word, pos)  # Use custom tags if available
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)

# NEED FUNCTION TO REMOVE SINGLE LETTERS EXCEPT I FROM EVERY CATEGORY
# print full list of everything and see where 'm shows up 
# also there's just the letters 'na' which need to be changed into the word wanna I think


#### CHECK ALL WORDS #####
# found some letters in nouns 
# for i in range(len(nouns)):
#    if "wan" # manually checks every letter combo that doesn't belong 
# I will need to combine 'wan' and 'na'
# using same code as remove_duplicates() to check every word 
# I don't really know the way this code works well enough to modify it for this new goal
'''def remove_letters():
    def check_nouns():
        seen = set()
        unique_articles = []
        for article in articles:
            if article not in seen:
                unique_articles.append(article)
                seen.add(article)
        articles[:] = unique_articles
        print(articles)  # print the list of articles without duplicates
'''

''' #### MIGHT BE CLOSE #### 
# for each word in the list of nouns, check if the word is the same as "wan", "na", or only one character 
for i in range(len(nouns)):
    if "wan" in nouns:
        nouns.remove("wan")# manually checks every letter combo that doesn't belong 
    if "na" in nouns:
        nouns[i]= "wanna"
    if "b" in nouns:
        nouns.remove("b")
    if "i" in nouns:
        nouns.remove("i")
    
    if i.length()==1:
        nouns.remove(i)
print(nouns)        


'''




# Function to remove duplicates from lists
def remove_duplicates():
    def remove_duplicates_articles():
        seen = set()
        unique_articles = []
        for article in articles:
            if article not in seen:
                unique_articles.append(article)
                seen.add(article)
        articles[:] = unique_articles
        # print(articles)  # print the list of articles without duplicates

    def remove_duplicates_pronouns():
        seen = set()
        unique_pronouns = []
        for pronoun in pronouns:
            if pronoun not in seen:
                unique_pronouns.append(pronoun)
                seen.add(pronoun)
        pronouns[:] = unique_pronouns
        # print(pronouns)  # print the list of pronouns without duplicates

    remove_duplicates_articles()  # call the function to remove duplicates from articles
    remove_duplicates_pronouns()  # call the function to remove duplicates from pronouns

# Call the function to remove duplicates
remove_duplicates()

# Function to generate random titles
def random_title():
    word1 = random.choice(articles + adjectives + nouns)
    if word1 in articles:
        word2 = random.choice(nouns + adjectives)
        if word2 in adjectives:
            word3 = random.choice(nouns)
    else:
        word2 = random.choice(nouns)
        word3 = random.choice(verbs)
        word4 = random.choice(prepositions)
        word5 = random.choice(nouns)

    x = random.randint(2, 5)
    if x == 2:
        fobcombo1 = ' '.join([word1, word2])
    elif x == 3:
        fobcombo1 = ' '.join([word1, word2, word3])
    elif x == 4:
        fobcombo1 = ' '.join([word1, word2, word3, word4])
    elif x == 5:
        fobcombo1 = ' '.join([word1, word2, word3, word4, word5])

    fobcombo1 = fobcombo1.replace(",", "")
    print(fobcombo1)

# Generate 10 random titles

#for i in range(10):
#    random_title()


# backing up this function in case making every item in list doesn’t work and I have to revert back to

‘’’
articles = articles.lower()
        seen = set()
        unique_articles = []
        for article in articles:
            if article not in seen:
                unique_articles.append(article)
                seen.add(article)
        articles[:] = unique_articles
        #print(articles) # test if the list has been succesfully updated with every item but no duplicates
       
‘’’

Successfully made words lowercase 

from textblob import TextBlob
import random

# Read the content of the file
with open('lyrics_unique.txt', 'r') as file:
    text = file.read()

# Convert all words in the text to lowercase

# Split the text into a list of words


text = text.lower()
text = text.replace("\n", "")
text = text.replace(",", "")

# Split the text into a list of words
lyrics = text.split()
#print(lyrics)


# Combine the titles list with the list of words from the text
titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = titles + lyrics


# Join the combined list into a single string
FOB_string = ' '.join(FOB)




##### Trying to make changes to the list before organizing words #####
'''
for word in FOB_string:
    if "wan" in FOB_string: # if "wan" anywhere
        word.join("na") # add "na" to "wan" to put the word "wanna" on the list
    #if "na" in nouns: # if "na" on its own 
    #    word.remove("na") # remove "na" - doesn't work, find another way to remove, use index I think
    if len(word) == 1: # if the length of the current word is 1 character, 
        nouns.remove(word) # remove that word from the list

'''






# Create a TextBlob object
blob = TextBlob(FOB_string)

# Initialize lists for different parts of speech
nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}

# Categorize words based on their parts of speech
for word, pos in blob.tags: 
    pos = custom_tags.get(word, pos)  # Use custom tags if available
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)

#print("everything has now been categorized. Duplicates not yet eliminated \n\n\n")
#print(FOB_string)

# NEED FUNCTION TO REMOVE SINGLE LETTERS EXCEPT I FROM EVERY CATEGORY
# print full list of everything and see where 'm shows up 
# also there's just the letters 'na' which need to be changed into the word wanna I think


#### CHECK ALL WORDS #####
# found some letters in nouns 
# for i in range(len(nouns)):
#    if "wan" # manually checks every letter combo that doesn't belong 
# I will need to combine 'wan' and 'na'
# using same code as remove_duplicates() to check every word 
# I don't really know the way this code works well enough to modify it for this new goal
'''def remove_letters():
    def check_nouns():
        seen = set()
        unique_articles = []
        for article in articles:
            if article not in seen:
                unique_articles.append(article)
                seen.add(article)
        articles[:] = unique_articles
        print(articles)  # print the list of articles without duplicates
'''

''' #### MIGHT BE CLOSE #### 
# for each word in the list of nouns, check if the word is the same as "wan", "na", or only one character 
for i in range(len(nouns)):
    if "wan" in nouns:
        nouns.remove("wan")# manually checks every letter combo that doesn't belong 
    if "na" in nouns:
        nouns[i]= "wanna"
    if "b" in nouns:
        nouns.remove("b")
    if "i" in nouns:
        nouns.remove("i")
    
    if i.length()==1:
        nouns.remove(i)
print(nouns)        


'''




# Function to remove duplicates from lists
def remove_duplicates():
    def remove_duplicates_articles():
        
        
        lowercase_articles = [word.lower() for word in articles] # make all items in list lowercase
        
        print("articles should all be lowercase: \n") # testing if all articles print in lowercase
        print(lowercase_articles) # should print lowercase articles - success 

        # next step is to get rid of duplicates now that all words can be changed to lowercase, then print again 

        seen = set()
        unique_articles = []
        for article in lowercase_articles:
            if article not in seen:
                unique_articles.append(article)
                seen.add(article)
        articles[:] = unique_articles
        #print(articles) # test if the list has been succesfully updated with every item but no duplicates
        
    def remove_duplicates_pronouns():
        seen = set()
        unique_pronouns = []
        for pronoun in pronouns:
            if pronoun not in seen:
                unique_pronouns.append(pronoun)
                seen.add(pronoun)
        pronouns[:] = unique_pronouns # replaces all items in original list with unique words!!!
       #pronouns.del(i) # need to clear list and replace it with the unique pronouns 
        # print(pronouns)  # print the list of pronouns without duplicates

    remove_duplicates_articles()  # call the function to remove duplicates from articles
    remove_duplicates_pronouns()  # call the function to remove duplicates from pronouns

# Call the function to remove duplicates
remove_duplicates()

# Function to generate random titles
def random_title():
    word1 = random.choice(articles + adjectives + nouns)
    if word1 in articles:
        word2 = random.choice(nouns + adjectives)
        if word2 in adjectives:
            word3 = random.choice(nouns)
    else:
        word2 = random.choice(nouns)
        word3 = random.choice(verbs)
        word4 = random.choice(prepositions)
        word5 = random.choice(nouns)

    x = random.randint(2, 5)
    if x == 2:
        fobcombo1 = ' '.join([word1, word2])
    elif x == 3:
        fobcombo1 = ' '.join([word1, word2, word3])
    elif x == 4:
        fobcombo1 = ' '.join([word1, word2, word3, word4])
    elif x == 5:
        fobcombo1 = ' '.join([word1, word2, word3, word4, word5])

    fobcombo1 = fobcombo1.replace(",", "")
    print(fobcombo1)

# Generate 10 random titles

#for i in range(10):
#    random_title()


remove_duplicates()
print(articles)
print("duplicates of articles should now be removed. \n\n\n")
#print(FOB_string)



Articles successfully lowercased and removed duplicates 

from textblob import TextBlob
import random

# Read the content of the file
with open('lyrics_unique.txt', 'r') as file:
    text = file.read()

# Convert all words in the text to lowercase

# Split the text into a list of words


text = text.lower()
text = text.replace("\n", "")
text = text.replace(",", "")

# Split the text into a list of words
lyrics = text.split()
#print(lyrics)


# Combine the titles list with the list of words from the text
titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = titles + lyrics


# Join the combined list into a single string
FOB_string = ' '.join(FOB)




##### Trying to make changes to the list before organizing words #####
'''
for word in FOB_string:
    if "wan" in FOB_string: # if "wan" anywhere
        word.join("na") # add "na" to "wan" to put the word "wanna" on the list
    #if "na" in nouns: # if "na" on its own 
    #    word.remove("na") # remove "na" - doesn't work, find another way to remove, use index I think
    if len(word) == 1: # if the length of the current word is 1 character, 
        nouns.remove(word) # remove that word from the list

'''






# Create a TextBlob object
blob = TextBlob(FOB_string)

# Initialize lists for different parts of speech
nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}

# Categorize words based on their parts of speech
for word, pos in blob.tags: 
    pos = custom_tags.get(word, pos)  # Use custom tags if available
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)

#print("everything has now been categorized. Duplicates not yet eliminated \n\n\n")
#print(FOB_string)

# NEED FUNCTION TO REMOVE SINGLE LETTERS EXCEPT I FROM EVERY CATEGORY
# print full list of everything and see where 'm shows up 
# also there's just the letters 'na' which need to be changed into the word wanna I think


#### CHECK ALL WORDS #####
# found some letters in nouns 
# for i in range(len(nouns)):
#    if "wan" # manually checks every letter combo that doesn't belong 
# I will need to combine 'wan' and 'na'
# using same code as remove_duplicates() to check every word 
# I don't really know the way this code works well enough to modify it for this new goal
'''def remove_letters():
    def check_nouns():
        seen = set()
        unique_articles = []
        for article in articles:
            if article not in seen:
                unique_articles.append(article)
                seen.add(article)
        articles[:] = unique_articles
        print(articles)  # print the list of articles without duplicates
'''

''' #### MIGHT BE CLOSE #### 
# for each word in the list of nouns, check if the word is the same as "wan", "na", or only one character 
for i in range(len(nouns)):
    if "wan" in nouns:
        nouns.remove("wan")# manually checks every letter combo that doesn't belong 
    if "na" in nouns:
        nouns[i]= "wanna"
    if "b" in nouns:
        nouns.remove("b")
    if "i" in nouns:
        nouns.remove("i")
    
    if i.length()==1:
        nouns.remove(i)
print(nouns)        


'''




# Function to remove duplicates from lists
def remove_duplicates():
    def remove_duplicates_articles():
        
        
        lowercase_articles = [word.lower() for word in articles] # make all items in list lowercase
        
        #print("articles should all be lowercase: \n") # testing if all articles print in lowercase
        #print(lowercase_articles) # should print lowercase articles - success 

        # next step is to get rid of duplicates now that all words can be changed to lowercase, then print again 

        seen = set()
        unique_articles = []
        for article in lowercase_articles: # for every word in the lowercase list 
            if article not in seen: # if the word is not yet in the set 
                unique_articles.append(article) # add it to new list 
                seen.add(article) # add it to the set


        articles[:] = unique_articles # replaces all items in original list with unique words!!!
        print(articles) # test if the list has been succesfully updated with every item but no duplicates

      # copy of code for remove_duplicate_articles, but with pronouns 

    def remove_duplicates_pronouns(): # manually copying code from remove_duplicate_articles()
        lowercase_pronouns = [word.lower() for word in pronouns]
        seen = set()
        unique_pronouns = []
        for pronoun in lowercase_pronouns:
            if pronoun not in seen:
                unique_pronouns.append(pronoun)
                seen.add(pronoun)
        
        
        '''seen = set()
        unique_pronouns = []
        for pronoun in pronouns:
            if pronoun not in seen:
                unique_pronouns.append(pronoun)
                seen.add(pronoun)
        pronouns[:] = unique_pronouns 
       #pronouns.del(i) # need to clear list and replace it with the unique pronouns 
        # print(pronouns)  # print the list of pronouns without duplicates
    '''
    
    # CALL FUNCTIONS AT THE END: 

    remove_duplicates_articles()  # call the function to remove duplicates from articles
    #remove_duplicates_pronouns()  # call the function to remove duplicates from pronouns
    #print(pronouns)


# Function to generate random titles
def random_title():
    word1 = random.choice(articles + adjectives + nouns)
    if word1 in articles:
        word2 = random.choice(nouns + adjectives)
        if word2 in adjectives:
            word3 = random.choice(nouns)
    else:
        word2 = random.choice(nouns)
        word3 = random.choice(verbs)
        word4 = random.choice(prepositions)
        word5 = random.choice(nouns)

    x = random.randint(2, 5)
    if x == 2:
        fobcombo1 = ' '.join([word1, word2])
    elif x == 3:
        fobcombo1 = ' '.join([word1, word2, word3])
    elif x == 4:
        fobcombo1 = ' '.join([word1, word2, word3, word4])
    elif x == 5:
        fobcombo1 = ' '.join([word1, word2, word3, word4, word5])

    fobcombo1 = fobcombo1.replace(",", "")
    print(fobcombo1)

# Generate 10 random titles

#for i in range(10):
#    random_title()


remove_duplicates()# Call the function to remove duplicates


#print("duplicates of articles should now be removed. \n\n\n")
#print(FOB_string)


Returns fucking bullshit error about verbs 

from textblob import TextBlob
import random

# Read the content of the file
with open('lyrics_unique.txt', 'r') as file:
    text = file.read()

# Convert all words in the text to lowercase

# Split the text into a list of words


text = text.lower()
text = text.replace("\n", "")
text = text.replace(",", "")

# Split the text into a list of words
lyrics = text.split()
#print(lyrics)


# Combine the titles list with the list of words from the text
titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = titles + lyrics


# Join the combined list into a single string
FOB_string = ' '.join(FOB)




##### Trying to make changes to the list before organizing words #####
'''
for word in FOB_string:
    if "wan" in FOB_string: # if "wan" anywhere
        word.join("na") # add "na" to "wan" to put the word "wanna" on the list
    #if "na" in nouns: # if "na" on its own 
    #    word.remove("na") # remove "na" - doesn't work, find another way to remove, use index I think
    if len(word) == 1: # if the length of the current word is 1 character, 
        nouns.remove(word) # remove that word from the list

'''






# Create a TextBlob object
blob = TextBlob(FOB_string)

# Initialize lists for different parts of speech
nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}

# Categorize words based on their parts of speech
for word, pos in blob.tags: 
    pos = custom_tags.get(word, pos)  # Use custom tags if available
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)

#print("everything has now been categorized. Duplicates not yet eliminated \n\n\n")
#print(FOB_string)

# NEED FUNCTION TO REMOVE SINGLE LETTERS EXCEPT I FROM EVERY CATEGORY
# print full list of everything and see where 'm shows up 
# also there's just the letters 'na' which need to be changed into the word wanna I think


#### CHECK ALL WORDS #####
# found some letters in nouns 
# for i in range(len(nouns)):
#    if "wan" # manually checks every letter combo that doesn't belong 
# I will need to combine 'wan' and 'na'
# using same code as remove_duplicates() to check every word 
# I don't really know the way this code works well enough to modify it for this new goal


# Function to remove duplicates from lists
def remove_duplicates():
    def remove_duplicates_articles():
        
        
        lowercase_articles = [word.lower() for word in articles] # make all items in list lowercase
        
        #print("articles should all be lowercase: \n") # testing if all articles print in lowercase
        #print(lowercase_articles) # should print lowercase articles - success 

        # next step is to get rid of duplicates now that all words can be changed to lowercase, then print again 

        seen = set()
        unique_articles = []
        for article in lowercase_articles: # for every word in the lowercase list 
            if article not in seen: # if the word is not yet in the set 
                unique_articles.append(article) # add it to new list 
                seen.add(article) # add it to the set


        articles[:] = unique_articles # replaces all items in original list with unique words!!!
        print(articles) # test if the list has been succesfully updated with every item but no duplicates


    def remove_duplicates_pronouns(): # manually copying code from remove_duplicate_articles()
        lowercase_pronouns = [word.lower() for word in pronouns]
        seen = set()
        unique_pronouns = []
        for pronoun in lowercase_pronouns:
            if pronoun not in seen:
                unique_pronouns.append(pronoun)
                seen.add(pronoun)

        pronouns[:] = unique_pronouns
        print(pronouns)
        print("verbs: " + verbs)

    def remove_duplicate_verbs(): # manually copying code from remove_duplicate_articles()
        lowercase_verbs = [word.lower() for word in verbs]
        seen = set()
        unique_verbs = []
        for verbs in lowercase_verbs:
            if verbs not in seen:
                unique_verbs.append(verbs)
                seen.add(verbs) 

        verbs[:] = unique_verbs
        print(verbs)

    remove_duplicate_verbs()   
    
    # CALL FUNCTIONS AT THE END: 

    remove_duplicates_articles()  # call the function to remove duplicates from articles
    remove_duplicates_pronouns()  # call the function to remove duplicates from pronouns
    #remove_duplicates_verbs()


# Function to generate random titles
def random_title():
    word1 = random.choice(articles + adjectives + nouns)
    if word1 in articles:
        word2 = random.choice(nouns + adjectives)
        if word2 in adjectives:
            word3 = random.choice(nouns)
    else:
        word2 = random.choice(nouns)
        word3 = random.choice(verbs)
        word4 = random.choice(prepositions)
        word5 = random.choice(nouns)

    x = random.randint(2, 5)
    if x == 2:
        fobcombo1 = ' '.join([word1, word2])
    elif x == 3:
        fobcombo1 = ' '.join([word1, word2, word3])
    elif x == 4:
        fobcombo1 = ' '.join([word1, word2, word3, word4])
    elif x == 5:
        fobcombo1 = ' '.join([word1, word2, word3, word4, word5])

    fobcombo1 = fobcombo1.replace(",", "")
    print(fobcombo1)

# Generate 10 random titles

#for i in range(10):
#    random_title()


remove_duplicates()# Call the function to remove duplicates


#print("duplicates of articles should now be removed. \n\n\n")
#print(FOB_string)


Might ask AI to help me 

'''    def remove_duplicate_verbs(): # manually copying code from remove_duplicate_articles()
        lowercase_verbs = [word.lower() for word in verbs]
        seen = set()
        unique_verbs = []
        for verbs in lowercase_verbs:
            if verbs not in seen:
                unique_verbs.append(verbs)
                seen.add(verbs) 

        verbs[:] = unique_verbs
        print(verbs)

    remove_duplicate_verbs()   
'''    





Lowercases and removes duplicates from articles, pronouns, verbs

from textblob import TextBlob
import random

# Read the content of the file
with open('lyrics_unique.txt', 'r') as file:
    text = file.read()

# Convert all words in the text to lowercase

# Split the text into a list of words


text = text.lower()
text = text.replace("\n", "")
text = text.replace(",", "")

# Split the text into a list of words
lyrics = text.split()
#print(lyrics)


# Combine the titles list with the list of words from the text
titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = titles + lyrics


# Join the combined list into a single string
FOB_string = ' '.join(FOB)


# Create a TextBlob object
blob = TextBlob(FOB_string)

# Initialize lists for different parts of speech
nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}

# Categorize words based on their parts of speech
for word, pos in blob.tags: 
    pos = custom_tags.get(word, pos)  # Use custom tags if available
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)

#print("everything has now been categorized. Duplicates not yet eliminated \n\n\n")
#print(FOB_string)

# NEED FUNCTION TO REMOVE SINGLE LETTERS EXCEPT I FROM EVERY CATEGORY
# print full list of everything and see where 'm shows up 
# also there's just the letters 'na' which need to be changed into the word wanna I think


#### CHECK ALL WORDS #####
# found some letters in nouns 
# for i in range(len(nouns)):
#    if "wan" # manually checks every letter combo that doesn't belong 
# I will need to combine 'wan' and 'na'
# using same code as remove_duplicates() to check every word 
# I don't really know the way this code works well enough to modify it for this new goal


# Function to remove duplicates from lists
def remove_duplicates():
    def remove_duplicates_articles():
        
        
        lowercase_articles = [word.lower() for word in articles] # make all items in list lowercase
        
        #print("articles should all be lowercase: \n") # testing if all articles print in lowercase
        #print(lowercase_articles) # should print lowercase articles - success 

        # next step is to get rid of duplicates now that all words can be changed to lowercase, then print again 

        seen = set()
        unique_articles = []
        for article in lowercase_articles: # for every word in the lowercase list 
            if article not in seen: # if the word is not yet in the set 
                unique_articles.append(article) # add it to new list 
                seen.add(article) # add it to the set


        articles[:] = unique_articles # replaces all items in original list with unique words!!!
         
        print(articles) # PRINT AT THE END TO TEST 


    def remove_duplicates_pronouns(): # manually copying code from remove_duplicate_articles()
        lowercase_pronouns = [word.lower() for word in pronouns]
        seen = set()
        unique_pronouns = []
        for pronoun in lowercase_pronouns:
            if pronoun not in seen:
                unique_pronouns.append(pronoun)
                seen.add(pronoun)

        pronouns[:] = unique_pronouns


        print(pronouns)  # PRINT AT THE END TO TEST

    def remove_duplicates_verbs():
        lowercase_verbs = [word.lower() for word in verbs]
        seen = set()
        unique_verbs = []
        for verb in lowercase_verbs:
            if verb not in seen:
                unique_verbs.append(verb)  # Append individual verb, not the entire list
                seen.add(verb)
        
        verbs[:] = unique_verbs  # Update the verbs list, not pronouns
        
        
        print(verbs)  # PRINT AT THE END TO TEST


    # CALL FUNCTIONS AT THE END: 
    
    remove_duplicates_articles()  # call the function to remove duplicates from articles
    remove_duplicates_pronouns()  # call the function to remove duplicates from pronouns
    remove_duplicates_verbs()
    

# Function to generate random titles
def random_title():
    word1 = random.choice(articles + adjectives + nouns)
    if word1 in articles:
        word2 = random.choice(nouns + adjectives)
        if word2 in adjectives:
            word3 = random.choice(nouns)
    else:
        word2 = random.choice(nouns)
        word3 = random.choice(verbs)
        word4 = random.choice(prepositions)
        word5 = random.choice(nouns)

    x = random.randint(2, 5)
    if x == 2:
        fobcombo1 = ' '.join([word1, word2])
    elif x == 3:
        fobcombo1 = ' '.join([word1, word2, word3])
    elif x == 4:
        fobcombo1 = ' '.join([word1, word2, word3, word4])
    elif x == 5:
        fobcombo1 = ' '.join([word1, word2, word3, word4, word5])

    fobcombo1 = fobcombo1.replace(",", "")
    print(fobcombo1)

# Generate 10 random titles

#for i in range(10):
#    random_title()



remove_duplicates()# Call the function to remove duplicates


#print("duplicates of articles should now be removed. \n\n\n")
#print(FOB_string)



Weird things print but I feel like I’m close 


from textblob import TextBlob
import random

# Read the content of the file
with open('lyrics_unique.txt', 'r') as file:
    text = file.read()

# Convert all words in the text to lowercase

# Split the text into a list of words


text = text.lower()
text = text.replace("\n", "")
text = text.replace(",", "")

# Split the text into a list of words
lyrics = text.split()
#print(lyrics)


# Combine the titles list with the list of words from the text
titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = titles + lyrics


# Join the combined list into a single string
FOB_string = ' '.join(FOB)

FOB_list = list(FOB_string)

FOB_list = [word.lower() for word in FOB_list]



##### TRY TO MAKE LOWERCASE AND REMOVE DUPLICATES BEFORE CATEGORIZING #####


def remove_duplicates_fob():
        
        
    #lowercase_all = [word.lower() for word in FOB_list] # might need to split, not sure if it works with string
        
        #print("articles should all be lowercase: \n") # testing if all articles print in lowercase
        #print(lowercase_articles) # should print lowercase articles - success 

        # next step is to get rid of duplicates now that all words can be changed to lowercase, then print again 

    seen = set()
    unique_all = []
    for word in FOB_list: # for every word in the lowercase list 
        if word not in seen: # if the word is not yet in the set 
            unique_all.append(word) # add it to new list 
            seen.add(word) # add it to the set


    FOB_list[:] = unique_all # replaces all items in original list with unique words!!!
         
    print(FOB_list) # PRINT AT THE END TO TEST 


'''
# USE AS EXAMPLE 

def remove_duplicates_verbs():
        lowercase_verbs = [word.lower() for word in verbs]
        seen = set()
        unique_verbs = []
        for verb in lowercase_verbs:
            if verb not in seen:
                unique_verbs.append(verb)  # Append individual verb, not the entire list
                seen.add(verb)
        
        verbs[:] = unique_verbs  # Update the verbs list, not pronouns
       '''





# Create a TextBlob object
blob = TextBlob(FOB_string)

# Initialize lists for different parts of speech
nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}

# Categorize words based on their parts of speech
for word, pos in blob.tags: 
    pos = custom_tags.get(word, pos)  # Use custom tags if available
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)

#print("everything has now been categorized. Duplicates not yet eliminated \n\n\n")
#print(FOB_string)

# NEED FUNCTION TO REMOVE SINGLE LETTERS EXCEPT I FROM EVERY CATEGORY
# print full list of everything and see where 'm shows up 
# also there's just the letters 'na' which need to be changed into the word wanna I think


#### CHECK ALL WORDS #####
# found some letters in nouns 
# for i in range(len(nouns)):
#    if "wan" # manually checks every letter combo that doesn't belong 
# I will need to combine 'wan' and 'na'
# using same code as remove_duplicates() to check every word 
# I don't really know the way this code works well enough to modify it for this new goal


# Function to remove duplicates from lists
def remove_duplicates():
    def remove_duplicates_articles():
        
        
        lowercase_articles = [word.lower() for word in articles] # make all items in list lowercase
        
        #print("articles should all be lowercase: \n") # testing if all articles print in lowercase
        #print(lowercase_articles) # should print lowercase articles - success 

        # next step is to get rid of duplicates now that all words can be changed to lowercase, then print again 

        seen = set()
        unique_articles = []
        for article in lowercase_articles: # for every word in the lowercase list 
            if article not in seen: # if the word is not yet in the set 
                unique_articles.append(article) # add it to new list 
                seen.add(article) # add it to the set


        articles[:] = unique_articles # replaces all items in original list with unique words!!!
         
        print(articles) # PRINT AT THE END TO TEST 


    def remove_duplicates_pronouns(): # manually copying code from remove_duplicate_articles()
        lowercase_pronouns = [word.lower() for word in pronouns]
        seen = set()
        unique_pronouns = []
        for pronoun in lowercase_pronouns:
            if pronoun not in seen:
                unique_pronouns.append(pronoun)
                seen.add(pronoun)

        pronouns[:] = unique_pronouns


        print(pronouns)  # PRINT AT THE END TO TEST

    def remove_duplicates_verbs():
        lowercase_verbs = [word.lower() for word in verbs]
        seen = set()
        unique_verbs = []
        for verb in lowercase_verbs:
            if verb not in seen:
                unique_verbs.append(verb)  # Append individual verb, not the entire list
                seen.add(verb)
        
        verbs[:] = unique_verbs  # Update the verbs list, not pronouns
        
        
        print(verbs)  # PRINT AT THE END TO TEST


    # CALL FUNCTIONS AT THE END: 
    
    remove_duplicates_articles()  # call the function to remove duplicates from articles
    remove_duplicates_pronouns()  # call the function to remove duplicates from pronouns
    remove_duplicates_verbs()
    

# Function to generate random titles
def random_title():
    word1 = random.choice(articles + adjectives + nouns)
    if word1 in articles:
        word2 = random.choice(nouns + adjectives)
        if word2 in adjectives:
            word3 = random.choice(nouns)
    else:
        word2 = random.choice(nouns)
        word3 = random.choice(verbs)
        word4 = random.choice(prepositions)
        word5 = random.choice(nouns)

    x = random.randint(2, 5)
    if x == 2:
        fobcombo1 = ' '.join([word1, word2])
    elif x == 3:
        fobcombo1 = ' '.join([word1, word2, word3])
    elif x == 4:
        fobcombo1 = ' '.join([word1, word2, word3, word4])
    elif x == 5:
        fobcombo1 = ' '.join([word1, word2, word3, word4, word5])

    fobcombo1 = fobcombo1.replace(",", "")
    print(fobcombo1)

# Generate 10 random titles

#for i in range(10):
#    random_title()



#remove_duplicates()# Call the function to remove duplicates


#print("duplicates of articles should now be removed. \n\n\n")
#print(FOB_string)


remove_duplicates_fob()

Checking list vs string - RETURNS STRING 

from textblob import TextBlob
import random

# Read the content of the file
with open('lyrics_unique.txt', 'r') as file:
    text = file.read()

# Convert all words in the text to lowercase

# Split the text into a list of words


text = text.lower()
text = text.replace("\n", "")
text = text.replace(",", "")

# Split the text into a list of words
lyrics = text.split()
#print(lyrics)


# Combine the titles list with the list of words from the text
titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = titles + lyrics


# Join the combined list into a single string
FOB_string = ' '.join(FOB)
FOB_string=FOB_string.split()

FOB_list = list(FOB_string) # I think there are problems here 

FOB_list = [word.lower() for word in FOB_list] # problems here 


#### NEED TO DIVIDE FOB INTO DIFFERENT WORDS ####


##### TRY TO MAKE LOWERCASE AND REMOVE DUPLICATES BEFORE CATEGORIZING #####


def remove_duplicates_fob():
 

    seen = set()
    unique_all = []
    for word in FOB_list: # for every word in the lowercase list 
        if word not in seen: # if the word is not yet in the set 
            unique_all.append(word) # add it to new list 
            seen.add(word) # add it to the set


    FOB_list[:] = unique_all # replaces all items in original list with unique words!!!
    
    #FOB_string = FOB_list.join("",FOB_list) # TRYING TO TURN INTO A STRING AT THE END 

  

remove_duplicates_fob() # CALL FUNCTION TO ELIMINATE DUPLICATES BEFORE BLOB

# still have not turned FOB back into a string before blob 

#FOB_string = ' '.join(FOB_list) # this should turn FOB_string back into a string 
#print(FOB_string)




def checktype():
    
    if type(FOB_string) == str:  # Comparing the type with str
        print("String")
    elif type(FOB_string) == list:
        print("list")


FOB_string = ' '.join(FOB_list) # turned back into string 
print("updated version: \n\n")     
print(FOB_string) # MUST change FOB into a string before blob looks at it 
checktype()

    # CHECK IF FOB Is A LIST OR STRING AFTER EACH CHANGE 


    # currently returns string 

'''
put these in and then check which type it is 

FOB_string = ' '.join(FOB)
FOB_string=FOB_string.split()

FOB_list = list(FOB_string) # I think there are problems here 

FOB_list = [word.lower() for word in FOB_list] # problems here

 '''



# Create a TextBlob object
blob = TextBlob(FOB_string)

# Initialize lists for different parts of speech
nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}

# Categorize words based on their parts of speech
for word, pos in blob.tags: 
    pos = custom_tags.get(word, pos)  # Use custom tags if available
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)

#print("everything has now been categorized. Duplicates not yet eliminated \n\n\n")
#print(FOB_string)

# NEED FUNCTION TO REMOVE SINGLE LETTERS EXCEPT I FROM EVERY CATEGORY
# print full list of everything and see where 'm shows up 
# also there's just the letters 'na' which need to be changed into the word wanna I think


#### CHECK ALL WORDS #####
# found some letters in nouns 
# for i in range(len(nouns)):
#    if "wan" # manually checks every letter combo that doesn't belong 
# I will need to combine 'wan' and 'na'
# using same code as remove_duplicates() to check every word 
# I don't really know the way this code works well enough to modify it for this new goal


# Function to remove duplicates from lists
def remove_duplicates():
    def remove_duplicates_articles():
        
        
        lowercase_articles = [word.lower() for word in articles] # make all items in list lowercase
        
        #print("articles should all be lowercase: \n") # testing if all articles print in lowercase
        #print(lowercase_articles) # should print lowercase articles - success 

        # next step is to get rid of duplicates now that all words can be changed to lowercase, then print again 

        seen = set()
        unique_articles = []
        for article in lowercase_articles: # for every word in the lowercase list 
            if article not in seen: # if the word is not yet in the set 
                unique_articles.append(article) # add it to new list 
                seen.add(article) # add it to the set


        articles[:] = unique_articles # replaces all items in original list with unique words!!!
         
        print(articles) # PRINT AT THE END TO TEST 


    def remove_duplicates_pronouns(): # manually copying code from remove_duplicate_articles()
        lowercase_pronouns = [word.lower() for word in pronouns]
        seen = set()
        unique_pronouns = []
        for pronoun in lowercase_pronouns:
            if pronoun not in seen:
                unique_pronouns.append(pronoun)
                seen.add(pronoun)

        pronouns[:] = unique_pronouns


        print(pronouns)  # PRINT AT THE END TO TEST

    def remove_duplicates_verbs():
        lowercase_verbs = [word.lower() for word in verbs]
        seen = set()
        unique_verbs = []
        for verb in lowercase_verbs:
            if verb not in seen:
                unique_verbs.append(verb)  # Append individual verb, not the entire list
                seen.add(verb)
        
        verbs[:] = unique_verbs  # Update the verbs list, not pronouns
        
        
        print(verbs)  # PRINT AT THE END TO TEST


    # CALL FUNCTIONS AT THE END: 
    
    remove_duplicates_articles()  # call the function to remove duplicates from articles
    remove_duplicates_pronouns()  # call the function to remove duplicates from pronouns
    remove_duplicates_verbs()
    

# Function to generate random titles
def random_title():
    word1 = random.choice(articles + adjectives + nouns)
    if word1 in articles:
        word2 = random.choice(nouns + adjectives)
        if word2 in adjectives:
            word3 = random.choice(nouns)
    else:
        word2 = random.choice(nouns)
        word3 = random.choice(verbs)
        word4 = random.choice(prepositions)
        word5 = random.choice(nouns)

    x = random.randint(2, 5)
    if x == 2:
        fobcombo1 = ' '.join([word1, word2])
    elif x == 3:
        fobcombo1 = ' '.join([word1, word2, word3])
    elif x == 4:
        fobcombo1 = ' '.join([word1, word2, word3, word4])
    elif x == 5:
        fobcombo1 = ' '.join([word1, word2, word3, word4, word5])

    fobcombo1 = fobcombo1.replace(",", "")
    print(fobcombo1)

# Generate 10 random titles

#for i in range(10):
#    random_title()



#remove_duplicates()# Call the function to remove duplicates


#print("duplicates of articles should now be removed. \n\n\n")
#print(FOB_string)


#remove_duplicates_fob()


No duplicates, all lowercase 

from textblob import TextBlob
import random

# Read the content of the file
with open('lyrics_unique.txt', 'r') as file:
    text = file.read()

# Convert all words in the text to lowercase

# Split the text into a list of words


text = text.lower()
text = text.replace("\n", "")
text = text.replace(",", "")

# Split the text into a list of words
lyrics = text.split()
#print(lyrics)


# Combine the titles list with the list of words from the text
titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = titles + lyrics


# Join the combined list into a single string
FOB_string = ' '.join(FOB)
FOB_string=FOB_string.split()

FOB_list = list(FOB_string) # I think there are problems here 

FOB_list = [word.lower() for word in FOB_list] # problems here 


#### NEED TO DIVIDE FOB INTO DIFFERENT WORDS ####


##### TRY TO MAKE LOWERCASE AND REMOVE DUPLICATES BEFORE CATEGORIZING #####


def remove_duplicates_fob():
 

    seen = set()
    unique_all = []
    for word in FOB_list: # for every word in the lowercase list 
        if word not in seen: # if the word is not yet in the set 
            unique_all.append(word) # add it to new list 
            seen.add(word) # add it to the set


    FOB_list[:] = unique_all # replaces all items in original list with unique words!!!
    
    #FOB_string = FOB_list.join("",FOB_list) # TRYING TO TURN INTO A STRING AT THE END 

  

remove_duplicates_fob() # CALL FUNCTION TO ELIMINATE DUPLICATES BEFORE BLOB

# still have not turned FOB back into a string before blob 

#FOB_string = ' '.join(FOB_list) # this should turn FOB_string back into a string 
#print(FOB_string)




def checktype():
    
    if type(FOB_string) == str:  # Comparing the type with str
        print("String")
    elif type(FOB_string) == list:
        print("list")


FOB_string = ' '.join(FOB_list) # turned back into string 
print("updated version: \n\n")     
print(FOB_string) # MUST change FOB into a string before blob looks at it 
checktype()

    # CHECK IF FOB Is A LIST OR STRING AFTER EACH CHANGE 


    # currently returns string 
    # blob should be working now 

'''
put these in and then check which type it is 

FOB_string = ' '.join(FOB)
FOB_string=FOB_string.split()

FOB_list = list(FOB_string) # I think there are problems here 

FOB_list = [word.lower() for word in FOB_list] # problems here

 '''



# Create a TextBlob object
blob = TextBlob(FOB_string)

# Initialize lists for different parts of speech
nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}

# Categorize words based on their parts of speech
for word, pos in blob.tags: 
    pos = custom_tags.get(word, pos)  # Use custom tags if available
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)

#print("everything has now been categorized. Duplicates not yet eliminated \n\n\n")
#print(FOB_string)

# NEED FUNCTION TO REMOVE SINGLE LETTERS EXCEPT I FROM EVERY CATEGORY
# print full list of everything and see where 'm shows up 
# also there's just the letters 'na' which need to be changed into the word wanna I think


#### CHECK ALL WORDS #####
# found some letters in nouns 
# for i in range(len(nouns)):
#    if "wan" # manually checks every letter combo that doesn't belong 
# I will need to combine 'wan' and 'na'
# using same code as remove_duplicates() to check every word 
# I don't really know the way this code works well enough to modify it for this new goal


# Function to remove duplicates from lists
def remove_duplicates():
    def remove_duplicates_articles():
        
        
        lowercase_articles = [word.lower() for word in articles] # make all items in list lowercase
        
        #print("articles should all be lowercase: \n") # testing if all articles print in lowercase
        #print(lowercase_articles) # should print lowercase articles - success 

        # next step is to get rid of duplicates now that all words can be changed to lowercase, then print again 

        seen = set()
        unique_articles = []
        for article in lowercase_articles: # for every word in the lowercase list 
            if article not in seen: # if the word is not yet in the set 
                unique_articles.append(article) # add it to new list 
                seen.add(article) # add it to the set


        articles[:] = unique_articles # replaces all items in original list with unique words!!!
         
        print(articles) # PRINT AT THE END TO TEST 


    def remove_duplicates_pronouns(): # manually copying code from remove_duplicate_articles()
        lowercase_pronouns = [word.lower() for word in pronouns]
        seen = set()
        unique_pronouns = []
        for pronoun in lowercase_pronouns:
            if pronoun not in seen:
                unique_pronouns.append(pronoun)
                seen.add(pronoun)

        pronouns[:] = unique_pronouns


        print(pronouns)  # PRINT AT THE END TO TEST

    def remove_duplicates_verbs():
        lowercase_verbs = [word.lower() for word in verbs]
        seen = set()
        unique_verbs = []
        for verb in lowercase_verbs:
            if verb not in seen:
                unique_verbs.append(verb)  # Append individual verb, not the entire list
                seen.add(verb)
        
        verbs[:] = unique_verbs  # Update the verbs list, not pronouns
        
        
        print(verbs)  # PRINT AT THE END TO TEST


    # CALL FUNCTIONS AT THE END: 
    
    remove_duplicates_articles()  # call the function to remove duplicates from articles
    remove_duplicates_pronouns()  # call the function to remove duplicates from pronouns
    remove_duplicates_verbs()
    

# Function to generate random titles
def random_title():
    word1 = random.choice(articles + adjectives + nouns)
    if word1 in articles:
        word2 = random.choice(nouns + adjectives)
        if word2 in adjectives:
            word3 = random.choice(nouns)
    else:
        word2 = random.choice(nouns)
        word3 = random.choice(verbs)
        word4 = random.choice(prepositions)
        word5 = random.choice(nouns)

    x = random.randint(2, 5)
    if x == 2:
        fobcombo1 = ' '.join([word1, word2])
    elif x == 3:
        fobcombo1 = ' '.join([word1, word2, word3])
    elif x == 4:
        fobcombo1 = ' '.join([word1, word2, word3, word4])
    elif x == 5:
        fobcombo1 = ' '.join([word1, word2, word3, word4, word5])

    fobcombo1 = fobcombo1.replace(",", "")
    print(fobcombo1)

# Generate 10 random titles

#for i in range(10):
#    random_title()



#remove_duplicates()# Call the function to remove duplicates


#print("duplicates of articles should now be removed. \n\n\n")
#print(FOB_string)


#remove_duplicates_fob()


Current version + plans 

from textblob import TextBlob
import random

# Read the content of the file
with open('lyrics_unique.txt', 'r') as file:
    text = file.read()

# Convert all words in the text to lowercase

# Split the text into a list of words


text = text.lower()
text = text.replace("\n", "")
text = text.replace(",", "")

# Split the text into a list of words
lyrics = text.split()
#print(lyrics)


# Combine the titles list with the list of words from the text
titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = titles + lyrics


# Join the combined list into a single string
FOB_string = ' '.join(FOB)
FOB_string=FOB_string.split()

FOB_list = list(FOB_string) # I think there are problems here 

FOB_list = [word.lower() for word in FOB_list] # problems here 


#### NEED TO DIVIDE FOB INTO DIFFERENT WORDS ####


##### TRY TO MAKE LOWERCASE AND REMOVE DUPLICATES BEFORE CATEGORIZING #####


def remove_duplicates_fob():
 

    seen = set()
    unique_all = []
    for word in FOB_list: # for every word in the lowercase list 
        if word not in seen: # if the word is not yet in the set 
            unique_all.append(word) # add it to new list 
            seen.add(word) # add it to the set


    FOB_list[:] = unique_all # replaces all items in original list with unique words!!!
    
    #FOB_string = FOB_list.join("",FOB_list) # TRYING TO TURN INTO A STRING AT THE END 

  

remove_duplicates_fob() # CALL FUNCTION TO ELIMINATE DUPLICATES BEFORE BLOB

# still have not turned FOB back into a string before blob 

#FOB_string = ' '.join(FOB_list) # this should turn FOB_string back into a string 
#print(FOB_string)




def checktype():
    
    if type(FOB_string) == str:  # Comparing the type with str
        print("String")
    elif type(FOB_string) == list:
        print("list")


FOB_string = ' '.join(FOB_list) # turned back into string 
print("updated version: \n\n")     
print(FOB_string) # MUST change FOB into a string before blob looks at it 
checktype()

    # CHECK IF FOB Is A LIST OR STRING AFTER EACH CHANGE 


    # currently returns string 
    # blob should be working now 

'''
put these in and then check which type it is 

FOB_string = ' '.join(FOB)
FOB_string=FOB_string.split()

FOB_list = list(FOB_string) # I think there are problems here 

FOB_list = [word.lower() for word in FOB_list] # problems here

 '''



# Create a TextBlob object
blob = TextBlob(FOB_string)

# Initialize lists for different parts of speech
nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}

# Categorize words based on their parts of speech
for word, pos in blob.tags: 
    pos = custom_tags.get(word, pos)  # Use custom tags if available
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)

#print("everything has now been categorized. Duplicates not yet eliminated \n\n\n")
#print(FOB_string)

# NEED FUNCTION TO REMOVE SINGLE LETTERS EXCEPT I FROM EVERY CATEGORY
# print full list of everything and see where 'm shows up 
# also there's just the letters 'na' which need to be changed into the word wanna I think


#### CHECK ALL WORDS #####
# found some letters in nouns 
# for i in range(len(nouns)):
#    if "wan" # manually checks every letter combo that doesn't belong 
# I will need to combine 'wan' and 'na'
# using same code as remove_duplicates() to check every word 
# I don't really know the way this code works well enough to modify it for this new goal


# Function to remove duplicates from lists
def remove_duplicates():
    def remove_duplicates_articles():
        
        
        lowercase_articles = [word.lower() for word in articles] # make all items in list lowercase
        
        #print("articles should all be lowercase: \n") # testing if all articles print in lowercase
        #print(lowercase_articles) # should print lowercase articles - success 

        # next step is to get rid of duplicates now that all words can be changed to lowercase, then print again 

        seen = set()
        unique_articles = []
        for article in lowercase_articles: # for every word in the lowercase list 
            if article not in seen: # if the word is not yet in the set 
                unique_articles.append(article) # add it to new list 
                seen.add(article) # add it to the set


        articles[:] = unique_articles # replaces all items in original list with unique words!!!
         
        print(articles) # PRINT AT THE END TO TEST 


    def remove_duplicates_pronouns(): # manually copying code from remove_duplicate_articles()
        lowercase_pronouns = [word.lower() for word in pronouns]
        seen = set()
        unique_pronouns = []
        for pronoun in lowercase_pronouns:
            if pronoun not in seen:
                unique_pronouns.append(pronoun)
                seen.add(pronoun)

        pronouns[:] = unique_pronouns


        print(pronouns)  # PRINT AT THE END TO TEST

    def remove_duplicates_verbs():
        lowercase_verbs = [word.lower() for word in verbs]
        seen = set()
        unique_verbs = []
        for verb in lowercase_verbs:
            if verb not in seen:
                unique_verbs.append(verb)  # Append individual verb, not the entire list
                seen.add(verb)
        
        verbs[:] = unique_verbs  # Update the verbs list, not pronouns
        
        
        print(verbs)  # PRINT AT THE END TO TEST


    # CALL FUNCTIONS AT THE END: 
    
    remove_duplicates_articles()  # call the function to remove duplicates from articles
    remove_duplicates_pronouns()  # call the function to remove duplicates from pronouns
    remove_duplicates_verbs()
    

# Function to generate random titles
def random_title():
    word1 = random.choice(articles + adjectives + nouns)
    if word1 in articles:
        word2 = random.choice(nouns + adjectives)
        if word2 in adjectives:
            word3 = random.choice(nouns)
    else:
        word2 = random.choice(nouns)
        word3 = random.choice(verbs)
        word4 = random.choice(prepositions)
        word5 = random.choice(nouns)

    x = random.randint(2, 5)
    if x == 2:
        fobcombo1 = ' '.join([word1, word2])
    elif x == 3:
        fobcombo1 = ' '.join([word1, word2, word3])
    elif x == 4:
        fobcombo1 = ' '.join([word1, word2, word3, word4])
    elif x == 5:
        fobcombo1 = ' '.join([word1, word2, word3, word4, word5])

    fobcombo1 = fobcombo1.replace(",", "")
    print(fobcombo1)

# Generate 10 random titles

#for i in range(10):
#    random_title()



#remove_duplicates()# Call the function to remove duplicates


#print("duplicates of articles should now be removed. \n\n\n")
#print(FOB_string)


#remove_duplicates_fob()

#   PLANS:                      
# * Combines titles with lyrics 
# * Turns everything to lowercase, checks and removes duplicates 
# * Top priority functions - truly random, one that puts parts		 # * of speech in a particular order, maybe a simple one and then # * a more complex one 
# * Possibly a mode where words are more likely to show up, like #	dick and fuckin 
# * The ability to open and read different text files and still 	#	have the lyrics organized in the same way 
# * Ability to include multiple text files 

# Function to generate random titles - will change and turn into multiple different functions 
# These are the different modes that will be included in the final product: 
# 1. truly random like the original 
# 2. parts of speech in a particular order 
# 3. increase chances of certain words, like dick and fuckin
# 4. able to open and read different text files and organize words properly 
# 
# 
# to do feature 1 -  bring in code from original and build off of it 
# for feature 2 - continue working on the function that only allows certain parts of speech to come after others
# 3 - do not worry about it for now 
# 4 - check if it’s already possible, but also a very low priority 
# so really what I need to focus on is making sure the code works as is before I make changes, and see what needs to be done, but I might need to edit or write entirely new functions to make it truly random cause I spent all that time on the if-then statements for certain parts of speech. 
# I’ll check where it is right now and go from there
# 
# It currently prints every word in the titles and lyrics in all lowercase, no duplicates, and returns that it’s a string. So I need to eventually make every word capitalized but that’s not as important for right now. I need to make it not print “string” anymore. Then call the random generator function to see if it works properly after putting words into the right groups and removing duplicates. 
# actually, check if it’ll print certain word groups after the other things, before trying to randomize everything 


Latest version 2/22 lyrics + titles (no duplicates)

Next step will be to see if it categorized words correctly because I don’t think it did at one point 

from textblob import TextBlob
import random

# Read the content of the file
with open('lyrics_unique.txt', 'r') as file:
    text = file.read()

# Convert all words in the text to lowercase

# Split the text into a list of words


text = text.lower()
text = text.replace("\n", "")
text = text.replace(",", "")

# Split the text into a list of words
lyrics = text.split()
#print(lyrics)


# Combine the titles list with the list of words from the text
titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = titles + lyrics


# Join the combined list into a single string
FOB_string = ' '.join(FOB)
FOB_string=FOB_string.split()

FOB_list = list(FOB_string) # I think there are problems here 

FOB_list = [word.lower() for word in FOB_list] # problems here 


#### NEED TO DIVIDE FOB INTO DIFFERENT WORDS ####


##### TRY TO MAKE LOWERCASE AND REMOVE DUPLICATES BEFORE CATEGORIZING #####


def remove_duplicates_fob():
 

    seen = set()
    unique_all = []
    for word in FOB_list: # for every word in the lowercase list 
        if word not in seen: # if the word is not
 yet in the set 
            unique_all.append(word) # add it to new list 
            seen.add(word) # add it to the set


    FOB_list[:] = unique_all # replaces all items in original list with unique words!!!
    
    #FOB_string = FOB_list.join("",FOB_list) # TRYING TO TURN INTO A STRING AT THE END 

  

remove_duplicates_fob() # CALL FUNCTION TO ELIMINATE DUPLICATES BEFORE BLOB

# still have not turned FOB back into a string before blob 

#FOB_string = ' '.join(FOB_list) # this should turn FOB_string back into a string 
#print(FOB_string)




def checktype():
    
    if type(FOB_string) == str:  # Comparing the type with str
        print("String")
    elif type(FOB_string) == list:
        print("list")


FOB_string = ' '.join(FOB_list) # turned back into string 
print("updated version: \n\n")     
print(FOB_string) # MUST change FOB into a string before blob looks at it 
checktype()

    # CHECK IF FOB Is A LIST OR STRING AFTER EACH CHANGE 


    # currently returns string 
    # blob should be working now 

'''
put these in and then check which type it is 

FOB_string = ' '.join(FOB)
FOB_string=FOB_string.split()

FOB_list = list(FOB_string) # I think there are problems here 

FOB_list = [word.lower() for word in FOB_list] # problems here

 '''



# Create a TextBlob object
blob = TextBlob(FOB_string)

# Initialize lists for different parts of speech
nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}

# Categorize words based on their parts of speech
for word, pos in blob.tags: 
    pos = custom_tags.get(word, pos)  # Use custom tags if available
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)

#print("everything has now been categorized. Duplicates not yet eliminated \n\n\n")
#print(FOB_string)

# NEED FUNCTION TO REMOVE SINGLE LETTERS EXCEPT I FROM EVERY CATEGORY
# print full list of everything and see where 'm shows up 
# also there's just the letters 'na' which need to be changed into the word wanna I think


#### CHECK ALL WORDS #####
# found some letters in nouns 
# for i in range(len(nouns)):
#    if "wan" # manually checks every letter combo that doesn't belong 
# I will need to combine 'wan' and 'na'
# using same code as remove_duplicates() to check every word 
# I don't really know the way this code works well enough to modify it for this new goal


# Function to remove duplicates from lists
def remove_duplicates():
    def remove_duplicates_articles():
        
        
        lowercase_articles = [word.lower() for word in articles] # make all items in list lowercase
        
        #print("articles should all be lowercase: \n") # testing if all articles print in lowercase
        #print(lowercase_articles) # should print lowercase articles - success 

        # next step is to get rid of duplicates now that all words can be changed to lowercase, then print again 

        seen = set()
        unique_articles = []
        for article in lowercase_articles: # for every word in the lowercase list 
            if article not in seen: # if the word is not yet in the set 
                unique_articles.append(article) # add it to new list 
                seen.add(article) # add it to the set


        articles[:] = unique_articles # replaces all items in original list with unique words!!!
         
        print(articles) # PRINT AT THE END TO TEST 


    def remove_duplicates_pronouns(): # manually copying code from remove_duplicate_articles()
        lowercase_pronouns = [word.lower() for word in pronouns]
        seen = set()
        unique_pronouns = []
        for pronoun in lowercase_pronouns:
            if pronoun not in seen:
                unique_pronouns.append(pronoun)
                seen.add(pronoun)

        pronouns[:] = unique_pronouns


        print(pronouns)  # PRINT AT THE END TO TEST

    def remove_duplicates_verbs():
        lowercase_verbs = [word.lower() for word in verbs]
        seen = set()
        unique_verbs = []
        for verb in lowercase_verbs:
            if verb not in seen:
                unique_verbs.append(verb)  # Append individual verb, not the entire list
                seen.add(verb)
        
        verbs[:] = unique_verbs  # Update the verbs list, not pronouns
        
        
        print(verbs)  # PRINT AT THE END TO TEST


    # CALL FUNCTIONS AT THE END: 
    
    remove_duplicates_articles()  # call the function to remove duplicates from articles
    remove_duplicates_pronouns()  # call the function to remove duplicates from pronouns
    remove_duplicates_verbs()
    

# Function to generate random titles
def random_title():
    word1 = random.choice(articles + adjectives + nouns)
    if word1 in articles:
        word2 = random.choice(nouns + adjectives)
        if word2 in adjectives:
            word3 = random.choice(nouns)
    else:
        word2 = random.choice(nouns)
        word3 = random.choice(verbs)
        word4 = random.choice(prepositions)
        word5 = random.choice(nouns)

    x = random.randint(2, 5)
    if x == 2:
        fobcombo1 = ' '.join([word1, word2])
    elif x == 3:
        fobcombo1 = ' '.join([word1, word2, word3])
    elif x == 4:
        fobcombo1 = ' '.join([word1, word2, word3, word4])
    elif x == 5:
        fobcombo1 = ' '.join([word1, word2, word3, word4, word5])

    fobcombo1 = fobcombo1.replace(",", "")
    print(fobcombo1)

# Generate 10 random titles

#for i in range(10):
#    random_title()

Needed global variables and removal of duplicates in each category 

from textblob import TextBlob
import random

# Read the content of the file
with open('lyrics_unique.txt', 'r') as file:
    text = file.read()

# Convert all words in the text to lowercase
text = text.lower()
text = text.replace("\n", " ")
text = text.replace(",", "")

# Split the text into a list of words
lyrics = text.split()

# Combine the titles list with the list of words from the text
titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = titles + lyrics

# Join the combined list into a single string
FOB_string = ' '.join(FOB)
print(FOB_string)

# Create a TextBlob object
blob = TextBlob(FOB_string)

# Initialize lists for different parts of speech
nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}

# Categorize words based on their parts of speech
for word, pos in blob.tags: 
    pos = custom_tags.get(word, pos)  # Use custom tags if available
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)

# Function to remove duplicates from lists
def remove_duplicates():
    def remove_duplicates_list(word_list):
        lowercase_list = [word.lower() for word in word_list]
        seen = set()
        unique_list = []
        for word in lowercase_list:
            if word not in seen:
                unique_list.append(word)
                seen.add(word)
        return unique_list

    global articles, pronouns, verbs, nouns, adjectives, adverbs, prepositions, conjunctions, others
    articles = remove_duplicates_list(articles)
    pronouns = remove_duplicates_list(pronouns)
    verbs = remove_duplicates_list(verbs)
    nouns = remove_duplicates_list(nouns)
    adjectives = remove_duplicates_list(adjectives)
    adverbs = remove_duplicates_list(adverbs)
    prepositions = remove_duplicates_list(prepositions)
    conjunctions = remove_duplicates_list(conjunctions)
    others = remove_duplicates_list(others)

    print("Articles:", articles)
    print("Pronouns:", pronouns)
    print("Verbs:", verbs)
    print("Nouns:", nouns)
    print("Adjectives:", adjectives)
    print("Adverbs:", adverbs)
    print("Prepositions:", prepositions)
    print("Conjunctions:", conjunctions)
    print("Others:", others)

# Call the function to remove duplicates
remove_duplicates()

# Function to generate random titles
def random_title():
    word1 = random.choice(articles + adjectives + nouns)
    if word1 in articles:
        word2 = random.choice(nouns + adjectives)
        if word2 in adjectives:
            word3 = random.choice(nouns)
    else:
        word2 = random.choice(nouns)
        word3 = random.choice(verbs)
        word4 = random.choice(prepositions)
        word5 = random.choice(nouns)

    x = random.randint(2, 5)
    if x == 2:
        fobcombo1 = ' '.join([word1, word2])
    elif x == 3:
        fobcombo1 = ' '.join([word1, word2, word3])
    elif x == 4:
        fobcombo1 = ' '.join([word1, word2, word3, word4])
    elif x == 5:
        fobcombo1 = ' '.join([word1, word2, word3, word4, word5])

    fobcombo1 = fobcombo1.replace(",", "")
    print(fobcombo1)

# Generate 10 random titles
for i in range(10):
    random_title()


Has function set up for specific parts of speech, works but not complete 

from textblob import TextBlob
import random

# Read the content of the file
with open('lyrics_unique.txt', 'r') as file:
    text = file.read()

# Convert all words in the text to lowercase
text = text.lower()
text = text.replace("\n", " ")
text = text.replace(",", "")

# Split the text into a list of words
lyrics = text.split()

# Combine the titles list with the list of words from the text
titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = titles + lyrics

# Join the combined list into a single string
FOB_string = ' '.join(FOB)
print(FOB_string)

# Create a TextBlob object
blob = TextBlob(FOB_string)

# Initialize lists for different parts of speech
nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}

# Categorize words based on their parts of speech
for word, pos in blob.tags: 
    pos = custom_tags.get(word, pos)  # Use custom tags if available
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)

# Function to remove duplicates from lists
def remove_duplicates():
    def remove_duplicates_list(word_list):
        lowercase_list = [word.lower() for word in word_list]
        seen = set()
        unique_list = []
        for word in lowercase_list:
            if word not in seen:
                unique_list.append(word)
                seen.add(word)
        return unique_list

    global articles, pronouns, verbs, nouns, adjectives, adverbs, prepositions, conjunctions, others
    articles = remove_duplicates_list(articles)
    pronouns = remove_duplicates_list(pronouns)
    verbs = remove_duplicates_list(verbs)
    nouns = remove_duplicates_list(nouns)
    adjectives = remove_duplicates_list(adjectives)
    adverbs = remove_duplicates_list(adverbs)
    prepositions = remove_duplicates_list(prepositions)
    conjunctions = remove_duplicates_list(conjunctions)
    others = remove_duplicates_list(others)

    print("Articles:", articles)
    print("Pronouns:", pronouns)
    print("Verbs:", verbs)
    print("Nouns:", nouns)
    print("Adjectives:", adjectives)
    print("Adverbs:", adverbs)
    print("Prepositions:", prepositions)
    print("Conjunctions:", conjunctions)
    print("Others:", others)

# Call the function to remove duplicates
remove_duplicates()

def random_title(): # specific parts of speech together 
    word1 = random.choice(articles + adjectives + nouns) # chooses either an article, adjective, or noun
    if word1 in articles: # if the first word is an article 
        word2 = random.choice(nouns + adjectives) # then choose either a noun or adjective 
        if word2 in adjectives: # if the second word is an adjective 
            word3 = random.choice(nouns) # then the third word has to be a noun 
    else:               # NEED TO ADD: elif word1 is adjective or noun   
        word2 = random.choice(nouns) # if the first word is not an article, word 2 is a noun
        word3 = random.choice(verbs) # word 3 is a verb, etc 
        word4 = random.choice(prepositions)
        word5 = random.choice(nouns)

    x = random.randint(2, 5)
    if x == 2:
        fobcombo1 = ' '.join([word1, word2])
    elif x == 3:
        fobcombo1 = ' '.join([word1, word2, word3])
    elif x == 4:
        fobcombo1 = ' '.join([word1, word2, word3, word4])
    elif x == 5:
        fobcombo1 = ' '.join([word1, word2, word3, word4, word5])

    fobcombo1 = fobcombo1.replace(",", "")
    print(fobcombo1)

# Generate 10 random titles
#for i in range(10):
#    random_title()





Super successful 6:20 update

from textblob import TextBlob
import random

# Read the content of the file
with open('lyrics_unique.txt', 'r') as file:
    text = file.read()

# Convert all words in the text to lowercase
text = text.lower()
text = text.replace("\n", " ")
text = text.replace(",", "")

# Split the text into a list of words
lyrics = text.split()

# Combine the titles list with the list of words from the text
titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = titles + lyrics

# Join the combined list into a single string
FOB_string = ' '.join(FOB)

# Create a TextBlob object
blob = TextBlob(FOB_string)

# Initialize lists for different parts of speech
nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}

# Categorize words based on their parts of speech
for word, pos in blob.tags: 
    pos = custom_tags.get(word, pos)  # Use custom tags if available
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)


#def move_specific_word(): # function to move specific words
# I can use others.remove('bel') and others.remove('air)
# and then nouns.append('bel air') 
# and repeat for other words as needed
# 
# 
def move_specific_words():
    if 'll' in others and 'i' in adjectives:
        others.remove('ll')
        adjectives.remove('i')
        pronouns.append("I'll")
        print(pronouns)

move_specific_words()

# Function to remove duplicates from lists
def remove_duplicates():
    def remove_duplicates_list(word_list):
        lowercase_list = [word.lower() for word in word_list]
        seen = set()
        unique_list = []
        for word in lowercase_list:
            if word not in seen:
                unique_list.append(word)
                seen.add(word)
        return unique_list

    global articles, pronouns, verbs, nouns, adjectives, adverbs, prepositions, conjunctions, others
    articles = remove_duplicates_list(articles)
    pronouns = remove_duplicates_list(pronouns)
    verbs = remove_duplicates_list(verbs)
    nouns = remove_duplicates_list(nouns)
    adjectives = remove_duplicates_list(adjectives)
    adverbs = remove_duplicates_list(adverbs)
    prepositions = remove_duplicates_list(prepositions)
    conjunctions = remove_duplicates_list(conjunctions)
    others = remove_duplicates_list(others)

    
    '''print("Articles:", articles)
    print("Pronouns:", pronouns)
    print("Verbs:", verbs)
    print("Nouns:", nouns)
    print("Adjectives:", adjectives)
    print("Adverbs:", adverbs)
    print("Prepositions:", prepositions)
    print("Conjunctions:", conjunctions)
    print("Others:", others)
'''


# Call the function to remove duplicates
remove_duplicates()



def random_title(): # specific parts of speech together 
    word1 = random.choice(articles + adjectives + nouns) # chooses either an article, adjective, or noun
    if word1 in articles: # if the first word is an article
        word2 = random.choice(nouns + adjectives) # then choose either a noun or adjective 
        if word2 in adjectives: # if the second word is an adjective 
            word3 = random.choice(nouns) # then the third word has to be a noun 
        elif word2 in nouns: 
            word3 = random.choice(prepositions)    
    elif word1 in adjectives:
        word2 = random.choice(nouns)

    else:               # NEED TO ADD: elif word1 is adjective or noun   
        word2 = random.choice(nouns) # if the first word is not an article, word 2 is a noun
        word3 = random.choice(verbs) # word 3 is a verb, etc 
        word4 = random.choice(prepositions)
        word5 = random.choice(nouns)

    fobcombo = ' '.join([word1, word2, word3])
    print(fobcombo)


 

    fobcombo = fobcombo.replace(",", "")
    print(fobcombo)

# Generate 10 random titles
for i in range(10):
    random_title()


#move_specific_words()









# COMMENTED OUT THIS PART FOR NOW 

'''   # choose random length of title - commenting out for now and just going with 3 to simply it
    x = random.randint(2, 5)
    if x == 2:
        fobcombo1 = ' '.join([word1, word2])
    elif x == 3:
        fobcombo1 = ' '.join([word1, word2, word3])
    elif x == 4:
        fobcombo1 = ' '.join([word1, word2, word3, word4])
    elif x == 5:
        fobcombo1 = ' '.join([word1, word2, word3, word4, word5])
        '''


THINGS ARE STARTING TO WORK HOLY FUCK

# This is absolutely fucking unhinged I literally got “shoot love swallow”

from textblob import TextBlob
import random

# Read the content of the file
with open('lyrics_unique.txt', 'r') as file:
    text = file.read()

# Convert all words in the text to lowercase
text = text.lower()
text = text.replace("\n", " ")
text = text.replace(",", "")

# Split the text into a list of words
lyrics = text.split()

# Combine the titles list with the list of words from the text
titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = titles + lyrics

# Join the combined list into a single string
FOB_string = ' '.join(FOB)

# Create a TextBlob object
blob = TextBlob(FOB_string)

# Initialize lists for different parts of speech
nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}

# Categorize words based on their parts of speech
for word, pos in blob.tags: 
    pos = custom_tags.get(word, pos)  # Use custom tags if available
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)


#def move_specific_word(): # function to move specific words
# I can use others.remove('bel') and others.remove('air)
# and then nouns.append('bel air') 
# and repeat for other words as needed
# 
# 
def move_specific_words():
    if 'll' in others and 'i' in adjectives:
        others.remove('ll')
        adjectives.remove('i')
        pronouns.append("I'll")
        print(pronouns)

move_specific_words()

# Function to remove duplicates from lists
def remove_duplicates():
    def remove_duplicates_list(word_list):
        lowercase_list = [word.lower() for word in word_list]
        seen = set()
        unique_list = []
        for word in lowercase_list:
            if word not in seen:
                unique_list.append(word)
                seen.add(word)
        return unique_list

    global articles, pronouns, verbs, nouns, adjectives, adverbs, prepositions, conjunctions, others
    articles = remove_duplicates_list(articles)
    pronouns = remove_duplicates_list(pronouns)
    verbs = remove_duplicates_list(verbs)
    nouns = remove_duplicates_list(nouns)
    adjectives = remove_duplicates_list(adjectives)
    adverbs = remove_duplicates_list(adverbs)
    prepositions = remove_duplicates_list(prepositions)
    conjunctions = remove_duplicates_list(conjunctions)
    others = remove_duplicates_list(others)

    
    '''print("Articles:", articles)
    print("Pronouns:", pronouns)
    print("Verbs:", verbs)
    print("Nouns:", nouns)
    print("Adjectives:", adjectives)
    print("Adverbs:", adverbs)
    print("Prepositions:", prepositions)
    print("Conjunctions:", conjunctions)
    print("Others:", others)
'''


# Call the function to remove duplicates
remove_duplicates()



def random_title(): # specific parts of speech together 
    word1 = random.choice(articles + adjectives + nouns) # chooses either an article, adjective, or noun
    if word1 in articles: # if the first word is an article
        word2 = random.choice(nouns + adjectives) # then choose either a noun or adjective 
        if word2 in adjectives: # if the second word is an adjective 
            word3 = random.choice(nouns) # then the third word has to be a noun 
        elif word2 in nouns: 
            word3 = random.choice(nouns) # putting two nouns next to each other might not make sense but simpler for now  
    elif word1 in adjectives:
        word2 = random.choice(nouns)
        word3 = random.choice(verbs) # THREE VERBS IN A ROW MAKES SENSE - "live laugh love" or the unhinged
    elif word1 in nouns:              # version - "shoot love swallow"
        word2 = random.choice(verbs)
        word3 = random.choice(adjectives)    

    else:               # NEED TO ADD: elif word1 is adjective or noun   
        word2 = random.choice(nouns) # if the first word is not an article, word 2 is a noun
        word3 = random.choice(verbs) # word 3 is a verb, etc 
        word4 = random.choice(prepositions)
        word5 = random.choice(nouns)

    fobcombo = ' '.join([word1, word2, word3])

 
    fobcombo = fobcombo.replace(",", "")
    print(fobcombo)

# Generate 10 random titles
for i in range(10):
    random_title()


#move_specific_words()

2/23 things are finally starting to look good

from textblob import TextBlob
import random

# Read the content of the file
with open('lyrics_unique.txt', 'r') as file:
    text = file.read()

# Convert all words in the text to lowercase
text = text.lower()
text = text.replace("\n", " ")
text = text.replace(",", "")

# Split the text into a list of words
lyrics = text.split()

# Combine the titles list with the list of words from the text
titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = titles + lyrics

# Join the combined list into a single string
FOB_string = ' '.join(FOB)

# Create a TextBlob object
blob = TextBlob(FOB_string)

# Initialize lists for different parts of speech
nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []
object_pronouns = [] # NOT USED YET - pronouns to start a sentence with, trying to see if this one will work with blobs
subject_pronouns = [] # NOT USED YET 
# actually this may need to be done manually but that's fine - organize as usual, then manually remove and append "we", "us", and "them"

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}

# Categorize words based on their parts of speech
for word, pos in blob.tags: 
    pos = custom_tags.get(word, pos)  # Use custom tags if available
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)


#def move_specific_word(): # function to move specific words
# I can use others.remove('bel') and others.remove('air)
# and then nouns.append('bel air') 
# and repeat for other words as needed
# 
# 
def move_specific_words():
    if 'll' in others and 'i' in adjectives:
        others.remove('ll')
        adjectives.remove('i')
        pronouns.append("I'll")
        print(pronouns)


    

    pronouns.remove('malibu') # if I already know the category then I don't need the if statement 
    pronouns.remove('us')


    # trying to separate pronouns into different categories so that the title will start with the right form
    # only start with ones like "we" and never "us"
    # need to create a new category for words I think, if blobs will handle it 

move_specific_words()

# Function to remove duplicates from lists
def remove_duplicates():
    def remove_duplicates_list(word_list):
        lowercase_list = [word.lower() for word in word_list]
        seen = set()
        unique_list = []
        for word in lowercase_list:
            if word not in seen:
                unique_list.append(word)
                seen.add(word)
        return unique_list

    global articles, pronouns, verbs, nouns, adjectives, adverbs, prepositions, conjunctions, others
    articles = remove_duplicates_list(articles)
    pronouns = remove_duplicates_list(pronouns)
    verbs = remove_duplicates_list(verbs)
    nouns = remove_duplicates_list(nouns)
    adjectives = remove_duplicates_list(adjectives)
    adverbs = remove_duplicates_list(adverbs)
    prepositions = remove_duplicates_list(prepositions)
    conjunctions = remove_duplicates_list(conjunctions)
    others = remove_duplicates_list(others)


# Call the function to remove duplicates
remove_duplicates()



def random_title(): 
    
    def true_random():

  
        a = random.choice(FOB) + " " + random.choice(FOB)
        b = random.choice(FOB)
        c = random.choice(FOB)
        d = random.choice(FOB)
        e = random.choice(FOB)
        

        
        fobcombo1 = ((a) + " " + (b))
        fobcombo2 = ((b) + " " + (c))
        fobcombo3 = ((c) + " " + (d))
        fobcombo4 = ((d) + " " + (e))
        fobcombo5 = ((b) + " " + (a))
        fobcombo6 = ((c) + " " + (d))
        fobcombo7 = ((e) + " " + (d))

        fobcombos = [fobcombo1, fobcombo2, fobcombo3, fobcombo4, fobcombo5, fobcombo6, fobcombo7]        
    
            
        fobcombo = random.choice(fobcombos)
        print(fobcombo)


    def random_rules_mode1():

    # BASE FUNCTION FOR RANDOM CHOICE - ARTICLE, ADJECTIVE, NOUN

        word1 = random.choice(articles + adjectives + nouns) # chooses either an article, adjective, or noun
        if word1 in articles: # if the first word is an article
            word2 = random.choice(nouns + adjectives) # then choose either a noun or adjective 
            if word2 in adjectives: # if the second word is an adjective 
                word3 = random.choice(nouns) # then the third word has to be a noun 
            elif word2 in nouns: 
                word3 = random.choice(nouns) # putting two nouns next to each other might not make sense but simpler for now  
        elif word1 in adjectives:
            word2 = random.choice(nouns)
            word3 = random.choice(verbs) # THREE VERBS IN A ROW MAKES SENSE - "live laugh love" or the unhinged
        elif word1 in nouns:              # version - "shoot love swallow"
            word2 = random.choice(verbs)
            word3 = random.choice(adjectives)    

        else:               # NEED TO ADD: elif word1 is adjective or noun   
            word2 = random.choice(nouns) # if the first word is not an article, word 2 is a noun
            word3 = random.choice(verbs) # word 3 is a verb, etc 

        fobcombo = ' '.join([word1, word2, word3])

 
        fobcombo = fobcombo.replace(",", "")
        print(fobcombo)
    
    def random_rules_mode2(): # PRONOUNS AND VERBS - might wanna make more complicated if/then statements to randomly land on different sentence structures
        word1 = random.choice(pronouns)
        word2 = random.choice(verbs)
        word3 = random.choice(prepositions)
        word4 = random.choice(articles)
        word5 = random.choice(nouns)
        
        
        fobcombo = ' '.join([word1, word2, word3, word4, word5])
        print(fobcombo)

    

    mode = input("Options: \n 0. true random \n 1: mode 1 \n 2. add mode 2\n Which mode? ")
    if mode=="true random" in mode or mode=="0":
        for i in range(10):
            true_random()
    elif mode=="mode 1" or mode=="1":
        
        for i in range(10):
            random_rules_mode1()
    
    elif mode=="mode 2" or mode=="2":
        
        for i in range(10):
            random_rules_mode2()  




#move_specific_words()
print(pronouns)
random_title()




IT WORKS! Making tweaks

from textblob import TextBlob
import random

# Read the content of the file
with open('lyrics_unique.txt', 'r') as file:
    text = file.read()

# Convert all words in the text to lowercase
text = text.lower()
text = text.replace("\n", " ")
text = text.replace(",", "")

# Split the text into a list of words
lyrics = text.split()

# Combine the titles list with the list of words from the text
titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = titles + lyrics

# Join the combined list into a single string
FOB_string = ' '.join(FOB)

# Create a TextBlob object
blob = TextBlob(FOB_string)

# Initialize lists for different parts of speech
nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []
object_pronouns = [] # NOT USED YET - pronouns to start a sentence with, trying to see if this one will work with blobs
subject_pronouns = [] # NOT USED YET 
# actually this may need to be done manually but that's fine - organize as usual, then manually remove and append "we", "us", and "them"

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}

# Categorize words based on their parts of speech
for word, pos in blob.tags: 
    pos = custom_tags.get(word, pos)  # Use custom tags if available
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)


#def move_specific_word(): # function to move specific words
# I can use others.remove('bel') and others.remove('air)
# and then nouns.append('bel air') 
# and repeat for other words as needed
# 
# 
def move_specific_words():
    if 'll' in others and 'i' in adjectives:
        others.remove('ll')
        adjectives.remove('i')
        pronouns.append("I'll")
        print(pronouns)


    pronouns.remove('malibu') # if I already know the category then I don't need the if statement 
    
    wordindex = blob.find("ai")



    # trying to separate pronouns into different categories so that the title will start with the right form
    # only start with ones like "we" and never "us"
    # need to create a new category for words I think, if blobs will handle it 

move_specific_words()

# Function to remove duplicates from lists
def remove_duplicates():
    def remove_duplicates_list(word_list):
        lowercase_list = [word.lower() for word in word_list]
        seen = set()
        unique_list = []
        for word in lowercase_list:
            if word not in seen:
                unique_list.append(word)
                seen.add(word)
        return unique_list

    global articles, pronouns, verbs, nouns, adjectives, adverbs, prepositions, conjunctions, others
    articles = remove_duplicates_list(articles)
    pronouns = remove_duplicates_list(pronouns)
    verbs = remove_duplicates_list(verbs)
    nouns = remove_duplicates_list(nouns)
    adjectives = remove_duplicates_list(adjectives)
    adverbs = remove_duplicates_list(adverbs)
    prepositions = remove_duplicates_list(prepositions)
    conjunctions = remove_duplicates_list(conjunctions)
    others = remove_duplicates_list(others)


# Call the function to remove duplicates
remove_duplicates()



def random_title(): 
    
    def true_random():

  
        a = random.choice(FOB) + " " + random.choice(FOB)
        b = random.choice(FOB)
        c = random.choice(FOB)
        d = random.choice(FOB)
        e = random.choice(FOB)
        

        
        fobcombo1 = ((a) + " " + (b))
        fobcombo2 = ((b) + " " + (c))
        fobcombo3 = ((c) + " " + (d))
        fobcombo4 = ((d) + " " + (e))
        fobcombo5 = ((b) + " " + (a))
        fobcombo6 = ((c) + " " + (d))
        fobcombo7 = ((e) + " " + (d))

        fobcombos = [fobcombo1, fobcombo2, fobcombo3, fobcombo4, fobcombo5, fobcombo6, fobcombo7]        
    
            
        fobcombo = random.choice(fobcombos)
        print(fobcombo)

    def random_rules_mode1():

    # BASE FUNCTION FOR RANDOM CHOICE - ARTICLE, ADJECTIVE, NOUN

        word1 = random.choice(articles + adjectives + nouns) # chooses either an article, adjective, or noun
        if word1 in articles: # if the first word is an article
            word2 = random.choice(nouns + adjectives) # then choose either a noun or adjective 
            if word2 in adjectives: # if the second word is an adjective 
                word3 = random.choice(nouns) # then the third word has to be a noun 
            elif word2 in nouns: 
                word3 = random.choice(nouns) # putting two nouns next to each other might not make sense but simpler for now  
        elif word1 in adjectives:
            word2 = random.choice(nouns)
            word3 = random.choice(verbs) # THREE VERBS IN A ROW MAKES SENSE - "live laugh love" or the unhinged
        elif word1 in nouns:              # version - "shoot love swallow"
            word2 = random.choice(verbs)
            word3 = random.choice(adjectives)    

        else:               # NEED TO ADD: elif word1 is adjective or noun   
            word2 = random.choice(nouns) # if the first word is not an article, word 2 is a noun
            word3 = random.choice(verbs) # word 3 is a verb, etc 

        fobcombo = ' '.join([word1, word2, word3])

 
        fobcombo = fobcombo.replace(",", "")
        print(fobcombo)
    
    def random_rules_mode2(): # PRONOUNS AND VERBS - might wanna make more complicated if/then statements to randomly land on different sentence structures
        word1 = random.choice(pronouns)
        word2 = random.choice(verbs)
        word3 = random.choice(prepositions)
        word4 = random.choice(articles)
        word5 = random.choice(nouns)
        
        
        fobcombo = ' '.join([word1, word2, word3, word4, word5])
        print(fobcombo)


        while True:
            mode = input("Options: \n 0. true random \n 1: mode 1 \n 2. mode 2\n Which mode? ")
            if mode=="true random" in mode or mode=="0":
                for i in range(10):
                    true_random()


            elif mode=="mode 1" or mode=="1":
                for i in range(10):
                    random_rules_mode1()
    
            elif mode=="mode 2" or mode=="2":
                for i in range(10):
                    random_rules_mode2()  



def testing_blobnouns(): # get phrases with nouns in them 
    nounphrases = blob.noun_phrases
    randomphrase = random.choice(nounphrases)
    print(randomphrase)



#random_title()


3 modes work properly!!!!

from textblob import TextBlob
import random

# Read the content of the file
with open('lyrics_unique.txt', 'r') as file:
    text = file.read()

# Convert all words in the text to lowercase
text = text.lower()
text = text.replace("\n", " ")
text = text.replace(",", "")

# Split the text into a list of words
lyrics = text.split()

# Combine the titles list with the list of words from the text
titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = titles + lyrics

# Join the combined list into a single string
FOB_string = ' '.join(FOB)

# Create a TextBlob object
blob = TextBlob(FOB_string)

# Initialize lists for different parts of speech
nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []
object_pronouns = [] # NOT USED YET - pronouns to start a sentence with, trying to see if this one will work with blobs
subject_pronouns = [] # NOT USED YET 
# actually this may need to be done manually but that's fine - organize as usual, then manually remove and append "we", "us", and "them"

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}

# Categorize words based on their parts of speech
for word, pos in blob.tags: 
    pos = custom_tags.get(word, pos)  # Use custom tags if available
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)


#def move_specific_word(): # function to move specific words
# I can use others.remove('bel') and others.remove('air)
# and then nouns.append('bel air') 
# and repeat for other words as needed
# 
# 
def move_specific_words():
    if 'll' in others and 'i' in adjectives:
        others.remove('ll')
        adjectives.remove('i')
        pronouns.append("I'll")
        print(pronouns)


    pronouns.remove('malibu') # if I already know the category then I don't need the if statement 
    
    # trying to separate pronouns into different categories so that the title will start with the right form
    # only start with ones like "we" and never "us"
    # need to create a new category for words I think, if blobs will handle it 

move_specific_words()

# Function to remove duplicates from lists
def remove_duplicates():
    def remove_duplicates_list(word_list):
        lowercase_list = [word.lower() for word in word_list]
        seen = set()
        unique_list = []
        for word in lowercase_list:
            if word not in seen:
                unique_list.append(word)
                seen.add(word)
        return unique_list

    global articles, pronouns, verbs, nouns, adjectives, adverbs, prepositions, conjunctions, others
    articles = remove_duplicates_list(articles)
    pronouns = remove_duplicates_list(pronouns)
    verbs = remove_duplicates_list(verbs)
    nouns = remove_duplicates_list(nouns)
    adjectives = remove_duplicates_list(adjectives)
    adverbs = remove_duplicates_list(adverbs)
    prepositions = remove_duplicates_list(prepositions)
    conjunctions = remove_duplicates_list(conjunctions)
    others = remove_duplicates_list(others)


# Call the function to remove duplicates
remove_duplicates()



def random_title(): 
    
    def true_random():

  
        a = random.choice(FOB) + " " + random.choice(FOB)
        b = random.choice(FOB)
        c = random.choice(FOB)
        d = random.choice(FOB)
        e = random.choice(FOB)
        

        
        fobcombo1 = ((a) + " " + (b))
        fobcombo2 = ((b) + " " + (c))
        fobcombo3 = ((c) + " " + (d))
        fobcombo4 = ((d) + " " + (e))
        fobcombo5 = ((b) + " " + (a))
        fobcombo6 = ((c) + " " + (d))
        fobcombo7 = ((e) + " " + (d))

        fobcombos = [fobcombo1, fobcombo2, fobcombo3, fobcombo4, fobcombo5, fobcombo6, fobcombo7]        
    
            
        fobcombo = random.choice(fobcombos)
        print(fobcombo)

    def random_rules_mode1():

    # BASE FUNCTION FOR RANDOM CHOICE - ARTICLE, ADJECTIVE, NOUN

        word1 = random.choice(articles + adjectives + nouns) # chooses either an article, adjective, or noun
        if word1 in articles: # if the first word is an article
            word2 = random.choice(nouns + adjectives) # then choose either a noun or adjective 
            if word2 in adjectives: # if the second word is an adjective 
                word3 = random.choice(nouns) # then the third word has to be a noun 
            elif word2 in nouns: 
                word3 = random.choice(nouns) # putting two nouns next to each other might not make sense but simpler for now  
        elif word1 in adjectives:
            word2 = random.choice(nouns)
            word3 = random.choice(verbs) # THREE VERBS IN A ROW MAKES SENSE - "live laugh love" or the unhinged
        elif word1 in nouns:              # version - "shoot love swallow"
            word2 = random.choice(verbs)
            word3 = random.choice(adjectives)    

        else:               # NEED TO ADD: elif word1 is adjective or noun   
            word2 = random.choice(nouns) # if the first word is not an article, word 2 is a noun
            word3 = random.choice(verbs) # word 3 is a verb, etc 

[continue copying below this point]

        fobcombo = ' '.join([word1, word2, word3])

 
        fobcombo = fobcombo.replace(",", "")
        print(fobcombo)
    
    def random_rules_mode2(): # PRONOUNS AND VERBS - might wanna make more complicated if/then statements to randomly land on different sentence structures
        word1 = random.choice(pronouns)
        word2 = random.choice(verbs)
        word3 = random.choice(prepositions)
        word4 = random.choice(articles)
        word5 = random.choice(nouns)
        
        
        fobcombo = ' '.join([word1, word2, word3, word4, word5])
        print(fobcombo)


    while True:
        mode = input("Options: \n 0. true random \n 1: mode 1 \n 2. mode 2\n Which mode? ")
        if mode=="true random" in mode or mode=="0":
            for i in range(10):
                true_random()

        elif mode=="mode 1" or mode=="1":
            for i in range(10):
                random_rules_mode1()
    
        elif mode=="mode 2" or mode=="2":
            for i in range(10):
                random_rules_mode2()  



def testing_blobnouns(): # get phrases with nouns in them 
    nounphrases = blob.noun_phrases
    randomphrase = random.choice(nounphrases)
    print(randomphrase)




def find_words(): # search for words 
    for word, tag in blob.tags:
        if "ai" in word:
            print(f"The part of speech of '{word}' is: {tag}")


random_title()



Put Python in HTML 

<!DOCTYPE html>
<html>
<head>
    <title>My Python Webpage</title>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/brython@3/brython.min.js"></script>
</head>
<body onload="brython()">
    <h1 id="output"></h1>
    <script type="text/python">
        from browser import document
        


        data = "Hello, world!"
        document['output'].textContent = data
        
        text = input("testing, type something: ")
        
        document['output'].textContent += " "
        
        document['output'].textContent += text
        
        
        
        
    </script>
</body>
</html>

Trying Python in webpage - select + indent in bulk with codebeautify	


from flask import Flask, render_template, request
from textblob import TextBlob
import random

app = Flask(__name__)


@app.route("/")
def home():
    return render_template("index.html")


@app.route("/generate", methods=["POST"])
def generate():
    # Your existing Python code here

    from textblob import TextBlob
    import random

    # Read the content of the file
    with open("lyrics_unique.txt", "r") as file:
        text = file.read()

    # Convert all words in the text to lowercase
    text = text.lower()
    text = text.replace("\n", " ")
    text = text.replace(",", "")

    # Split the text into a list of words
    lyrics = text.split()
    
    # Combine the titles list with the list of words from the text
    titles = [
        "20",
        "Dollar",
        "Nose",
        "Bleed",
        "7",
        "Minutes",
        "In",
        "Heaven",
        "Church",
        "Sunshine",
        "Riptide",
        "Bishops",
        "Knife",
        "Trick",
        "The",
        "Mighty",
        "Fall",
        "Death",
        "Valley",
        "The",
        "Kids",
        "Arent",
        "Alright",
        "She's",
        "My",
        "Winona",
        "The",
        "Takes",
        "Over",
        "The",
        "Breaks",
        "Over",
        "Don't",
        "You",
        "Know",
        "Who",
        "I",
        "Think",
        "I",
        "Am",
        "?",
        "The",
        "After",
        "Life",
        "Of",
        "The",
        "Party",
        "Its",
        "Hard",
        "To",
        "Say",
        "I",
        "Do",
        "When",
        "I ",
        "Don't",
        "Back",
        "To",
        "Earth",
        "Grand",
        "Theft",
        "Autumn",
        "/",
        "Where",
        "Is",
        "Your",
        "Boy",
        "Get",
        "Busy",
        "Living",
        "Or",
        "Get",
        "Busy",
        "Dying",
        "Do",
        "Your",
        "Part",
        "To",
        "Save",
        "The",
        "Scene",
        "and",
        "Stop",
        "Going",
        "To",
        "Shows",
        "Saturday",
        "A",
        "Little",
        "Less",
        "Sixteen",
        "Candles",
        "A",
        "Little",
        "More",
        "Touch",
        "Me",
        "Twin",
        "Skeletons",
        "Hotel",
        "In",
        "NYC",
        "I",
        "Don't",
        "Care",
        "Sugar",
        "We're",
        "Going",
        "Down",
        "Dance",
        "Dance",
        "My",
        "Songs",
        "Know",
        "What",
        "You",
        "Did",
        "In",
        "The",
        "Dark",
        "Light",
        "Em",
        "Up",
        "Young",
        "Volcanoes",
        "Alone",
        "Together",
        "Centuries",
        "Stay",
        "Frosty",
        "Royal",
        "Milk",
        "Tea",
        "The",
        "Pheonix",
        "Wilson",
        "Expensive",
        "Mistakes",
        "The",
        "Last",
        "Of",
        "The",
        "Real",
        "Ones",
        "Thanks",
        "For",
        "The",
        "Memories",
        "Immortals",
        "Irresistible",
        "Young",
        "And",
        "Menace",
        "Champion",
        "Just",
        "One",
        "Yesterday",
        "This",
        "Ain't",
        "A",
        "Scene",
        "It's",
        "An",
        "Arms",
        "Race",
        "Where",
        "Did",
        "The",
        "Party",
        "Go",
        "Save",
        "Rock",
        "And",
        "Roll",
        "Fourth",
        "Of",
        "July",
        "Sophomore",
        "Slump",
        "Or",
        "Comeback",
        "Of",
        "The",
        "Year",
        "The",
        "Shipped",
        "Gold",
        "Standard",
        "7",
        "Minutes",
        "In",
        "Heaven",
        "Hum",
        "Hallelujah",
        "Dear",
        "Future",
        "Self",
        "Hands",
        "Up",
        "XO",
        "27",
        "Run",
        "Dry",
        "Explode",
        "I'm",
        "Like",
        "A",
        "Lawyer",
        "With",
        "The",
        "Way",
        "I'm",
        "Always",
        "Trying",
        "To",
        "Get",
        "You",
        "Off",
        "Tell",
        "That",
        "Mick",
        "He",
        "Just",
        "Made",
        "My",
        "List",
        "Of",
        "Things",
        "To",
        "Do",
        "Today",
        "Yule",
        "Shoot",
        "Your",
        "Eye",
        "Out",
        "What",
        "A",
        "Catch",
        "Donnie",
    ]
    FOB = titles + lyrics
    
    # Join the combined list into a single string
    FOB_string = " ".join(FOB)
    
    # Create a TextBlob object
    blob = TextBlob(FOB_string)
    
    # Initialize lists for different parts of speech
    nouns = []
    verbs = []
    adjectives = []
    adverbs = []
    pronouns = []
    prepositions = []
    conjunctions = []
    others = []
    articles = []
    object_pronouns = (
        []
    )  # NOT USED YET - pronouns to start a sentence with, trying to see if this one will work with blobs
    subject_pronouns = []  # NOT USED YET
    # actually this may need to be done manually but that's fine - organize as usual, then manually remove and append "we", "us", and "them"
    
    # Custom dictionary for manual tags
    custom_tags = {
        "DNA": "NN",  # Noun
        "TNA": "NN",  # Noun
        "dick": "NN",
        "workin'": "VB",  # Verb (informal form)
        "fuckin'": "VB",  # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine
        "see-through": "JJ",  # Adjective
        # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title
        # Add more custom tags as needed
    }
    
    # Categorize words based on their parts of speech
    for word, pos in blob.tags:
        pos = custom_tags.get(word, pos)  # Use custom tags if available
        if pos.startswith("NN"):
            nouns.append(word)
        elif pos.startswith("VB"):
            verbs.append(word)
        elif pos.startswith("JJ"):
            adjectives.append(word)
        elif pos.startswith("RB"):
            adverbs.append(word)
        elif pos == "PRP":
            pronouns.append(word)
        elif pos == "IN":
            prepositions.append(word)
        elif pos == "CC":
            conjunctions.append(word)
        elif pos == "DT":  # Articles are often tagged as determiners (DT)
            articles.append(word)
        else:
            others.append(word)
    
    
    # def move_specific_word(): # function to move specific words
    # I can use others.remove('bel') and others.remove('air)
    # and then nouns.append('bel air')
    # and repeat for other words as needed
    #
    #
    def move_specific_words():
        if "ll" in others and "i" in adjectives:
            others.remove("ll")
            adjectives.remove("i")
            pronouns.append("I'll")
            print(pronouns)
    
        pronouns.remove(
            "malibu"
        )  # if I already know the category then I don't need the if statement
    
        # trying to separate pronouns into different categories so that the title will start with the right form
        # only start with ones like "we" and never "us"
        # need to create a new category for words I think, if blobs will handle it
    
    
    move_specific_words()
    
    # Function to remove duplicates from lists
    def remove_duplicates():
        def remove_duplicates_list(word_list):
            lowercase_list = [word.lower() for word in word_list]
            seen = set()
            unique_list = []
            for word in lowercase_list:
                if word not in seen:
                    unique_list.append(word)
                    seen.add(word)
            return unique_list
    
        global articles, pronouns, verbs, nouns, adjectives, adverbs, prepositions, conjunctions, others
        articles = remove_duplicates_list(articles)
        pronouns = remove_duplicates_list(pronouns)
        verbs = remove_duplicates_list(verbs)
        nouns = remove_duplicates_list(nouns)
        adjectives = remove_duplicates_list(adjectives)
        adverbs = remove_duplicates_list(adverbs)
        prepositions = remove_duplicates_list(prepositions)
        conjunctions = remove_duplicates_list(conjunctions)
        others = remove_duplicates_list(others)
    
    
    # Call the function to remove duplicates
    remove_duplicates()
    
    
    def random_title():
        def true_random():
    
            a = random.choice(FOB) + " " + random.choice(FOB)
            b = random.choice(FOB)
            c = random.choice(FOB)
            d = random.choice(FOB)
            e = random.choice(FOB)
    
            fobcombo1 = (a) + " " + (b)
            fobcombo2 = (b) + " " + (c)
            fobcombo3 = (c) + " " + (d)
            fobcombo4 = (d) + " " + (e)
            fobcombo5 = (b) + " " + (a)
            fobcombo6 = (c) + " " + (d)
            fobcombo7 = (e) + " " + (d)
    
            fobcombos = [
                fobcombo1,
                fobcombo2,
                fobcombo3,
                fobcombo4,
                fobcombo5,
                fobcombo6,
                fobcombo7,
            ]
    
            fobcombo = random.choice(fobcombos)
            print(fobcombo)
    
        def random_rules_mode1():
    
            # BASE FUNCTION FOR RANDOM CHOICE - ARTICLE, ADJECTIVE, NOUN
    
            word1 = random.choice(
                articles + adjectives + nouns
            )  # chooses either an article, adjective, or noun
            if word1 in articles:  # if the first word is an article
                word2 = random.choice(
                    nouns + adjectives
                )  # then choose either a noun or adjective
                if word2 in adjectives:  # if the second word is an adjective
                    word3 = random.choice(nouns)  # then the third word has to be a noun
                elif word2 in nouns:
                    word3 = random.choice(
                        nouns
                    )  # putting two nouns next to each other might not make sense but simpler for now
            elif word1 in adjectives:
                word2 = random.choice(nouns)
                word3 = random.choice(
                    verbs
                )  # THREE VERBS IN A ROW MAKES SENSE - "live laugh love" or the unhinged
            elif word1 in nouns:  # version - "shoot love swallow"
                word2 = random.choice(verbs)
                word3 = random.choice(adjectives)
    
            else:  # NEED TO ADD: elif word1 is adjective or noun
                word2 = random.choice(
                    nouns
                )  # if the first word is not an article, word 2 is a noun
                word3 = random.choice(verbs)  # word 3 is a verb, etc
    
            fobcombo = " ".join([word1, word2, word3])
    
            fobcombo = fobcombo.replace(",", "")
            print(fobcombo)
    
        def random_rules_mode2():  # PRONOUNS AND VERBS - might wanna make more complicated if/then statements to randomly land on different sentence structures
            word1 = random.choice(pronouns)
            word2 = random.choice(verbs)
            word3 = random.choice(prepositions)
            word4 = random.choice(articles)
            word5 = random.choice(nouns)
    
            fobcombo = " ".join([word1, word2, word3, word4, word5])
            print(fobcombo)
    
        while True:
            mode = input(
                "Options: \n 0. true random \n 1: mode 1 \n 2. mode 2\n Which mode? "
            )
            if mode == "true random" in mode or mode == "0":
                for i in range(10):
                    true_random()
    
            elif mode == "mode 1" or mode == "1":
                for i in range(10):
                    random_rules_mode1()
    
            elif mode == "mode 2" or mode == "2":
                for i in range(10):
                    random_rules_mode2()
    
    
    def testing_blobnouns():  # get phrases with nouns in them
        nounphrases = blob.noun_phrases
        randomphrase = random.choice(nounphrases)
        print(randomphrase)
    
    
    def find_words():  # search for words
        for word, tag in blob.tags:
            if "ai" in word:
                print(f"The part of speech of '{word}' is: {tag}")
    
    
    random_title()

WHEN YOU INSTALL MODULES: Always do pip install in terminal 

Fucking around in JavaScript and HTML, trying to remake song titles generator 


Basic HTML for running JS code 

<!DOCTYPE html>
<html lang="en">
<head>
    <title>Song title generator </title>
    <style>
        body { font-family: Arial, sans-serif; }
        h1 { color: #333; }
        .output { margin-top: 20px; }
    </style>
</head>
<body>
    <div class="output" id="output"></div>

    <script src="script.js"></script>
</body>
</html>

Reading file contents works successfully in HTML + JS 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Read Local File</title>
    <style>
        body { font-family: Arial, sans-serif; }
        .output { margin-top: 20px; }
    </style>
</head>
<body>
    <h1>Read Local File</h1>
    <div class="output" id="output"></div>

    <script>
        // Fetch the content of the file
        fetch('lyrics_unique.txt')
            .then(response => response.text())
            .then(data => {
                // Display the file content
                document.getElementById('output').innerText = data;

                // Process the content
                const words = data.split(/\s+/);
                console.log('File Content:', data);
                console.log('Words:', words);
            })
            .catch(error => console.error('Error fetching file:', error));
    </script>
</body>
</html>


HERE IS THE TEXT FILE TO SAVE: 

can't, Malibu, our, lay, TNA,, at, Your, think,, dick,, o-o-out,, I'm, DNA, up, pyramid, that, there's, day, ask, swallow, workin',, lot, in, know, when, Oh,, whole, Like,, give, lonelier, pout, addicted, said, gutter, scheme, Sean, call, while, see-through, swallow,, pout,, clear, swear,, They, top, Out, Baby,, think, clean, God, into, The, wanna, 12, is, my, well, I'll, but, missing, Malibu, Whoa,, Bel, light, Fall, It's, even, a, not, we, out, fuckin', And, your, lock, With, driving, of, do, on, You, let, Hello?, if, bottomed, Pretty, still, grind, yeah,, dressed, should, screws, I, How, eyelids, there, that's, chemicals, us, me,, unless, love?, out), A, dizzy, never, Sometimes,, forever?, so, fall,, fall, one, why, though, trip, dying, straight, steps, closed,, Make, caught, need, say, So, just, every, Yeah,, hell,, dreams), for, her, me, Boy, keeping, in), But, to, inside, it), coming, chemistry,, have, getting, love, two's, D-d-did, only, did, than, left, Don, down, key, 'Cause, (they, Well,, crooked, hope, where, staring, up?, B, found, (and, crime, see, baby,, deeper, singing, Air,, some, don't, the, B-baby,, stop, mighty, dreams, got, either, get, gutter, way, You're, missing,, or, and, how, eyes, girl,, dollar, you, it, climb, hell, two's, is, missing, but, So, it, I'm, steps, the, fall,, straight, if, eyelids, How, coming, don't, into, pout, top, pyramid, girl,, Fall, Don, screws, to, need, get, do, just, missing,, they, getting, left, dreams, have, know, You, whole, Your, can't, so, keeping, Sean, crooked, stop, mighty, only, did, ask, swallow, And, give, lonelier, Well,, Bel, Oh,, Malibu, singing, for, than, baby,, unless, dollar, scheme, call, on, B-baby,, her, crime, staring, our, TNA,, out), how, dizzy, me,, bottomed, in, at, The, some, gutter, got, found, clear, o-o-out,, though, there, us, Baby,, Yeah,, lock, key, said, love?, Out, With, up?, They, love, closed,, or, say, either, It's, 'Cause, never, dick,, hell, driving, dressed, DNA, let, Sometimes,, chemistry,, forever?, every, hope, up, Air,, trip, swallow,, and, D-d-did, when, workin',, gutter, well, yeah,, But, where, lay, You're, there's, Like,, think, still, my, A, me, fuckin', wanna, pout,, we, (Malibu), you, fall, in), inside, God, that, lot, should, addicted, together, and, caught, deeper, I'll, one, Whoa,, grind, way, see, even, Pretty, eyes, dying, not, dreams, of, why, chemicals, light, 12, that's, your, I, out, clean, climb, a, it), Hello?, swear,, see-through, while, think,, day, Make, hell,, down

THIS SHIT FUCKING WORKS - learn from it 



=============================
	HTML
=============================

<div id="output"></div>
<input type="text" id="inp">
<script src="script.js"></script>

=============================
	CSS
=============================


#inp {
  
  position: absolute;
  bottom: 30px;
}

#output {
  
  height: 250px;
  width: 300px;
  background-color: coral;
  color: purple;
  border-color: black;
  border-width: 2px;

overflow-x: hidden;
    overflow-y: hidden;
  font-family: Serif, Oswald, Anaheim, Comic-Sans;

}

=============================
		JS
=============================

//Coral to English translator
//Coral chat simulator

var output = document.getElementById("output");
var inp = document.getElementById("inp");

output.innerHTML="Welcome to the chat simulation";


document.addEventListener("keydown",function(){
if(event.key=="Enter"){
if(inp.value.includes("help")){
output.innerHTML+="<br> If you want to change the chat background color, type 'background' and any hexadecimal code."
}

if(inp.value.includes("background")&&inp.value.includes("#")){

var color = inp.value.split("#")[1];

output.style.background = "#"+ color;

output.innerHTML+="<br>Background color changed!";
}

if (inp.value.includes("math")){

if (inp.value.includes("+")){

var inp1 = inp.value.split();

inp1.splice("math");

var add1 = inp[1]
var add2 = inp[3]


output.innerHTML+=(inp1);

}


//trying to be able to type "Remember" and a phrase and have it remember everything I wrote after the word remember. 

}


}})



window.setInterval(function() {
 output.scrollTop += output.scrollHeight;
}, 5000);


/*function setFocusOnDivWithId(elementId) {
const scrollIntoViewOptions = { behavior: "smooth", block: "center" };
document.getElementById(elementId).scrollIntoView(scrollIntoViewOptions); 
}
setFocusOnDivWithId(elementId);

*/

Starting fresh with a new JS + HTML project, use previous code as reference  


PYTHON CODE TO LOOK AT AGAIN: 

final product version 1 - 

I have made something that I can genuinely enjoy using. I cannot fucking believe it. 

from textblob import TextBlob
import random

# Read the content of the file
with open('lyrics_unique.txt', 'r') as file:
    text = file.read()

# Convert all words in the text to lowercase
text = text.lower()
text = text.replace("\n", " ")
text = text.replace(",", "")

# Split the text into a list of words
lyrics = text.split()

# Combine the titles list with the list of words from the text
titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = titles + lyrics

# Join the combined list into a single string
FOB_string = ' '.join(FOB)

# Create a TextBlob object
blob = TextBlob(FOB_string)

# Initialize lists for different parts of speech
nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []
object_pronouns = [] # NOT USED YET - pronouns to start a sentence with, trying to see if this one will work with blobs
subject_pronouns = [] # NOT USED YET 
# actually this may need to be done manually but that's fine - organize as usual, then manually remove and append "we", "us", and "them"

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}

# Categorize words based on their parts of speech
for word, pos in blob.tags: 
    pos = custom_tags.get(word, pos)  # Use custom tags if available
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)


#def move_specific_word(): # function to move specific words
# I can use others.remove('bel') and others.remove('air)
# and then nouns.append('bel air') 
# and repeat for other words as needed
# 
# 
def move_specific_words():
    if 'll' in others and 'i' in adjectives:
        others.remove('ll')
        adjectives.remove('i')
        pronouns.append("I'll")
        print(pronouns)


    pronouns.remove('malibu') # if I already know the category then I don't need the if statement 
    
    # trying to separate pronouns into different categories so that the title will start with the right form
    # only start with ones like "we" and never "us"
    # need to create a new category for words I think, if blobs will handle it 

move_specific_words()

# Function to remove duplicates from lists
def remove_duplicates():
    def remove_duplicates_list(word_list):
        lowercase_list = [word.lower() for word in word_list]
        seen = set()
        unique_list = []
        for word in lowercase_list:
            if word not in seen:
                unique_list.append(word)
                seen.add(word)
        return unique_list

    global articles, pronouns, verbs, nouns, adjectives, adverbs, prepositions, conjunctions, others
    articles = remove_duplicates_list(articles)
    pronouns = remove_duplicates_list(pronouns)
    verbs = remove_duplicates_list(verbs)
    nouns = remove_duplicates_list(nouns)
    adjectives = remove_duplicates_list(adjectives)
    adverbs = remove_duplicates_list(adverbs)
    prepositions = remove_duplicates_list(prepositions)
    conjunctions = remove_duplicates_list(conjunctions)
    others = remove_duplicates_list(others)



# Call the function to remove duplicates
remove_duplicates()



def random_title(): 
    
    def true_random():

  
        a = random.choice(FOB) + " " + random.choice(FOB)
        b = random.choice(FOB)
        c = random.choice(FOB)
        d = random.choice(FOB)
        e = random.choice(FOB)
        

        
        fobcombo1 = ((a) + " " + (b))
        fobcombo2 = ((b) + " " + (c))
        fobcombo3 = ((c) + " " + (d))
        fobcombo4 = ((d) + " " + (e))
        fobcombo5 = ((b) + " " + (a))
        fobcombo6 = ((c) + " " + (d))
        fobcombo7 = ((e) + " " + (d))

        fobcombos = [fobcombo1, fobcombo2, fobcombo3, fobcombo4, fobcombo5, fobcombo6, fobcombo7]        
    
            
        fobcombo = random.choice(fobcombos)
        print(fobcombo)

    def random_rules_mode1():

    # BASE FUNCTION FOR RANDOM CHOICE - ARTICLE, ADJECTIVE, NOUN

        word1 = random.choice(articles + adjectives + nouns) # chooses either an article, adjective, or noun
        if word1 in articles: # if the first word is an article
            word2 = random.choice(nouns + adjectives) # then choose either a noun or adjective 
            if word2 in adjectives: # if the second word is an adjective 
                word3 = random.choice(nouns) # then the third word has to be a noun 
            elif word2 in nouns: 
                word3 = random.choice(nouns) # putting two nouns next to each other might not make sense but simpler for now  
        elif word1 in adjectives:
            word2 = random.choice(nouns)
            word3 = random.choice(verbs) # THREE VERBS IN A ROW MAKES SENSE - "live laugh love" or the unhinged
        elif word1 in nouns:              # version - "shoot love swallow"
            word2 = random.choice(verbs)
            word3 = random.choice(adjectives)    

        else:               # NEED TO ADD: elif word1 is adjective or noun   
            word2 = random.choice(nouns) # if the first word is not an article, word 2 is a noun
            word3 = random.choice(verbs) # word 3 is a verb, etc 

        fobcombo = ' '.join([word1, word2, word3])

 
        fobcombo = fobcombo.replace(",", "")
        print(fobcombo)
    
    def random_rules_mode2(): # PRONOUNS AND VERBS - might wanna make more complicated if/then statements to randomly land on different sentence structures
        word1 = random.choice(pronouns)
        word2 = random.choice(verbs)
        word3 = random.choice(prepositions)
        word4 = random.choice(articles)
        word5 = random.choice(nouns)
        
        
        fobcombo = ' '.join([word1, word2, word3, word4, word5])
        print(fobcombo)


    while True:
        mode = input("Options: \n 0. true random \n 1: mode 1 \n 2. mode 2\n Which mode? ")
        if mode=="true random" in mode or mode=="0":
            for i in range(10):
                true_random()

        elif mode=="mode 1" or mode=="1":
            for i in range(10):
                random_rules_mode1()
    
        elif mode=="mode 2" or mode=="2":
            for i in range(10):
                random_rules_mode2()  



def testing_blobnouns(): # get phrases with nouns in them 
    nounphrases = blob.noun_phrases
    randomphrase = random.choice(nounphrases)
    print(randomphrase)




def find_words(): # search for words 
    for word, tag in blob.tags:
        if "ai" in word:
            print(f"The part of speech of '{word}' is: {tag}")


random_title()

Javascript random choice + modify HTML

<div id="output">

</div>



function getRandomItem(array) {
  const randomIndex = Math.floor(Math.random() * array.length);
  return array[randomIndex];
}

// Example usage:
const myArray = ["apple", "banana", "cherry", "date"];
const randomElement = getRandomItem(myArray);

document.getElementById("output").innerHTML += randomElement;


Global variable - need access to file contents in other functions 

(not working yet)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fetch and Store File Content</title>
    <style>
        body { font-family: Arial, sans-serif; }
        .output { margin-top: 20px; }
    </style>
</head>
<body>
    <h1>Fetch and Store File Content</h1>
    <div class="output" id="output"></div>

    <script>
        // Global variable to store file content
        let fileContent = '';

        // Fetch the content of the file
        fetch('lyrics_unique.txt')
            .then(response => response.text())
            .then(data => {
                fileContent = data;
                console.log('File Content:', fileContent);

                // Display the file content
                document.getElementById('output').innerText = fileContent;
            })
            .catch(error => console.error('Error fetching file:', error));

        // Function to process the file content
        function processFileContent() {
            const words = fileContent.split(/\s+/);
            console.log('Words:', words);
            // Further processing can be done here
        }

        // Call the function to process the file content
        setTimeout(processFileContent, 1000); // Delay to ensure fetch completes
    </script>
</body>
</html>

Script.js

/*function random_title() {
  document.getElementById('output').innerText = words;
}

random_title();*/


// Global variable to store file content
let fileContent = '';


//document.getElementById('output').innerText = "words";

function getRandomItem(array) {
  const randomIndex = Math.floor(Math.random() * array.length);
  return array[randomIndex];
}

// Example usage:
const myArray = ["apple", "banana", "cherry", "date"];
const randomElement = getRandomItem(myArray);

//document.getElementById("output").innerHTML += randomElement;

fetch('lyrics_unique.txt')
.then(response => response.text())
.then(data => {


    fileContent = data;
    
    // Display the file content
    //document.getElementById('output').innerText += data; // put all contents of file into output

    // Process the content
    /*
    const words = data.split(/\s+/);
    console.log('File Content:', data);
    console.log('Words:', words); */
})
.catch(error => console.error('Error fetching file:', error));


//const words = data.split(/\s+/);


document.getElementById('output').innerText += fileContent;



//const lyrics = ["apple", "banana", "cherry", "date"]; // use later 
//const randomElement = getRandomItem(myArray);


Idk if this works or not, saving and reloading

/*function random_title() {
  document.getElementById('output').innerText = words;
}

random_title();*/


// Global variable to store file content
let fileContent = '';


//document.getElementById("output").innerHTML += randomElement;

fetch('lyrics_unique.txt')
.then(response => response.text())
.then(data => {


    fileContent = data;

//    document.getElementById('output').innerText += fileContent;


    
    // Display the file content
    //document.getElementById('output').innerText += data; // put all contents of file into output

    // Process the content
    /*
    const words = data.split(/\s+/);
    console.log('File Content:', data);
    console.log('Words:', words); */
})
.catch(error => console.error('Error fetching file:', error));

function processFileContent() {
    const words = fileContent.split(/\s+/);
   
    //document.getElementById('output').innerText += "trying to display contents of file"; // put all contents of file into output
    //document.getElementById('output').innerText += words; // put all contents of file into output
    
    console.log('Words:', words);
    // Further processing can be done here
}

processFileContent();

//const lyrics = ["apple", "banana", "cherry", "date"]; // use later 
//const randomElement = getRandomItem(myArray);

// yeah it was super fucked up and not loading anything at all until I refreshed

JavaScript successfully controls a variable in another function 

let fileContent = '';

// Fetch the content of the file
fetch('lyrics_unique.txt')
    .then(response => response.text())
    .then(data => {
        fileContent = data;
        console.log('File Content:', fileContent);

        // Display the file content
        document.getElementById('output').innerText = fileContent;
    })
    .catch(error => console.error('Error fetching file:', error));

// Function to process the file content
function processFileContent() {
    const words = fileContent.split(/\s+/);
    console.log('Words:', words);
    // Further processing can be done here
    
    document.getElementById('output').innerText = words;
    
}


function randomChoice() { // get random words from lyrics 
    
}

/*


function getRandomItem(array) {
  const randomIndex = Math.floor(Math.random() * array.length);
  return array[randomIndex];
}



*/



// Call the function to process the file content
setTimeout(processFileContent, 1000); // Delay to ensure fetch completes



Successfully shows a random word from text file in JavaScript and HTML

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fetch and Store File Content</title>
    <style>
        body { font-family: Arial, sans-serif; }
        .output { margin-top: 20px; }
    </style>
</head>


    
<body>
    <h1>Fetch and Store File Content</h1>
    <div class="output" id="output"></div>

<script src="script.js"></script>
</body>


    <style>
        body { font-family: Arial, sans-serif; }
        .output { margin-top: 20px; }
    </style>

    <button onclick="showRandomWord()">Show Random Word</button>



    
</html>


Script.js

let fileContent = '';

// Fetch the content of the file
fetch('lyrics_unique.txt')
    .then(response => response.text())
    .then(data => {
        fileContent = data;
       // console.log('File Content:', fileContent);

        // Display the file content
       // document.getElementById('output').innerText = fileContent;
    })
    .catch(error => console.error('Error fetching file:', error));

// Function to process the file content
function processFileContent() {
    const words = fileContent.split(/\s+/);
  //  console.log('Words:', words);
    // Further processing can be done here
    
   // document.getElementById('output').innerText = words;
    
}


//function randomChoice() { // get random words from lyrics 
    
//}

/*


function getRandomItem(array) {
  const randomIndex = Math.floor(Math.random() * array.length);
  return array[randomIndex];
}

*/

// Call the function to process the file content



function showRandomWord() {
    if (fileContent) {
        const words = fileContent.split(/\s+/);  // Split the content into words
        const randomWord = words[Math.floor(Math.random() * words.length)];  // Choose a random word
        document.getElementById('output').innerText = randomWord;  // Add the random word to the innerHTML
    }
}


setTimeout(processFileContent, 1000); // Delay to ensure fetch completes

showRandomWord();


Buttons to show one random word or two!!!!!!!


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fetch and Store File Content</title>
    <style>
        body { font-family: Arial, sans-serif; }
        .output { margin-top: 20px; }
    </style>
</head>


    
<body>
    <h1>Fetch and Store File Content</h1>
    <div class="output" id="output"></div>
    

<script src="script.js"></script>
</body>


    <style>
        body { font-family: Arial, sans-serif; }
        .output { margin-top: 20px; }
    </style>

    <button onclick="showRandomWord()">Show Random Word</button>
    <button onclick="twowords()">Show two random words</button>



    
</html>

Script.js


let fileContent = '';

// Fetch the content of the file
fetch('lyrics_unique.txt')
    .then(response => response.text())
    .then(data => {
        fileContent = data;
       // console.log('File Content:', fileContent);

        // Display the file content
       // document.getElementById('output').innerText = fileContent;
    })
    .catch(error => console.error('Error fetching file:', error));

// Function to process the file content
function processFileContent() {
    const words = fileContent.split(/\s+/);
  //  console.log('Words:', words);
    // Further processing can be done here

   // document.getElementById('output').innerText = words;

}


//function randomChoice() { // get random words from lyrics 

//}

/*


function getRandomItem(array) {
  const randomIndex = Math.floor(Math.random() * array.length);
  return array[randomIndex];
}

*/

// Call the function to process the file content



function showRandomWord() {
    if (fileContent) {
        const words = fileContent.split(/\s+/);  // Split the content into words
        const randomWord = words[Math.floor(Math.random() * words.length)];  // Choose a random word
        document.getElementById('output').innerText = randomWord;  // Add the random word to the innerHTML


    


        
    }
}



function twowords() {
    if (fileContent) {
        const words = fileContent.split(/\s+/);  // Split the content into words
        const randomWord1 = words[Math.floor(Math.random() * words.length)];  // Choose a random word
        const randomWord2 = words[Math.floor(Math.random() * words.length)];  // Choose a random word

        const randomWords = randomWord1 + " " + randomWord2;
        
        document.getElementById('output').innerText = randomWords;  // Add the random word to the innerHTML






    }
}





setTimeout(processFileContent, 1000); // Delay to ensure fetch completes

showRandomWord();

Current JS & HTML version

remove commas and duplicates through a Python script, must remake/find code that created lyrics_unique.txt


Oh my god I did save it, so I have a way to create text files with unique words, and maybe there’s an easy way to remove commas and then write to the text file. So much easier in python than JavaScript. 


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fetch and Store File Content</title>
    <style>
        body { font-family: Arial, sans-serif; }
        .output { margin-top: 20px; }
    </style>
</head>


    
<body>
    <h1>Fetch and Store File Content</h1>
    <div class="output" id="output"></div>
    

<script src="script.js"></script>
</body>


    <style>
        body { font-family: Arial, sans-serif; }
        .output { margin-top: 20px; }
    </style>

    <button onclick="showRandomWord()">Show Random Word</button>
    <button onclick="twowords()">Show two random words</button>



    
</html>


JS

let fileContent = '';

// Fetch the content of the file
fetch('lyrics_unique.txt')
    .then(response => response.text())
    .then(data => {
        fileContent = data;
       // console.log('File Content:', fileContent);

        // Display the file content
       // document.getElementById('output').innerText = fileContent;
    })
    .catch(error => console.error('Error fetching file:', error));

// Function to process the file content
function processFileContent() {
    const words = fileContent.split(/\s+/);
  //  console.log('Words:', words);
    // Further processing can be done here

   // document.getElementById('output').innerText = words;

}


//function randomChoice() { // get random words from lyrics 

//}

/*


function getRandomItem(array) {
  const randomIndex = Math.floor(Math.random() * array.length);
  return array[randomIndex];
}

*/

// Call the function to process the file content



function showRandomWord() {
    if (fileContent) {
        const words = fileContent.split(/\s+/);  // Split the content into words
        const randomWord = words[Math.floor(Math.random() * words.length)];  // Choose a random word
        document.getElementById('output').innerText = randomWord;  // Add the random word to the innerHTML

        
    }
}



function twowords() {
    if (fileContent) {
        //const words = fileContent.split(/\s+/);  // Split the content into words
    /*
        const words = fileContent;        
        
        const randomWord1 = words[Math.floor(Math.random() * words.length)];  // Choose a random word
        const randomWord2 = words[Math.floor(Math.random() * words.length)];  // Choose a random word

        const randomWords = randomWord1 + " " + randomWord2;
        
        document.getElementById('output').innerText = randomWords;  // Add the random word to the innerHTML

*/


        const words = fileContent.split(/\s+/);  // Split the content into words

        
        const randomWord1 = words[Math.floor(Math.random() * words.length)];  // Choose a random word

    const randomWord2 = words[Math.floor(Math.random() * words.length)];  // Choose a random word


        const randomWords = randomWord1 + " " + randomWord2;
        
        document.getElementById('output').innerText = randomWords;  // Add the random word to the innerHTML




        
    }
}





setTimeout(processFileContent, 1000); // Delay to ensure fetch completes




editing text files with python 

'''# I think this works, testing original code first 
    for i in range(len(unique_words)):
        if ", " in unique_words[i]":
            unique_words[i] = unique_words[i].replace(", ", "")
'''


Trying to replace commas 

with open('lyrics_unique.txt', 'r') as file:
	# Read the content of the file
	text = file.read()

# Split the text into a list of words
words = text.split()

unique_words = list(set(words))


unique_words = str(unique_words)

for i in range(len(unique_words) -1):
	if unique_words[i] == ",":
		unique_words = unique_words[:i] + unique_words[i+1:]
		# need to remove commas
		

file_path = "lyrics_unique.txt"
#text_to_add = my_string



with open(file_path, "w") as file:
	file.write(newtext)
	
print(f"Text added to '{file_path}' successfully.")




with open('lyrics_unique.txt', 'r') as file:
	# Read the content of the file
	text = file.read()
	print("file contents: ", text)




SUCCESSFULLY REMOVES COMMAS 

# Read the content of the file
with open('lyrics_unique.txt', 'r') as file:
		text = file.read()

# Remove all commas from the text
text = text.replace(',', '')

# Write the modified text back to the file
with open('lyrics_unique.txt', 'w') as file:
		file.write(text)

print("Commas removed and text updated in 'lyrics_unique.txt' successfully.")

# Read and print the updated content of the file
with open('lyrics_unique.txt', 'r') as file:
		text = file.read()
		print("Updated file contents:", text)

Lyrics_unique.txt no commas:

can't (Malibu) our lay TNA at Your think dick o-o-out I'm DNA up pyramid that there's day ask swallow workin' lot in know when Oh whole Like give lonelier pout addicted said gutter scheme Sean call (while see-through swallow pout clear swear They top Out Baby think clean God into The wanna 12 is my well I'll but missing Malibu? Whoa Bel light Fall It's even a not we out fuckin' And your lock With driving of do on You let Hello? if bottomed Pretty still grind yeah dressed should screws I How eyelids there that's chemicals us me unless love? out) A dizzy never Sometimes forever? so fall fall one why though trip dying straight steps closed Make caught need say So just every Yeah hell dreams) for her me Boy keeping in) But to inside it) coming chemistry have getting love two's D-d-did only did than left Don down key 'Cause (they Well crooked hope where staring up? B found (and crime see baby deeper singing Air some don't the B-baby stop mighty dreams got either get (gutter way You're missing or and how eyes girl dollar you it climb hell together


Opens and overwrites file, removes duplicates 

with open('lyrics.txt', 'r') as file:
	# Read the content of the file
	text = file.read()

# Split the text into a list of words
words = text.split()

unique_words = list(set(words))

my_string = " ".join(unique_words)
print(my_string)

file_path = "lyrics.txt"
newtext = my_string

with open(file_path, "w") as file:
	file.write(newtext)

print(f"Text changed in '{file_path}' successfully.")

Updated version - remove duplicates 

from removewords import removeWords

with open('lyrics.txt', 'r') as file:
	# Read the content of the file
	text = file.read()

# Split the text into a list of words
words = text.split()

unique_words = list(set(words))

#for i in range(len(words)):
	

seen = set()
unique_articles = []
i = 0
while i < len(words):
	if words[i] not in seen:
		unique_articles.append(words[i])
		seen.add(words[i])
		i += 1


my_string = " ".join(unique_words)
print(my_string)

file_path = "lyrics_unique.txt"
newtext = my_string

with open(file_path, "w") as file:
	file.write(newtext)

print(f"Text changed in '{file_path}' successfully.")


removeWords()


Updated version - remove commas 

def removeWords():

        # Read the content of the file
        with open('lyrics_unique.txt', 'r') as file:
                        text = file.read()

        # Remove all commas from the text
        text = text.replace(',', '')

        # Write the modified text back to the file
        with open('lyrics_unique.txt', 'w') as file:
                        file.write(text)

        print("Commas removed and text updated in 'lyrics_unique.txt' successfully.")

        # Read and print the updated content of the file
        with open('lyrics_unique.txt', 'r') as file:
                        text = file.read()
                        print("Updated file contents:", text)

        

No commas and no duplicates - the result 

One issue is I forgot to lower() all of the words so it did actually miss the word “the” which was capitalized one and lowercased another time

only up? Out on do Pretty Malibu a Hello? have either it yeah dying I gutter addicted where unless clean for down climb getting swear crime said key but there lonelier even is Yeah when Baby see So You're dreams Boy Bel missing I'm bottomed light see-through day Like God TNA two's not her eyelids left workin' A staring well your Fall closed Your say stop that's dreams if With never in dressed They How scheme why fuckin' out chemistry way clear hope out 12 wanna Sometimes dick pout lot though coming baby lay need than we don't 'Cause I'll they did lock love in eyes It's there's But just And us whole o-o-out hell forever? dollar deeper straight ask of my found screws B got top up driving can't Sean call our inside pyramid that to B-baby gutter should The grind how me steps know caught and dizzy get girl mighty fall it DNA still at one crooked Malibu think Oh (while some keeping together trip or Air let (and give into D-d-did love? the Make singing every Don so chemicals You you swallow Whoa Well

JavaScript - choose random words and display them 

let fileContent = '';

// Fetch the content of the file
fetch('lyrics_unique.txt')
    .then(response => response.text())
    .then(data => {
        fileContent = data;
       // console.log('File Content:', fileContent);

        // Display the file content
       // document.getElementById('output').innerText = fileContent;
    })
    .catch(error => console.error('Error fetching file:', error));

// Function to process the file content
function processFileContent() {
    const words = fileContent.split(/\s+/);
  //  console.log('Words:', words);
    // Further processing can be done here

   // document.getElementById('output').innerText = words;

}


//function randomChoice() { // get random words from lyrics 

//}

/*


function getRandomItem(array) {
  const randomIndex = Math.floor(Math.random() * array.length);
  return array[randomIndex];
}

*/

// Call the function to process the file content



function showRandomWord() {
    if (fileContent) {
        const words = fileContent.split(/\s+/);  // Split the content into words
        const randomWord = words[Math.floor(Math.random() * words.length)];  // Choose a random word
        document.getElementById('output').innerText = randomWord;  // Add the random word to the innerHTML

        
    }
}



function twowords() {
    if (fileContent) {
        //const words = fileContent.split(/\s+/);  // Split the content into words
    /*
        const words = fileContent;        
        
        const randomWord1 = words[Math.floor(Math.random() * words.length)];  // Choose a random word
        const randomWord2 = words[Math.floor(Math.random() * words.length)];  // Choose a random word

        const randomWords = randomWord1 + " " + randomWord2;
        
        document.getElementById('output').innerText = randomWords;  // Add the random word to the innerHTML

*/


        const words = fileContent.split(/\s+/);  // Split the content into words

        
        const randomWord1 = words[Math.floor(Math.random() * words.length)];  // Choose a random word

    const randomWord2 = words[Math.floor(Math.random() * words.length)];  // Choose a random word


        const randomWords = randomWord1 + " " + randomWord2;
        
        document.getElementById('output').innerText = randomWords;  // Add the random word to the innerHTML




        
    }
}





setTimeout(processFileContent, 1000); // Delay to ensure fetch completes

Need ways to organize words into parts of speech in JS - should I make a python program, run the text through it each time, and manually enter the result into the JS?

Oh my god I have an idea: python program takes the words that are in a specific word group, writes them into a text file, then JS uses words from that text file. But the Python and JS would need to be in the same directory, I think. I could just have a text file ready to go in the JS, and then go through the process in python and manually copy and paste the result into the text file, but not directly into the code. I think it’ll be more efficient that way.

So these are the steps:
organize words into groups in Python 
write the results to a text file
copy + paste results into a text file in the JS directory 
JS takes the text from file and randomly finds words from it 

Better python for the song title generator 

from textblob import TextBlob
import random

# Read the content of the file
with open('lyrics_unique.txt', 'r') as file:
    text = file.read()

# Convert all words in the text to lowercase
text = text.lower()
text = text.replace("\n", " ")
text = text.replace(",", "")

# Split the text into a list of words
lyrics = text.split()

# Combine the titles list with the list of words from the text
titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = titles + lyrics

# Join the combined list into a single string
FOB_string = ' '.join(FOB)

# Create a TextBlob object
blob = TextBlob(FOB_string)

# Initialize lists for different parts of speech
nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []
object_pronouns = [] # NOT USED YET - pronouns to start a sentence with, trying to see if this one will work with blobs
subject_pronouns = [] # NOT USED YET 
# actually this may need to be done manually but that's fine - organize as usual, then manually remove and append "we", "us", and "them"

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}

# Categorize words based on their parts of speech
for word, pos in blob.tags: 
    pos = custom_tags.get(word, pos)  # Use custom tags if available
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)


#def move_specific_word(): # function to move specific words
# I can use others.remove('bel') and others.remove('air)
# and then nouns.append('bel air') 
# and repeat for other words as needed
# 
# 
def move_specific_words():
    if 'll' in others and 'i' in adjectives:
        others.remove('ll')
        adjectives.remove('i')
        pronouns.append("I'll")
        print(pronouns)


    pronouns.remove('malibu') # if I already know the category then I don't need the if statement 
    
    # trying to separate pronouns into different categories so that the title will start with the right form
    # only start with ones like "we" and never "us"
    # need to create a new category for words I think, if blobs will handle it 


# Function to remove duplicates from lists
def remove_duplicates():
    def remove_duplicates_list(word_list):
        lowercase_list = [word.lower() for word in word_list]
        seen = set()
        unique_list = []
        for word in lowercase_list:
            if word not in seen:
                unique_list.append(word)
                seen.add(word)
        return unique_list

    global articles, pronouns, verbs, nouns, adjectives, adverbs, prepositions, conjunctions, others
    articles = remove_duplicates_list(articles)
    pronouns = remove_duplicates_list(pronouns)
    verbs = remove_duplicates_list(verbs)
    nouns = remove_duplicates_list(nouns)
    adjectives = remove_duplicates_list(adjectives)
    adverbs = remove_duplicates_list(adverbs)
    prepositions = remove_duplicates_list(prepositions)
    conjunctions = remove_duplicates_list(conjunctions)
    others = remove_duplicates_list(others)



# Call the function to remove duplicates



def random_title(): 
    
    def true_random():

  
        a = random.choice(FOB) + " " + random.choice(FOB)
        b = random.choice(FOB)
        c = random.choice(FOB)
        d = random.choice(FOB)
        e = random.choice(FOB)
        

        
        fobcombo1 = ((a) + " " + (b))
        fobcombo2 = ((b) + " " + (c))
        fobcombo3 = ((c) + " " + (d))
        fobcombo4 = ((d) + " " + (e))
        fobcombo5 = ((b) + " " + (a))
        fobcombo6 = ((c) + " " + (d))
        fobcombo7 = ((e) + " " + (d))

        fobcombos = [fobcombo1, fobcombo2, fobcombo3, fobcombo4, fobcombo5, fobcombo6, fobcombo7]        
    
            
        fobcombo = random.choice(fobcombos)
        print(fobcombo)

    def random_rules_mode1():

    # BASE FUNCTION FOR RANDOM CHOICE - ARTICLE, ADJECTIVE, NOUN

        word1 = random.choice(articles + adjectives + nouns) # chooses either an article, adjective, or noun
        if word1 in articles: # if the first word is an article
            word2 = random.choice(nouns + adjectives) # then choose either a noun or adjective 
            if word2 in adjectives: # if the second word is an adjective 
                word3 = random.choice(nouns) # then the third word has to be a noun 
            elif word2 in nouns: 
                word3 = random.choice(nouns) # putting two nouns next to each other might not make sense but simpler for now  
        elif word1 in adjectives:
            word2 = random.choice(nouns)
            word3 = random.choice(verbs) # THREE VERBS IN A ROW MAKES SENSE - "live laugh love" or the unhinged
        elif word1 in nouns:              # version - "shoot love swallow"
            word2 = random.choice(verbs)
            word3 = random.choice(adjectives)    

        else:               # NEED TO ADD: elif word1 is adjective or noun   
            word2 = random.choice(nouns) # if the first word is not an article, word 2 is a noun
            word3 = random.choice(verbs) # word 3 is a verb, etc 

        fobcombo = ' '.join([word1, word2, word3])

 
        fobcombo = fobcombo.replace(",", "")
        print(fobcombo)
    
    def random_rules_mode2(): # PRONOUNS AND VERBS - might wanna make more complicated if/then statements to randomly land on different sentence structures
        word1 = random.choice(pronouns)
        word2 = random.choice(verbs)
        word3 = random.choice(prepositions)
        word4 = random.choice(articles)
        word5 = random.choice(nouns)
        
        
        fobcombo = ' '.join([word1, word2, word3, word4, word5])
        print(fobcombo)


    while True:
        mode = input("Options: \n 0. true random \n 1: mode 1 \n 2. mode 2\n Which mode? ")
        if mode=="true random" in mode or mode=="0":
            for i in range(10):
                true_random()

        elif mode=="mode 1" or mode=="1":
            for i in range(10):
                random_rules_mode1()
    
        elif mode=="mode 2" or mode=="2":
            for i in range(10):
                random_rules_mode2()  



def testing_blobnouns(): # get phrases with nouns in them 
    nounphrases = blob.noun_phrases
    randomphrase = random.choice(nounphrases)
    print(randomphrase)




def find_words(): # search for words 
    for word, tag in blob.tags:
        if "ai" in word:
            print(f"The part of speech of '{word}' is: {tag}")


random_title()


Latest versions of everything, working perfectly 2/24


RemoveDuplicates.py

with open('lyrics_unique.txt', 'r') as file:
    # Read the content of the file
    text = file.read()

# Split the text into a list of words
words = text.split()

unique_words = list(set(words))

my_string = " ".join(unique_words)
print(my_string)

file_path = "lyrics_unique.txt"
newtext = my_string

with open(file_path, "w") as file:
    file.write(newtext)

print(f"Text changed in '{file_path}' successfully.")


RemoveWords.py

def removeWords():

        # Read the content of the file
        with open('lyrics.txt', 'r') as file:
                        text = file.read()

        # Remove all commas from the text
        text = text.replace(',', '')

        # Write the modified text back to the file
        with open('lyrics_unique.txt', 'w') as file:
                        file.write(text)

        print("Commas removed and text updated in 'lyrics_unique.txt' successfully.")

        # Read and print the updated content of the file
        with open('lyrics_unique.txt', 'r') as file:
                        text = file.read()
                        print("Updated file contents:", text)

        
removeWords()

songtitlegen.py

from textblob import TextBlob
import random

# Read the content of the file
with open('lyrics_unique.txt', 'r') as file:
    text = file.read()

# Convert all words in the text to lowercase
text = text.lower()
text = text.replace("\n", " ")
text = text.replace(",", "")

# Split the text into a list of words
lyrics = text.split()

# Combine the titles list with the list of words from the text
titles = ['20','Dollar','Nose','Bleed','7','Minutes','In','Heaven','Church','Sunshine','Riptide','Bishops','Knife','Trick','The','Mighty','Fall','Death','Valley','The','Kids','Arent','Alright','She\'s','My','Winona','The','Takes','Over','The','Breaks','Over','Don\'t','You','Know','Who','I','Think','I','Am','?','The','After','Life','Of','The','Party','Its','Hard','To','Say','I','Do','When','I ','Don\'t','Back','To','Earth','Grand','Theft','Autumn','/','Where','Is','Your','Boy','Get','Busy','Living','Or','Get','Busy','Dying','Do','Your','Part','To','Save','The','Scene','and','Stop','Going','To','Shows','Saturday','A','Little','Less','Sixteen','Candles','A','Little','More','Touch','Me','Twin','Skeletons','Hotel','In','NYC','I','Don\'t','Care','Sugar','We\'re','Going','Down','Dance','Dance','My','Songs','Know','What','You','Did','In','The','Dark','Light','Em','Up','Young','Volcanoes','Alone','Together','Centuries','Stay','Frosty','Royal','Milk','Tea','The','Pheonix','Wilson','Expensive','Mistakes','The','Last','Of','The','Real','Ones','Thanks','For','The','Memories','Immortals','Irresistible','Young','And','Menace','Champion','Just','One','Yesterday','This','Ain\'t','A','Scene','It\'s','An','Arms','Race','Where','Did','The','Party','Go','Save','Rock','And','Roll','Fourth','Of','July','Sophomore','Slump','Or','Comeback','Of','The','Year','The','Shipped','Gold','Standard','7','Minutes','In','Heaven','Hum','Hallelujah','Dear', 'Future','Self','Hands','Up','XO','27','Run','Dry','Explode','I\'m','Like','A','Lawyer','With','The','Way','I\'m','Always','Trying','To','Get','You','Off','Tell','That','Mick','He','Just','Made','My','List','Of','Things','To','Do','Today','Yule','Shoot','Your','Eye','Out','What','A','Catch','Donnie']
FOB = titles + lyrics

# Join the combined list into a single string
FOB_string = ' '.join(FOB)

# Create a TextBlob object
blob = TextBlob(FOB_string)

# Initialize lists for different parts of speech
nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []
object_pronouns = [] # NOT USED YET - pronouns to start a sentence with, trying to see if this one will work with blobs
subject_pronouns = [] # NOT USED YET 
# actually this may need to be done manually but that's fine - organize as usual, then manually remove and append "we", "us", and "them"

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}

# Categorize words based on their parts of speech
for word, pos in blob.tags: 
    pos = custom_tags.get(word, pos)  # Use custom tags if available
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)


#def move_specific_word(): # function to move specific words
# I can use others.remove('bel') and others.remove('air)
# and then nouns.append('bel air') 
# and repeat for other words as needed
# 
# 
def move_specific_words():
    if 'll' in others and 'i' in adjectives:
        others.remove('ll')
        adjectives.remove('i')
        pronouns.append("I'll")
        print(pronouns)


    pronouns.remove('malibu') # if I already know the category then I don't need the if statement 
    
    # trying to separate pronouns into different categories so that the title will start with the right form
    # only start with ones like "we" and never "us"
    # need to create a new category for words I think, if blobs will handle it 


# Function to remove duplicates from lists
def remove_duplicates():
    def remove_duplicates_list(word_list):
        lowercase_list = [word.lower() for word in word_list]
        seen = set()
        unique_list = []
        for word in lowercase_list:
            if word not in seen:
                unique_list.append(word)
                seen.add(word)
        return unique_list

    global articles, pronouns, verbs, nouns, adjectives, adverbs, prepositions, conjunctions, others
    articles = remove_duplicates_list(articles)
    pronouns = remove_duplicates_list(pronouns)
    verbs = remove_duplicates_list(verbs)
    nouns = remove_duplicates_list(nouns)
    adjectives = remove_duplicates_list(adjectives)
    adverbs = remove_duplicates_list(adverbs)
    prepositions = remove_duplicates_list(prepositions)
    conjunctions = remove_duplicates_list(conjunctions)
    others = remove_duplicates_list(others)



# Call the function to remove duplicates



def random_title(): 
    
    def true_random():

  
        a = random.choice(FOB) + " " + random.choice(FOB)
        b = random.choice(FOB)
        c = random.choice(FOB)
        d = random.choice(FOB)
        e = random.choice(FOB)
        

        
        fobcombo1 = ((a) + " " + (b))
        fobcombo2 = ((b) + " " + (c))
        fobcombo3 = ((c) + " " + (d))
        fobcombo4 = ((d) + " " + (e))
        fobcombo5 = ((b) + " " + (a))
        fobcombo6 = ((c) + " " + (d))
        fobcombo7 = ((e) + " " + (d))

        fobcombos = [fobcombo1, fobcombo2, fobcombo3, fobcombo4, fobcombo5, fobcombo6, fobcombo7]        
    
            
        fobcombo = random.choice(fobcombos)
        print(fobcombo)

    def random_rules_mode1():

    # BASE FUNCTION FOR RANDOM CHOICE - ARTICLE, ADJECTIVE, NOUN

        word1 = random.choice(articles + adjectives + nouns) # chooses either an article, adjective, or noun
        if word1 in articles: # if the first word is an article
            word2 = random.choice(nouns + adjectives) # then choose either a noun or adjective 
            if word2 in adjectives: # if the second word is an adjective 
                word3 = random.choice(nouns) # then the third word has to be a noun 
            elif word2 in nouns: 
                word3 = random.choice(nouns) # putting two nouns next to each other might not make sense but simpler for now  
        elif word1 in adjectives:
            word2 = random.choice(nouns)
            word3 = random.choice(verbs) # THREE VERBS IN A ROW MAKES SENSE - "live laugh love" or the unhinged
        elif word1 in nouns:              # version - "shoot love swallow"
            word2 = random.choice(verbs)
            word3 = random.choice(adjectives)    

        else:               # NEED TO ADD: elif word1 is adjective or noun   
            word2 = random.choice(nouns) # if the first word is not an article, word 2 is a noun
            word3 = random.choice(verbs) # word 3 is a verb, etc 

        fobcombo = ' '.join([word1, word2, word3])

 
        fobcombo = fobcombo.replace(",", "")
        print(fobcombo)
    
    def random_rules_mode2(): # PRONOUNS AND VERBS - might wanna make more complicated if/then statements to randomly land on different sentence structures
        word1 = random.choice(pronouns)
        word2 = random.choice(verbs)
        word3 = random.choice(prepositions)
        word4 = random.choice(articles)
        word5 = random.choice(nouns)
        
        
        fobcombo = ' '.join([word1, word2, word3, word4, word5])
        print(fobcombo)


    while True:
        mode = input("Options: \n 0. true random \n 1: mode 1 \n 2. mode 2\n Which mode? ")
        if mode=="true random" in mode or mode=="0":
            for i in range(10):
                true_random()

        elif mode=="mode 1" or mode=="1":
            for i in range(10):
                random_rules_mode1()
    
        elif mode=="mode 2" or mode=="2":
            for i in range(10):
                random_rules_mode2()  



def testing_blobnouns(): # get phrases with nouns in them 
    nounphrases = blob.noun_phrases
    randomphrase = random.choice(nounphrases)
    print(randomphrase)




def find_words(): # search for words 
    for word, tag in blob.tags:
        if "ai" in word:
            print(f"The part of speech of '{word}' is: {tag}")


random_title()


NEXT IDEAS 

more specific rules for generating titles, additional modes 
write a script for categorizing words into parts of speech and writing each group to a text file, then use in JS 
find ways to make songtitlegen.js better, maybe ask AI
more interaction in the console/message box, maybe tell it which file I want to import and then use the input as a way to get the text file name 


OrganizeWords.py - put words in categories and write to text file

from textblob import TextBlob
import random


#### CHANGE THIS CODE TO ORGANIZE WORDS IN PARTS OF SPEECH AND WRITE IT TO A TEXT FILE ####

# Read the content of the file
with open('lyrics.txt', 'r') as file:
    text = file.read()

# Convert all words in the text to lowercase
text = text.lower()
text = text.replace("\n", " ")
text = text.replace(",", "")

# Split the text into a list of words
lyrics = text.split()

# Combine the titles list with the list of words from the text

FOB = lyrics

# Join the combined list into a single string
FOB_string = ' '.join(FOB)

# Create a TextBlob object
blob = TextBlob(FOB_string)

# Initialize lists for different parts of speech
nouns = []
verbs = []
adjectives = []
adverbs = []
pronouns = []
prepositions = []
conjunctions = []
others = []
articles = []
object_pronouns = [] # NOT USED YET - pronouns to start a sentence with, trying to see if this one will work with blobs
subject_pronouns = [] # NOT USED YET 
# actually this may need to be done manually but that's fine - organize as usual, then manually remove and append "we", "us", and "them"

# Custom dictionary for manual tags
custom_tags = {
    "DNA": "NN",         # Noun
    "TNA": "NN",         # Noun
    "dick": "NN",
    "workin'": "VB",     # Verb (informal form)
    "fuckin'": "VB",
    "gen": "NN",     # Verb (informal form) - I specifically wanted to add this word, will need to do custom ones manually in the future but that's fine 
    "see-through": "JJ", # Adjective

    # maybe create a tag for words that I want to have a higher priority when being chosen, and increase the chances of putting one of those words in the title

    # Add more custom tags as needed
}

# Categorize words based on their parts of speech
for word, pos in blob.tags: 
    pos = custom_tags.get(word, pos)  # Use custom tags if available
    if pos.startswith('NN'):
        nouns.append(word)
    elif pos.startswith('VB'):
        verbs.append(word)
    elif pos.startswith('JJ'):
        adjectives.append(word)
    elif pos.startswith('RB'):
        adverbs.append(word)
    elif pos == 'PRP':
        pronouns.append(word)
    elif pos == 'IN':
        prepositions.append(word)
    elif pos == 'CC':
        conjunctions.append(word)
    elif pos == 'DT':  # Articles are often tagged as determiners (DT)
        articles.append(word)    
    else:
        others.append(word)


#def move_specific_word(): # function to move specific words
# I can use others.remove('bel') and others.remove('air)
# and then nouns.append('bel air') 
# and repeat for other words as needed
# 
# 
def move_specific_words():
    if 'll' in others and 'i' in adjectives:
        others.remove('ll')
        adjectives.remove('i')
        pronouns.append("I'll")
        print(pronouns)


    pronouns.remove('malibu') # if I already know the category then I don't need the if statement 
    
    # trying to separate pronouns into different categories so that the title will start with the right form
    # only start with ones like "we" and never "us"
    # need to create a new category for words I think, if blobs will handle it 


# Function to remove duplicates from lists
def remove_duplicates():
    def remove_duplicates_list(word_list):
        lowercase_list = [word.lower() for word in word_list]
        seen = set()
        unique_list = []
        for word in lowercase_list:
            if word not in seen:
                unique_list.append(word)
                seen.add(word)
        return unique_list

    global articles, pronouns, verbs, nouns, adjectives, adverbs, prepositions, conjunctions, others
    articles = remove_duplicates_list(articles)
    pronouns = remove_duplicates_list(pronouns)
    verbs = remove_duplicates_list(verbs)
    nouns = remove_duplicates_list(nouns)
    adjectives = remove_duplicates_list(adjectives)
    adverbs = remove_duplicates_list(adverbs)
    prepositions = remove_duplicates_list(prepositions)
    conjunctions = remove_duplicates_list(conjunctions)
    others = remove_duplicates_list(others)



# Call the function to remove duplicates



def random_title(): 
    
    def true_random():

  
        a = random.choice(FOB) + " " + random.choice(FOB)
        b = random.choice(FOB)
        c = random.choice(FOB)
        d = random.choice(FOB)
        e = random.choice(FOB)
        

        
        fobcombo1 = ((a) + " " + (b))
        fobcombo2 = ((b) + " " + (c))
        fobcombo3 = ((c) + " " + (d))
        fobcombo4 = ((d) + " " + (e))
        fobcombo5 = ((b) + " " + (a))
        fobcombo6 = ((c) + " " + (d))
        fobcombo7 = ((e) + " " + (d))

        fobcombos = [fobcombo1, fobcombo2, fobcombo3, fobcombo4, fobcombo5, fobcombo6, fobcombo7]        
    
            
        fobcombo = random.choice(fobcombos)
        print(fobcombo)

    def random_rules_mode1():

    # BASE FUNCTION FOR RANDOM CHOICE - ARTICLE, ADJECTIVE, NOUN

        word1 = random.choice(articles + adjectives + nouns) # chooses either an article, adjective, or noun
        if word1 in articles: # if the first word is an article
            word2 = random.choice(nouns + adjectives) # then choose either a noun or adjective 
            if word2 in adjectives: # if the second word is an adjective 
                word3 = random.choice(nouns) # then the third word has to be a noun 
            elif word2 in nouns: 
                word3 = random.choice(nouns) # putting two nouns next to each other might not make sense but simpler for now  
        elif word1 in adjectives:
            word2 = random.choice(nouns)
            word3 = random.choice(verbs) # THREE VERBS IN A ROW MAKES SENSE - "live laugh love" or the unhinged
        elif word1 in nouns:              # version - "shoot love swallow"
            word2 = random.choice(verbs)
            word3 = random.choice(adjectives)    

        else:               # NEED TO ADD: elif word1 is adjective or noun   
            word2 = random.choice(nouns) # if the first word is not an article, word 2 is a noun
            word3 = random.choice(verbs) # word 3 is a verb, etc 

        fobcombo = ' '.join([word1, word2, word3])

 
        fobcombo = fobcombo.replace(",", "")
        print(fobcombo)
    
    def random_rules_mode2(): # PRONOUNS AND VERBS - might wanna make more complicated if/then statements to randomly land on different sentence structures
        word1 = random.choice(pronouns)
        word2 = random.choice(verbs)
        word3 = random.choice(prepositions)
        word4 = random.choice(articles)
        word5 = random.choice(nouns)
        
        
        fobcombo = ' '.join([word1, word2, word3, word4, word5])
        print(fobcombo)


    while True:
        mode = input("Options: \n 0. true random \n 1: mode 1 \n 2. mode 2\n Which mode? ")
        if mode=="true random" in mode or mode=="0":
            for i in range(10):
                true_random()

        elif mode=="mode 1" or mode=="1":
            for i in range(10):
                random_rules_mode1()
    
        elif mode=="mode 2" or mode=="2":
            for i in range(10):
                random_rules_mode2()  



def testing_blobnouns(): # get phrases with nouns in them 
    nounphrases = blob.noun_phrases
    randomphrase = random.choice(nounphrases)
    print(randomphrase)


def find_words(): # search for words 
    for word, tag in blob.tags:
        if "ai" in word:
            print(f"The part of speech of '{word}' is: {tag}")



def organize_words():

    with open('lyrics_unique.txt', 'r') as file:
        # Read the content of the file
        text = file.read()

    # Split the text into a list of words
    my_string = text.split()

    my_string = " ".join(nouns)
    print(my_string)

    file_path = "words_organized.txt"
    newtext = my_string

    with open(file_path, "w") as file:
        file.write(newtext)

    print(f"Text categorized and written to '{file_path}' successfully.")


organize_words()

ACNH save with text file

# animal crossing inspired text based game

current_location = "beach"
inventory = []
def intro():
  print("You are at the beach. You see shells lying on the sand. You see hills in the distance, the ocean to your left, and a forest to your right.")
  action = input("What do you do? ")
  if "go" in action:
    if "hills" in action:
      print("You walk towards the hills. You will need a ladder to go any further.")
    elif "ocean" in action:
      print("You walk towards the ocean. You will need a boat or swimsuit to go any further.")
    elif "forest" in action:
      print("You walk towards the forest. You see apple, trees and rocks.")
      print("your stomach growls. You need food.")
      action = input("What do you do? ")
      if "shake" in action:
        print("3 apples fall to the ground.")
      action = input("> ")
      if "pick up" in action:
        print("you pick up 3 apples.")
        inventory.append("2 apples") # find a better way to indicate how many of each item is in inventory 
      action = input("> ")
      if "eat" in action:
        print("you eat an apple.")
        print("saving...")
        save()


def save():
  
  file_path = "gamedata.txt"
  with open(file_path, "w") as file:
        file.write("inventory:" , inventory)

        print("save successful.")


intro()
